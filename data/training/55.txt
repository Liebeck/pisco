package maximoproducto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class MaximoProducto {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // representa la cantidad de numeros en la lista
        if (1 < n && n < 100000) {
            ArrayList numeros = new ArrayList();      
            Scanner sc2 = new Scanner(System.in);
            String num = sc2.nextLine(); // lee la lista de los n numeros 
            String lista[] = num.split(" ");// separa cada numero donde encuentra un espacio
            for (int i = 0; i < n; i++) {
                numeros.add(Integer.parseInt(lista[i]));
            }
            Collections.sort(numeros);
            int a = (int) numeros.get(0); //primera posiscion de la lista
            int b = (int) numeros.get(1); //segunda posiscion de la lista
            int y = (int) numeros.get(n - 2); //posiscion de la lista n-2
            int z = (int) numeros.get(n - 1); //posiscion de la lista n -1 que es la ultima pocision de la lista ya que solo n es el tamano

            if (-1000000000 <= a && z <= 1000000000) {
                // el resultado de multiplicar estos enteros esta dentro de el rango de los long 
                long c = (long)a * (long)b; //multiplicacion de la primera pocision de la lista con la segunda (a b)
                long x = (long)y * (long)z; //multiplicacion de la n-2 pocision de la lista con la n-1 (y z)
//                System.out.println(numeros);
                if (c >= x) {
                    System.out.println(c);
                }
                if (x > c) {
                    System.out.println(x);
                }
//                 9.223.372.036.854.775.807 maximo valor positivo en un long
//                 1.000.000.000.000.000.000 resultado de mulplicar los extremos
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package casillaganadora;

import java.util.Arrays;
import java.util.Scanner;

public class CasillaGanadora {

    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int gana1 =0;
        while (sc.hasNextInt()){
        int n =sc.nextInt();
        if (1<=n && n<=100){
        int [][] equipos = new int[n][n];
        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc2.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < n; k++) {
                    int a =Integer.parseInt(unifome[k]);                    
                    if (1<=a && a<=100){
                   equipos[j][k] = a;                        
                  
                           }
                }                
            }
            int gana =0;
            
            for (int j = 0; j < n; j++) {
                int fila=0;
                int columna=0;
                for (int i = 0; i < n; i++) {                                                    
                for (int k = 0; k < n; k++) {
                    fila=fila+equipos[j][k];
                    columna=columna+equipos[k][i];                                       
                }
                if(fila<columna){
                gana++;
                }
//                gana1++;
                fila=0;
                columna=0;
                }
            }
            System.out.println("Case #"+gana1);
            System.out.println(gana);

        }
    }
    }

}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package torneofutbol;

import java.util.Arrays;
import java.util.Scanner;

/**
 *
 */
public class TorneoFutbol {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        if (1<=t && t<=100){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        int local= -1;
        if (1<n&&n<=100){
        int [][] equipos = new int[n][2];
        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc2.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < 2; k++) {
                   equipos[j][k] = Integer.parseInt(unifome[k]);                    
                }                
            }
            
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j!=k){
                    if(equipos[j][0]==equipos[k][1]){
                    local++;
                    }
                    }                    
                }                
            }
            }
        System.out.println("Case #"+(i+1));
            System.out.println(local);
        }
        }
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package chocolate;

import java.util.Arrays;
import java.util.Scanner;

public class Chocolate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        if (0<t && t<1000){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        
        if (1<=n&&n<=1000){
            int cereza=0;
        char [][] barra = new char[n][n];
        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc2.nextLine();
                char [] pieza = b.toCharArray();
                for (int k = 0; k < n; k++) {
                   barra[j][k] = pieza[k]; 
                   if (pieza[k]=='#'){
                   cereza++;
                   }
                }                
            }
//            System.out.println(Arrays.deepToString(barra));
            
        if (cereza%2==0){
            int si1 =0;
            int si2 =0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                   if (barra[j][k]=='#'){
                   si1++;         
                   }
                   if (barra[k][j]=='#'){
                   si2++;         
                   }
                }
                if (cereza/2==si1){
                    si1=0;
                System.out.println("SI");
                break;
                }
                if (cereza/2==si2){
                    si2=0;
                System.out.println("SI");
                break;
                }
            }
            if (si1!=0&&si2!=0){
            System.out.println("NO");
            }
            
            
        }else{
            System.out.println("NO");
        }
    }
        
        
        
        
        }    
        }
    }
}
    

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package maximoproducto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class MaximoProducto {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // representa la cantidad de numeros en la lista
        if (1 < n && n < 100000) {
            ArrayList numeros = new ArrayList();      
            Scanner sc2 = new Scanner(System.in);
            String num = sc2.nextLine(); // lee la lista de los n numeros 
            String lista[] = num.split(" ");// separa cada numero donde encuentra un espacio
            for (int i = 0; i < n; i++) {
                int numero =Integer.parseInt(lista[i]);
                if (-1000000000 <= numero && numero <= 1000000000) {
                numeros.add(numero);
                }
            }
            Collections.sort(numeros);
            int a = (int) numeros.get(0); //primera posiscion de la lista
            int b = (int) numeros.get(1); //segunda posiscion de la lista
            int y = (int) numeros.get(n - 2); //posiscion de la lista n-2
            int z = (int) numeros.get(n - 1); //posiscion de la lista n -1 que es la ultima pocision de la lista ya que solo n es el tamano

            
                // el resultado de multiplicar estos enteros esta dentro de el rango de los long 
                long c = (long)a * (long)b; //multiplicacion de la primera pocision de la lista con la segunda (a b)
                long x = (long)y * (long)z; //multiplicacion de la n-2 pocision de la lista con la n-1 (y z)
//                System.out.println(numeros);
                if (c >= x) {
                    System.out.println(c);
                }
                if (x > c) {
                    System.out.println(x);
                }
//                 9.223.372.036.854.775.807 maximo valor positivo en un long
//                 1.000.000.000.000.000.000 resultado de mulplicar los extremos
            
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package maximoproducto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class MaximoProducto {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // representa la cantidad de numeros en la lista
        if (1 < n && n < 100000) {
            int f=0;
            ArrayList numeros = new ArrayList();      
            Scanner sc2 = new Scanner(System.in);
            String num = sc2.nextLine(); // lee la lista de los n numeros 
            String lista[] = num.split(" ");// separa cada numero donde encuentra un espacio
            for (int i = 0; i < n; i++) {
                int numero =Integer.parseInt(lista[i]);
                if (-1000000000 <= numero && numero <= 1000000000) {
                    f++;
                numeros.add(numero);
                }
            }
            Collections.sort(numeros);
            int a = (int) numeros.get(0); //primera posiscion de la lista
            int b = (int) numeros.get(1); //segunda posiscion de la lista
            int y = (int) numeros.get(f - 2); //posiscion de la lista n-2
            int z = (int) numeros.get(f - 1); //posiscion de la lista n -1 que es la ultima pocision de la lista ya que solo n es el tamano

            
                // el resultado de multiplicar estos enteros esta dentro de el rango de los long 
                long c = (long)a * (long)b; //multiplicacion de la primera pocision de la lista con la segunda (a b)
                long x = (long)y * (long)z; //multiplicacion de la n-2 pocision de la lista con la n-1 (y z)
//                System.out.println(numeros);
                if (c >= x) {
                    System.out.println(c);
                }
                if (x > c) {
                    System.out.println(x);
                }
//                 9.223.372.036.854.775.807 maximo valor positivo en un long
//                 1.000.000.000.000.000.000 resultado de mulplicar los extremos
            
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package chocolate;

import java.util.Arrays;
import java.util.Scanner;

public class Chocolate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        if (0<t && t<1000){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        
        if (1<=n&&n<=1000){
            int cereza=0;
        char [][] barra = new char[n][n];
        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc2.nextLine();
                char [] pieza = b.toCharArray();
                for (int k = 0; k < n; k++) {
                   barra[j][k] = pieza[k]; 
                   if (pieza[k]=='#'){
                   cereza++;
                   }
                }                
            }
//            System.out.println(Arrays.deepToString(barra));
            
        if (cereza%2==0){
            int si1 =0;
            int si2 =0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                   if (barra[j][k]=='#'){
                   si1++;         
                   }
                   if (barra[k][j]=='#'){
                   si2++;         
                   }
                }
                if (cereza/2==si1){
                    si1=0;
                System.out.println("SI");
                break;
                }
                if (cereza/2==si2){
                    si2=0;
                System.out.println("SI");
                break;
                }
            }
            if (si1!=0&&si2!=0){
            System.out.println("NO");
            }
            
            
        }else{
            System.out.println("NO");
        }
    }
        
        
        
        
        }    
        }
    }
}
    

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package maximoproducto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class MaximoProducto {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // representa la cantidad de numeros en la lista
        if (1 < n && n < 100000) {
            int f=0;
            ArrayList numeros = new ArrayList();      
//            Scanner sc2 = new Scanner(System.in);
            String num = sc.nextLine(); // lee la lista de los n numeros 
            String lista[] = num.split(" ");// separa cada numero donde encuentra un espacio
            for (int i = 0; i < n; i++) {
                int numero =Integer.parseInt(lista[i]);
                if (-1000000000 <= numero && numero <= 1000000000) {
                    f++;
                numeros.add(numero);
                }
            }
            Collections.sort(numeros);
            int a = (int) numeros.get(0); //primera posiscion de la lista
            int b = (int) numeros.get(1); //segunda posiscion de la lista
            int y = (int) numeros.get(f - 2); //posiscion de la lista n-2
            int z = (int) numeros.get(f - 1); //posiscion de la lista n -1 que es la ultima pocision de la lista ya que solo n es el tamano

            
                // el resultado de multiplicar estos enteros esta dentro de el rango de los long 
                long c = (long)a * (long)b; //multiplicacion de la primera pocision de la lista con la segunda (a b)
                long x = (long)y * (long)z; //multiplicacion de la n-2 pocision de la lista con la n-1 (y z)
//                System.out.println(numeros);
                if (c >= x) {
                    System.out.println(c);
                }
                if (x > c) {
                    System.out.println(x);
                }
//                 9.223.372.036.854.775.807 maximo valor positivo en un long
//                 1.000.000.000.000.000.000 resultado de mulplicar los extremos
            
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package maximoproducto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class MaximoProducto {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // representa la cantidad de numeros en la lista
        while(sc.hasNextLine()){
        if (1 < n && n < 100000) {
            int f=0;
            ArrayList numeros = new ArrayList();      
//            Scanner sc2 = new Scanner(System.in);
            String num = sc.nextLine(); // lee la lista de los n numeros 
            String lista[] = num.split(" ");// separa cada numero donde encuentra un espacio
            for (int i = 0; i < n; i++) {
                int numero =Integer.parseInt(lista[i]);
                if (-1000000000 <= numero && numero <= 1000000000) {
                    f++;
                numeros.add(numero);
                }
            }
            Collections.sort(numeros);
            int a = (int) numeros.get(0); //primera posiscion de la lista
            int b = (int) numeros.get(1); //segunda posiscion de la lista
            int y = (int) numeros.get(f - 2); //posiscion de la lista n-2
            int z = (int) numeros.get(f - 1); //posiscion de la lista n -1 que es la ultima pocision de la lista ya que solo n es el tamano

            
                // el resultado de multiplicar estos enteros esta dentro de el rango de los long 
                long c = (long)a * (long)b; //multiplicacion de la primera pocision de la lista con la segunda (a b)
                long x = (long)y * (long)z; //multiplicacion de la n-2 pocision de la lista con la n-1 (y z)
//                System.out.println(numeros);
                if (c >= x) {
                    System.out.println(c);
                }
                if (x > c) {
                    System.out.println(x);
                }
//                 9.223.372.036.854.775.807 maximo valor positivo en un long
//                 1.000.000.000.000.000.000 resultado de mulplicar los extremos
            
        }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package maximoproducto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class MaximoProducto {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); // representa la cantidad de numeros en la lista
//        while(sc.hasNextLine()){
        sc.nextLine();
                
        if (1 < n && n < 100000) {
            int f=0;
            ArrayList numeros = new ArrayList();      
//            Scanner sc2 = new Scanner(System.in);
            String num = sc.nextLine(); // lee la lista de los n numeros 
            String lista[] = num.split(" ");// separa cada numero donde encuentra un espacio
            for (int i = 0; i < n; i++) {
                int numero =Integer.parseInt(lista[i]);
                if (-1000000000 <= numero && numero <= 1000000000) {
                    f++;
                numeros.add(numero);
                }
            }
            Collections.sort(numeros);
            int a = (int) numeros.get(0); //primera posiscion de la lista
            int b = (int) numeros.get(1); //segunda posiscion de la lista
            int y = (int) numeros.get(f - 2); //posiscion de la lista n-2
            int z = (int) numeros.get(f - 1); //posiscion de la lista n -1 que es la ultima pocision de la lista ya que solo n es el tamano

            
                // el resultado de multiplicar estos enteros esta dentro de el rango de los long 
                long c = (long)a * (long)b; //multiplicacion de la primera pocision de la lista con la segunda (a b)
                long x = (long)y * (long)z; //multiplicacion de la n-2 pocision de la lista con la n-1 (y z)
//                System.out.println(numeros);
                if (c >= x) {
                    System.out.println(c);
                }
                if (x > c) {
                    System.out.println(x);
                }
//                 9.223.372.036.854.775.807 maximo valor positivo en un long
//                 1.000.000.000.000.000.000 resultado de mulplicar los extremos
            
//        }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package casillaganadora;

import java.util.Scanner;

public class CasillaGanadora {

    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int gana1 =0;
        while (sc.hasNextInt()){
        int n =sc.nextInt();
        if (1<=n && n<=100){
        int [][] equipos = new int[n][n];
        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc2.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < n; k++) {
                    int a =Integer.parseInt(unifome[k]);                    
                    if (1<=a && a<=100){
                   equipos[j][k] = a;                        
                  
                           }
                }                
            }
            int gana =0;
            
            for (int j = 0; j < n; j++) {
                int fila=0;
                int columna=0;
                for (int i = 0; i < n; i++) {                                                    
                for (int k = 0; k < n; k++) {
                    fila=fila+equipos[j][k];
                    columna=columna+equipos[k][i];                                       
                }
                if(fila<columna){
                gana++;
                }
                fila=0;
                columna=0;
                }
            }
            System.out.println("Case #"+gana1);
            System.out.println(gana);

        }
    }
    }

}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package casillaganadora;

import java.util.Scanner;

public class CasillaGanadora {

    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int gana1 =0;
        while (sc.hasNextInt()){
        int n =sc.nextInt();
        sc.nextLine();
        if (1<=n && n<=100){
        int [][] equipos = new int[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < n; k++) {
                    int a =Integer.parseInt(unifome[k]);                    
                    if (1<=a && a<=100){
                   equipos[j][k] = a;                        
                  
                           }
                }                
            }
            int gana =0;
            
            for (int j = 0; j < n; j++) {
                int fila=0;
                int columna=0;
                for (int i = 0; i < n; i++) {                                                    
                for (int k = 0; k < n; k++) {
                    fila=fila+equipos[j][k];
                    columna=columna+equipos[k][i];                                       
                }
                if(fila<columna){
                gana++;
                }
                fila=0;
                columna=0;
                }
            }
            System.out.println("Case #"+gana1);
            System.out.println(gana);

        }
    }
    }

}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package torneofutbol;

import java.util.Arrays;
import java.util.Scanner;

/**
 *
 */
public class TorneoFutbol {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        if (1<=t && t<=100){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        int local= -1;
        if (1<n&&n<=100){
        int [][] equipos = new int[n][2];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < 2; k++) {
                   equipos[j][k] = Integer.parseInt(unifome[k]);                    
                }                
            }
            
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j!=k){
                    if(equipos[j][0]==equipos[k][1]){
                    local++;
                    }
                    }                    
                }                
            }
            }
        System.out.println("Case #"+(i+1));
            System.out.println(local);
        }
        }
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package chocolate;

//import java.util.Arrays;
import java.util.Scanner;

public class Chocolate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        if (1<=n&&n<=1000){
            int cereza=0;
        char [][] barra = new char[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
                char [] pieza = b.toCharArray();
                for (int k = 0; k < n; k++) {
                   barra[j][k] = pieza[k]; 
                   if (pieza[k]=='#'){
                   cereza++;
                   }
                }                
            }
//            System.out.println(Arrays.deepToString(barra));
            
        if (cereza%2==0){
            int si1 =0;
            int si2 =0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                   if (barra[j][k]=='#'){
                   si1++;         
                   }
                   if (barra[k][j]=='#'){
                   si2++;         
                   }
                }
                if (cereza/2==si1){
                    si1=0;
                System.out.println("SI");
                break;
                }
                if (cereza/2==si2){
                    si2=0;
                System.out.println("SI");
                break;
                }
            }
            if (si1!=0&&si2!=0){
            System.out.println("NO");
            }
            
            
        }else{
            System.out.println("NO");
        }
    }
        
        
        
        
        }    
        }
    }
}
    

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package chocolate;

//import java.util.Arrays;
import java.util.Scanner;

public class Chocolate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        if (1<=n&&n<=1000){
            int cereza=0;
        char [][] barra = new char[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
                char [] pieza = b.toCharArray();
                for (int k = 0; k < n; k++) {
                   barra[j][k] = pieza[k]; 
                   if (pieza[k]=='#'){
                   cereza++;
                   }
                }                
            }
//            System.out.println(Arrays.deepToString(barra));
            
        if (cereza%2==0){
            int si1 =0;
            int si2 =0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                   if (barra[j][k]=='#'){
                   si1++;         
                   }
                   if (barra[k][j]=='#'){
                   si2++;         
                   }
                }
                if (cereza/2==si1){
                    si1=0;
                System.out.println("SI");
                break;
                }
                if (cereza/2==si2){
                    si2=0;
                System.out.println("SI");
                break;
                }
            }
            if (si1!=0&&si2!=0){
            System.out.println("NO");
            }
            
            
        }else{
            System.out.println("NO");
        }
    }
        
        
        
        
        }    
        }
    }
}
    

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package casillaganadora;

import java.util.Scanner;

public class CasillaGanadora {

    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int gana1 =0;
        while (sc.hasNextInt()){
        int n =sc.nextInt();
        sc.nextLine();
        if (1<=n && n<=100){
        int [][] equipos = new int[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
		sc.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < n; k++) {
                    int a =Integer.parseInt(unifome[k]);                    
                    if (1<=a && a<=100){
                   equipos[j][k] = a;                        
                  
                           }
                }                
            }
            int gana =0;
            
            for (int j = 0; j < n; j++) {
                int fila=0;
                int columna=0;
                for (int i = 0; i < n; i++) {                                                    
                for (int k = 0; k < n; k++) {
                    fila=fila+equipos[j][k];
                    columna=columna+equipos[k][i];                                       
                }
                if(fila<columna){
                gana++;
                }
                fila=0;
                columna=0;
                }
            }
            System.out.println("Case #"+gana1);
            System.out.println(gana);

        }
    }
    }

}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package chocolate;

//import java.util.Arrays;
import java.util.Scanner;

public class Chocolate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        if (1<=n&&n<=1000){
            int cereza=0;
        char [][] barra = new char[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
//		sc.nextLine();
                char [] pieza = b.toCharArray();
                for (int k = 0; k < n; k++) {
                   barra[j][k] = pieza[k]; 
                   if (pieza[k]=='#'){
                   cereza++;
                   }
                }                
            }
//            System.out.println(Arrays.deepToString(barra));
            
        if (cereza%2==0){
            int si1 =0;
            int si2 =0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                   if (barra[j][k]=='#'){
                   si1++;         
                   }
                   if (barra[k][j]=='#'){
                   si2++;         
                   }
                }
                if (cereza/2==si1){
                    si1=0;
                System.out.println("SI");
                break;
                }
                if (cereza/2==si2){
                    si2=0;
                System.out.println("SI");
                break;
                }
            }
            if (si1!=0&&si2!=0){
            System.out.println("NO");
            }
            
            
        }else{
            System.out.println("NO");
        }
    }
        
        
        
        
        }    
        }
    }
}
    

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package chocolate;

//import java.util.Arrays;
import java.util.Scanner;

public class Chocolate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        if (1<=n&&n<=1000){
            int cereza=0;
        char [][] barra = new char[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
//		sc.nextLine();
                char [] pieza = b.toCharArray();
                for (int k = 0; k < n; k++) {
                   barra[j][k] = pieza[k]; 
                   if (pieza[k]=='#'){
                   cereza++;
                   }
                }                
            }
//            System.out.println(Arrays.deepToString(barra));
            
        if (cereza%2==0){
            int si1 =0;
            int si2 =0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                   if (barra[j][k]=='#'){
                   si1++;         
                   }
                   if (barra[k][j]=='#'){
                   si2++;         
                   }
                }
                if (cereza/2==si1){
                    si1=0;
                System.out.println("SI");
                break;
                }
                if (cereza/2==si2){
                    si2=0;
                System.out.println("SI");
                break;
                }
            }
            if (si1!=0&&si2!=0){
            System.out.println("NO");
            }            
            if (cereza==0){
            System.out.println("NO");
            }
            
        }else{
            System.out.println("NO");
        }
    }
        
        
        
        
        }    
        }
    }
}
    

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package chocolate;

//import java.util.Arrays;
import java.util.Scanner;

public class Chocolate {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        if (1<=n&&n<=1000){
            int cereza=0;
        char [][] barra = new char[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
//		sc.nextLine();
                char [] pieza = b.toCharArray();
                for (int k = 0; k < n; k++) {
                   barra[j][k] = pieza[k]; 
                   if (pieza[k]=='#'){
                   cereza++;
                   }
                }                
            }
//            System.out.println(Arrays.deepToString(barra));
		if (cereza==0){
            System.out.println("NO");
            } else if (cereza%2==0){
            int si1 =0;
            int si2 =0;
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                   if (barra[j][k]=='#'){
                   si1++;         
                   }
                   if (barra[k][j]=='#'){
                   si2++;         
                   }
                }
                if (cereza/2==si1){
                    si1=0;
                System.out.println("SI");
                break;
                }
                if (cereza/2==si2){
                    si2=0;
                System.out.println("SI");
                break;
                }
            }
            if (si1!=0&&si2!=0){
            System.out.println("NO");
            }            
            
            
        }else{
            System.out.println("NO");
        }
    }
        
        
        
        
        }    
        }
    }
}
    

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package casillaganadora;

import java.util.Scanner;

public class CasillaGanadora {

    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        while (sc.hasNextInt()){
        int gana1 =0;
        
        int n =sc.nextInt();
        sc.nextLine();
        if (1<=n && n<=100){
        int [][] equipos = new int[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
//		sc.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < n; k++) {
                    int a =Integer.parseInt(unifome[k]);                    
                    if (1<=a && a<=100){
                   equipos[j][k] = a;                        
                  
                           }
                }                
            }
            int gana =0;
            
            for (int j = 0; j < n; j++) {
                int fila=0;
                int columna=0;
                for (int i = 0; i < n; i++) {                                                    
                for (int k = 0; k < n; k++) {
                    fila=fila+equipos[j][k];
                    columna=columna+equipos[k][i];                                       
                }
                if(fila<columna){
                gana++;
                }
                fila=0;
                columna=0;
                }
            }
            System.out.println("Case #"+gana1);
            System.out.println(gana);

        }
    }
    }

}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package torneofutbol;

//import java.util.Arrays;
import java.util.Scanner;

/**
 *
 */
public class TorneoFutbol {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        sc.nextLine();
        if (1<=t && t<=100){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        int local= -1;
        if (1<n&&n<=100){
        int [][] equipos = new int[n][2];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < 2; k++) {
                   equipos[j][k] = Integer.parseInt(unifome[k]);                    
                }                
            }
            
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j!=k){
                    if(equipos[j][0]==equipos[k][1]){
                    local++;
                    }
                    }                    
                }                
            }
            }
        System.out.println("Case #"+(i+1));
            System.out.println(local);
        }
        }
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package torneofutbol;

//import java.util.Arrays;
import java.util.Scanner;

/**
 *
 */
public class TorneoFutbol {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        int t =sc.nextInt();
        sc.nextLine();
        if (1<=t && t<=100){
        for (int i = 0; i < t; i++) {        
        int n = sc.nextInt();
        sc.nextLine();
        int local= 0;
        if (1<n&&n<=100){
        int [][] equipos = new int[n][2];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < 2; k++) {
                    int color= Integer.parseInt(unifome[k]);
                    if (1<color && color <100){
                   equipos[j][k] = color;         
                           }
                }                
            }
            
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j!=k){
                    if(equipos[j][0]==equipos[k][1]){
                    local++;
                    }
                    }                    
                }                
            }
            }
        System.out.println("Case #"+(i+1));
            System.out.println(local);
        }
        }
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package casillaganadora;

import java.util.Scanner;

public class CasillaGanadora {

    public static void main(String[] args) {
        Scanner sc= new Scanner (System.in);
        while (sc.hasNextInt()){
        int gana1 =0;
        
        int n =sc.nextInt();
        sc.nextLine();
        if (1<=n && n<=100){
        int [][] equipos = new int[n][n];
//        Scanner sc2=new Scanner (System.in);
            for (int j = 0; j < n; j++) {
                String b = sc.nextLine();
//		sc.nextLine();
                String unifome [] = b.split(" ");
                for (int k = 0; k < n; k++) {
                    int a =Integer.parseInt(unifome[k]);                    
                    if (1<=a && a<=100){
                   equipos[j][k] = a;                        
                  
                           }
                }                
            }
            int gana =0;
            
            for (int j = 0; j < n; j++) {
                int fila=0;
                int columna=0;
                for (int i = 0; i < n; i++) {                                                    
                for (int k = 0; k < n; k++) {
                    fila=fila+equipos[j][k];
                    columna=columna+equipos[k][i];                                       
                }
                if(fila<columna){
                gana++;
                }
                fila=0;
                columna=0;
                }
            }
            System.out.println("Case #"+gana1);
            System.out.println(gana);

        }
    }
    }

}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemab;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 */
public class ProblemaB {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
            int casos =0;
        for (int i = 0; i < t; i++) {
            casos++;
            int n=0;
            int k=0;
            int cabeza=0;
            int cola=0;
            ArrayList cartas = new ArrayList();
            
            String cantidad = sc.nextLine();
            String ncant [] = cantidad.split(" ");
            n= Integer.parseInt(ncant[0]);
            k= Integer.parseInt(ncant[1]);
            
            cantidad = sc.nextLine();
            String ncartas [] = cantidad.split(" ");
            
            int [] jugadores = new int [k]; 
            int [] ganadores = new int [k];
            
            if(1<=n && n<= 10000 && 1<=k && k<=10000){
                
                
                for (int j = 0; j < n; j++) {
                    int pi = Integer.parseInt(ncartas[j]);                
                    if(1<=pi && pi<=1000 ){
                        cartas.add(pi);
                        cola++;
                    }
                }
                
                int l = 0;
                    for (int j = 0; j < cartas.size(); j++) {                    
                    
                        int a = (int) cartas.get(cabeza);
                        int z = (int) cartas.get(cola-1);
                        if(a>z){
                           jugadores [l]=a + jugadores [l];
                           cabeza++; 
                        }
                        else if (a<z){
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }else{
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }
                        l++;
                        if(l==k){
                        l=0;
                        } 
                        
                        
                    }
              
            }
            k =0;
            n=0;
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]>k){
                    k=jugadores[j];
                }                
            }
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]==k){
                ganadores[n]= j;
                n++;
                }                
            }
            
            System.out.println("Caso #"+casos+":");
            for (int j = 0; j < n; j++) {
                System.out.print((ganadores[j]+1)+" ");                
            }
            System.out.println();
            
            
            
        }
        }
        // TODO code application logic here
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemac;

import java.util.Scanner;

/**
 *
 */
public class ProblemaC {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n1 = sc.nextInt();
        sc.nextLine();   
        int chicas=0;
        
        if (n1>=1 && 10000>=n1){
            String entrada ;
            int[] n2 = new int [n1];
            
            entrada = sc.nextLine();
           
            String cond [] = entrada.split(" ");
            for (int i = 0; i < n1; i++) {
                n2[i] = Integer.parseInt(cond[i]);
            }
            int m1 = sc.nextInt();
            sc.nextLine();
            if (m1>=1 && 10000>=m1){
                for (int i = 0; i < m1; i++) {
                int x=0,y=0;
                entrada = sc.nextLine();
               
                String cond1 [] = entrada.split(" ");
                    for (int j = 0; j < n2.length; j++) { 
                        if(n2[j]>=1 && 10000>=n2[j]){
                            for (int k = 0; k < cond1.length; k++) {
                                int p = Integer.parseInt(cond1[k]);
                                if (n2[j] == p){
                                    x++;
                                    break;
                                    
                                }

                            }
                            y++;
                        }
                    }
                    if(x==y){
                    chicas++;
                    }
            }
            
            }
            
            System.out.println(chicas);
            
            
        }
        
        // TODO code application logic here
    }
    
}



<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemab;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 */
public class ProblemaB {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
            int casos =0;
        for (int i = 0; i < t; i++) {
            casos++;
            int n=0;
            int k=0;
            int cabeza=0;
            int cola=0;
            ArrayList cartas = new ArrayList();
            
            String cantidad = sc.nextLine();
            String ncant [] = cantidad.split(" ");
            n= Integer.parseInt(ncant[0]);
            k= Integer.parseInt(ncant[1]);
            
            cantidad = sc.nextLine();
            String ncartas [] = cantidad.split(" ");
            
            int [] jugadores = new int [k]; 
            int [] ganadores = new int [k];
            
            if(1<=n && n<= 10000 && 1<=k && k<=10000){
                
                
                for (int j = 0; j < n; j++) {
                    int pi = Integer.parseInt(ncartas[j]);                
                    if(1<=pi && pi<=1000 ){
                        cartas.add(pi);
                        cola++;
                    }
                }
                
                int l = 0;
                    for (int j = 0; j < cartas.size(); j++) {                    
                    
                        int a = (int) cartas.get(cabeza);
                        int z = (int) cartas.get(cola-1);
                        if(a>z){
                           jugadores [l]=a + jugadores [l];
                           cabeza++; 
                        }
                        else if (a<z){
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }else{
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }
                        l++;
                        if(l==k){
                        l=0;
                        }   
                    }
            }
            k =0;
            n=0;
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]>k){
                    k=jugadores[j];
                }                
            }
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]==k){
                ganadores[n]= j;
                n++;
                }                
            }
            
            System.out.println("Caso #"+casos+":");
            for (int j = 0; j < n; j++) {
                if(j==(n-1)){
                System.out.print((ganadores[j]+1));
                }else{
                System.out.print((ganadores[j]+1)+" ");
                }
            }
            System.out.println(" "+jugadores[ganadores[0]]);
            
            
            
        }
        }
        // TODO code application logic here
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemab;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 */
public class ProblemaB {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
            int casos =0;
        for (int i = 0; i < t; i++) {
            casos++;
            int n=0;
            int k=0;
            int cabeza=0;
            int cola=0;
            ArrayList cartas = new ArrayList();
            
            String cantidad = sc.nextLine();
            String ncant [] = cantidad.split(" ");
            n= Integer.parseInt(ncant[0]);
            k= Integer.parseInt(ncant[1]);
            
            cantidad = sc.nextLine();
            String ncartas [] = cantidad.split(" ");
            
            int [] jugadores = new int [k]; 
            int [] ganadores = new int [k];
            
            if(1<=n && n<= 10000 && 1<=k && k<=10000){
                
                
                for (int j = 0; j < n; j++) {
                    int pi = Integer.parseInt(ncartas[j]);                
                    if(1<=pi && pi<=1000 ){
                        cartas.add(pi);
                        cola++;
                    }
                }
                
                int l = 0;
                    for (int j = 0; j < cartas.size(); j++) {                    
                    
                        int a = (int) cartas.get(cabeza);
                        int z = (int) cartas.get(cola-1);
                        if(a>z){
                           jugadores [l]=a + jugadores [l];
                           cabeza++; 
                        }
                        else if (a<z){
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }else{
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }
                        l++;
                        if(l==k){
                        l=0;
                        }   
                    }
            }
            k =0;
            n=0;
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]>k){
                    k=jugadores[j];
                }                
            }
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]==k){
                ganadores[n]= j;
                n++;
                }                
            }
            
            System.out.println("Caso #"+casos+":");
            for (int j = 0; j < n; j++) {
                if(j==(n-1)){
                System.out.print((ganadores[j]+1));
                }else{
                System.out.print((ganadores[j]+1)+" ");
                }
            }
            System.out.println();
            //System.out.println(" "+jugadores[ganadores[0]]);
            
            
            
        }
        }
        // TODO code application logic here
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemab;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 */
public class ProblemaB {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
            int casos =0;
        for (int i = 0; i < t; i++) {
            casos++;
            int n=0;
            int k=0;
            int cabeza=0;
            int cola=0;
            ArrayList cartas = new ArrayList();
            
            String cantidad = sc.nextLine();
            String ncant [] = cantidad.split(" ");
            n= Integer.parseInt(ncant[0]);
            k= Integer.parseInt(ncant[1]);
            
            cantidad = sc.nextLine();
            String ncartas [] = cantidad.split(" ");
            
            int [] jugadores = new int [k]; 
            int [] ganadores = new int [k];
            
            if(1<=n && n<= 10000 && 1<=k && k<=10000){
                
                
                for (int j = 0; j < n; j++) {
                    int pi = Integer.parseInt(ncartas[j]);                
                    if(1<=pi && pi<=1000 ){
                        cartas.add(pi);
                        cola++;
                    }
                }
                
                int l = 0;
                    for (int j = 0; j < cartas.size(); j++) {                    
                    
                        int a = (int) cartas.get(cabeza);
                        int z = (int) cartas.get(cola-1);
                        if(a>z){
                           jugadores [l]=a + jugadores [l];
                           cabeza++; 
                        }
                        else if (a<z){
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }else{
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }
                        l++;
                        if(l==k){
                        l=0;
                        }   
                    }
            }
            k =0;
            n=0;
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]>k){
                    k=jugadores[j];
                }                
            }
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]==k){
                ganadores[n]= j;
                n++;
                }                
            }
            
            System.out.println("Caso #"+casos+":");
            for (int j = 0; j < n; j++) {
                if(j==(n-1)){
                System.out.print((ganadores[j]+1));
                }else{
                System.out.print((ganadores[j]+1)+" ");
                }
            }
            //System.out.println();
            System.out.println(" "+jugadores[ganadores[0]]);
            
            
            
        }
        }
        // TODO code application logic here
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemab;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 */
public class ProblemaB {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
            int casos =0;
        for (int i = 0; i < t; i++) {
            casos++;
            int n=0;
            int k=0;
            int cabeza=0;
            int cola=0;
            ArrayList cartas = new ArrayList();
            
            String cantidad = sc.nextLine();
            String ncant [] = cantidad.split(" ");
            n= Integer.parseInt(ncant[0]);
            k= Integer.parseInt(ncant[1]);
            
            cantidad = sc.nextLine();
            String ncartas [] = cantidad.split(" ");
            
            int [] jugadores = new int [k]; 
            int [] ganadores = new int [k];
            
            if(1<=n && n<= 10000 && 1<=k && k<=10000){
                
                
                for (int j = 0; j < n; j++) {
                    int pi = Integer.parseInt(ncartas[j]);                
                    if(1<=pi && pi<=1000 ){
                        cartas.add(pi);
                        cola++;
                    }
                }
                
                int l = 0;
                    for (int j = 0; j < cartas.size(); j++) {                    
                    
                        int a = (int) cartas.get(cabeza);
                        int z = (int) cartas.get(cola-1);
                        if(a>z){
                           jugadores [l]=a + jugadores [l];
                           cabeza++; 
                        }
                        else if (a<z){
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }else{
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }
                        l++;
                        if(l==k){
                        l=0;
                        }   
                    }
            }
            k =0;
            n=0;
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]>k){
                    k=jugadores[j];
                }                
            }
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]==k){
                ganadores[n]= j;
                n++;
                }                
            }
            
            System.out.println("Caso #"+casos+":");
            for (int j = 0; j < n; j++) {
                if(j==(n-1)){
                System.out.print((ganadores[j]+1));
                }else{
                System.out.print((ganadores[j]+1)+" ");
                }
            }
            System.out.println();
            //System.out.println(" "+jugadores[ganadores[0]]);
            
            
            
        }
        }
        // TODO code application logic here
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemae;

import java.util.Scanner;

/**
 *
 */
public class ProblemaE {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if(0<t && t<1000){   
            int casos =0;
            for (int i = 0; i < t; i++) {
                casos++;
                System.out.println("Caso #"+casos+":");
                int n = sc.nextInt();
                sc.nextLine();
                int fila = 0;
                int mayor =0;
                
                int [][] columna = new int [2][n];
                
                
                String cubi = sc.nextLine();
                String cubiculos [] = cubi.split(" ");
                
                if(1<=n && n<=1000){                    
                    for (int j = 0; j < cubiculos.length; j++) {
                        int k = Integer.parseInt(cubiculos[j]) ;
                        if(1<=k && k<=1000){
                            columna [0][fila] = k;
                            fila++;                       
                        }                        
                    }
                    String[][] casiller = new String [fila][];
                    for (int j = 0; j < fila ; j++) {
                        
                        casiller [j] = new String [columna[0][j]];                        
                    }    
                    n = sc.nextInt();
                    sc.nextLine();
                    if (1<=n && n<=10000){
                        int[][] entrantes = new int [2][n];
                        for (int j = 0; j < n; j++) {
                            
                            cubi = sc.nextLine();
                            cubiculos = cubi.split(" ");
                            
                            if(cubi.contains("ingresar")){
                                
                                boolean ingreso = true;
                                int id = Integer.parseInt(cubiculos[3]);                                
                                for (int k = 0; k < n; k++) {
                                    if(entrantes[0][k] == id ){                                        
                                        if(entrantes[1][k]>=3){
                                            System.out.println("ingreso denegado");
                                            ingreso = false;
                                        }
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    
                                    }else if(entrantes[0][k]== 0){
                                        entrantes[0][k] = id;
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    }
                                }
                                
                                if(ingreso){
                                double menor = 1;
                                double promedio ;
                                int libre = 0;
                                for (int k = 0; k < fila; k++) {
                                    double date1 =columna[1][k];
                                    double date2 =columna[0][k];
                                    promedio =(date1/date2);
                                   
                                    if (promedio < menor){
                                        menor = promedio;
                                        libre = k;
                                     
                                    }
                                }
                                if(menor==1){
                                    System.out.println("limite alcanzado");                                   
                                }else{               
                                    
                                    for (int h = 0; h < columna[0][libre]; h++) {
                                        
                                        if(casiller[libre][h] == null){
                                   
                                            casiller[libre][h] = cubi;
                                            System.out.println((libre+1)+" "+(h+1));
                                            
                                            columna[1][libre]= columna[1][libre] + 1;
                                            break;
                                        }                                        
                                    }
                                    
                                }           
                                }
                            }else if(cubi.contains("salir")){
                                int salto =0;
                                String cedula = cubiculos[1];
                                for (int k = 0; k < casiller.length; k++) {
                                    mayor = columna[0][k];
                                    //System.out.println("aqui2  " +mayor);
                                    for (int l = 0; l < casiller[k].length; l++) {
                                        //System.out.println("aqui1\t"+l);
                                        
                                        if(casiller[k][l]!=null){
                                        if(casiller[k][l].contains(cedula)){
                                            cubiculos = casiller[k][l].split(" ");
                                            System.out.println(cubiculos[1]);
                                            casiller[k][l] = null;
                                            columna[1][k] = columna[1][k]-1;
                                            salto++;
                                            break;
                                        }
                                        }
                                        
                                    }
                                    //System.out.println("aqui3");
                                    if (salto != 0) {
                                        break;
                                    }
                                }
                    
                            }
                            
                        }
                    
                    
                    }
                    
                }
                
                
                
            }
        }
        // TODO code application logic here
    }
    
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemad1;

import java.util.Scanner;

/**
 *
 */
public class ProblemaD1 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if(0<t && t<1000){   
            int casos =0;
            for (int i = 0; i < t; i++) {
                casos++;
                System.out.println("Caso #"+casos+":");
                int n = sc.nextInt();
                sc.nextLine();
                int fila = 0;
                int mayor =0;
                
                int [][] columna = new int [2][n];
                
                String cubi = sc.nextLine();
                String cubiculos [] = cubi.split(" ");
                
                if(1<=n && n<=1000){                    
                    for (int j = 0; j < cubiculos.length; j++) {
                        int k = Integer.parseInt(cubiculos[j]) ;
                        if(1<=k && k<=1000){
                            columna [0][fila] = k;
                            fila++;                       
                        }                        
                    }
                    String[][] casiller = new String [fila][];
                    for (int j = 0; j < fila ; j++) {
                        
                        casiller [j] = new String [columna[0][j]];                        
                    }    
                    n = sc.nextInt();
                    sc.nextLine();
                    if (1<=n && n<=10000){
                        for (int j = 0; j < n; j++) {
                            cubi = sc.nextLine();
                            cubiculos = cubi.split(" ");
                            if(cubi.contains("ingresar")){
                                double menor = 1;
                                double promedio ;
                                int libre = 0;
                                for (int k = 0; k < fila; k++) {
                                    double date1 =columna[1][k];
                                    double date2 =columna[0][k];
                                    promedio =(date1/date2);
                                   
                                    if (promedio < menor){
                                        menor = promedio;
                                        libre = k;
                                     
                                    }
                                }
                                if(menor==1){
                                    System.out.println("limite alcanzado");                                   
                                }else{               
                                    
                                    for (int h = 0; h < columna[0][libre]; h++) {
                                        
                                        if(casiller[libre][h] == null){
                                   
                                            casiller[libre][h] = cubi;
                                            System.out.println((libre+1)+" "+(h+1));
                                            
                                            columna[1][libre]= columna[1][libre] + 1;
                                            break;
                                        }                                        
                                    }
                                    
                                }                               
                            }else if(cubi.contains("salir")){
                                int salto =0;
                                String cedula = cubiculos[1];
                                for (int k = 0; k < casiller.length; k++) {
                                    mayor = columna[0][k];
                                    //System.out.println("aqui2  " +mayor);
                                    for (int l = 0; l < casiller[k].length; l++) {
                                        //System.out.println("aqui1\t"+l);
                                        
                                        if(casiller[k][l]!=null){
                                        if(casiller[k][l].contains(cedula)){
                                            cubiculos = casiller[k][l].split(" ");
                                            System.out.println(cubiculos[1]);
                                            casiller[k][l] = null;
                                            columna[1][k] = columna[1][k]-1;
                                            salto++;
                                            break;
                                        }
                                        }
                                        
                                    }
                                    //System.out.println("aqui3");
                                    if (salto != 0) {
                                        break;
                                    }
                                }
                    
                            }
                            
                        }
                    
                    
                    }
                    
                }
                
                
                
            }
        }
        
        // TODO code application logic here
    }
    
}



<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemae;

import java.util.Scanner;

/**
 *
 */
public class ProblemaE {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if(0<t && t<1000){   
            int casos =0;
            for (int i = 0; i < t; i++) {
                casos++;
                System.out.println("Caso #"+casos+":");
                int n = sc.nextInt();
                sc.nextLine();
                int fila = 0;
                int mayor =0;
                
                int [][] columna = new int [2][n];
                
                
                String cubi = sc.nextLine();
                String cubiculos [] = cubi.split(" ");
                
                if(1<=n && n<=1000){                    
                    for (int j = 0; j < cubiculos.length; j++) {
                        int k = Integer.parseInt(cubiculos[j]) ;
                        if(1<=k && k<=1000){
                            columna [0][fila] = k;
                            fila++;                       
                        }                        
                    }
                    String[][] casiller = new String [fila][];
                    for (int j = 0; j < fila ; j++) {
                        
                        casiller [j] = new String [columna[0][j]];                        
                    }    
                    n = sc.nextInt();
                    sc.nextLine();
                    if (1<=n && n<=10000){
                        int[][] entrantes = new int [2][n];
                        for (int j = 0; j < n; j++) {
                            
                            cubi = sc.nextLine();
                            cubiculos = cubi.split(" ");
                            
                            if(cubi.contains("ingresar")){
                                
                                boolean ingreso = true;
                                int id = Integer.parseInt(cubiculos[3]);                                
                                for (int k = 0; k < n; k++) {
                                    if(entrantes[0][k] == id ){                                        
                                        if(entrantes[1][k]>=3){
                                            System.out.println("ingreso denegado");
                                            ingreso = false;
                                        }
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    
                                    }else if(entrantes[0][k]== 0){
                                        entrantes[0][k] = id;
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    }
                                }
                                
                                if(ingreso){
                                double menor = 1;
                                double promedio ;
                                int libre = 0;
                                for (int k = 0; k < fila; k++) {
                                    double date1 =columna[1][k];
                                    double date2 =columna[0][k];
                                    promedio =(date1/date2);
                                   
                                    if (promedio < menor){
                                        menor = promedio;
                                        libre = k;
                                     
                                    }
                                }
                                if(menor==1){
                                    System.out.println("limite alcanzado");                                   
                                }else{               
                                    
                                    for (int h = 0; h < columna[0][libre]; h++) {
                                        
                                        if(casiller[libre][h] == null){
                                   
                                            casiller[libre][h] = cubi;
                                            System.out.println((libre+1)+" "+(h+1));
                                            
                                            columna[1][libre]= columna[1][libre] + 1;
                                            break;
                                        }                                        
                                    }
                                    
                                }           
                                }
                            }else if(cubi.contains("salir")){
                                int salto =0;
                                String cedula = cubiculos[1];
                                for (int k = 0; k < casiller.length; k++) {
                                    mayor = columna[0][k];
                                   
                                    for (int l = 0; l < casiller[k].length; l++) {
                                      
                                        
                                        if(casiller[k][l]!=null){
                                        if(casiller[k][l].contains(cedula)){
                                            cubiculos = casiller[k][l].split(" ");
                                            System.out.println(cubiculos[1]);
                                            casiller[k][l] = null;
                                            columna[1][k] = columna[1][k]-1;
                                            salto++;
                                            break;
                                        }
                                        }
                                        
                                    }
                                    
                                    if (salto != 0) {
                                        break;
                                    }
                                }
                    
                            }
                            
                        }
                    
                    
                    }
                    
                }
                
                
                
            }
        }
      
    }
    
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemae;

import java.util.Scanner;

/**
 *
 */
public class ProblemaE {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if(0<t && t<1000){   
            int casos =0;
            for (int i = 0; i < t; i++) {
                casos++;
                System.out.println("Caso #"+casos+":");
                int n = sc.nextInt();
                sc.nextLine();
                int fila = 0;
                
                int [][] columna = new int [2][n];
                
                
                String cubi = sc.nextLine();
                String cubiculos [] = cubi.split(" ");
                
                if(1<=n && n<=1000){                    
                    for (int j = 0; j < cubiculos.length; j++) {
                        int k = Integer.parseInt(cubiculos[j]) ;
                        if(1<=k && k<=1000){
                            columna [0][fila] = k;
                            fila++;                       
                        }                        
                    }
                    String[][] casiller = new String [fila][];
                    for (int j = 0; j < fila ; j++) {
                        
                        casiller [j] = new String [columna[0][j]];                        
                    }    
                    n = sc.nextInt();
                    sc.nextLine();
                    if (1<=n && n<=10000){
                        int[][] entrantes = new int [2][n];
                        for (int j = 0; j < n; j++) {
                            
                            cubi = sc.nextLine();
                            cubiculos = cubi.split(" ");
                            
                            if(cubi.contains("ingresar")){
                                
                                boolean ingreso = true;
                                int id = Integer.parseInt(cubiculos[3]);                                
                                for (int k = 0; k < n; k++) {
                                    if(entrantes[0][k] == id ){                                        
                                        if(entrantes[1][k]>=3){
                                            System.out.println("ingreso denegado");
                                            ingreso = false;
                                        }
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    
                                    }else if(entrantes[0][k]== 0){
                                        entrantes[0][k] = id;
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    }
                                }
                                
                                if(ingreso){
                                double menor = 1;
                                double promedio ;
                                int libre = 0;
                                for (int k = 0; k < fila; k++) {
                                    double date1 =columna[1][k];
                                    double date2 =columna[0][k];
                                    promedio =(date1/date2);
                                   
                                    if (promedio < menor){
                                        menor = promedio;
                                        libre = k;
                                     
                                    }
                                }
                                if(menor==1){
                                    System.out.println("limite alcanzado");                                   
                                }else{               
                                    
                                    for (int h = 0; h < columna[0][libre]; h++) {
                                        
                                        if(casiller[libre][h] == null){
                                   
                                            casiller[libre][h] = cubi;
                                            System.out.println((libre+1)+" "+(h+1));
                                            
                                            columna[1][libre]= columna[1][libre] + 1;
                                            break;
                                        }                                        
                                    }
                                    
                                }           
                                }
                            }else if(cubi.contains("salir")){
                                int salto =0;
                                String cedula = cubiculos[1];
                                for (int k = 0; k < casiller.length; k++) {
                                    
                                    
                                    for (int l = 0; l < casiller[k].length; l++) {
                                        
                                        
                                        if(casiller[k][l]!=null){
                                        if(casiller[k][l].contains(cedula)){
                                            cubiculos = casiller[k][l].split(" ");
                                            System.out.println(cubiculos[1]);
                                            casiller[k][l] = null;
                                            columna[1][k] = columna[1][k]-1;
                                            salto++;
                                            break;
                                        }
                                        }
                                        
                                    }
                                    
                                    if (salto != 0) {
                                        break;
                                    }
                                }
                    
                            }
                            
                        }
                    
                    
                    }
                    
                }
                
                
                
            }
        }
        
    }
    
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemab;

import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 */
public class ProblemaB {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if (0<t && t<1000){
            int casos =0;
        for (int i = 0; i < t; i++) {
            casos++;
            int n=0;
            int k=0;
            int cabeza=0;
            int cola=0;
            ArrayList cartas = new ArrayList();
            
            String cantidad = sc.nextLine();
            String ncant [] = cantidad.split(" ");
            n= Integer.parseInt(ncant[0]);
            k= Integer.parseInt(ncant[1]);
            
            cantidad = sc.nextLine();
            String ncartas [] = cantidad.split(" ");
            
            int [] jugadores = new int [k]; 
            int [] ganadores = new int [k];
            
            if(1<=n && n<= 100000 && 1<=k && k<=100000){
                
                
                for (int j = 0; j < n; j++) {
                    int pi = Integer.parseInt(ncartas[j]);                
                    if(1<=pi && pi<=1000 ){
                        cartas.add(pi);
                        cola++;
                    }
                }
                
                int l = 0;
                    for (int j = 0; j < cartas.size(); j++) {                    
                    
                        int a = (int) cartas.get(cabeza);
                        int z = (int) cartas.get(cola-1);
                        if(a>z){
                           jugadores [l]=a + jugadores [l];
                           cabeza++; 
                        }
                        else if (a<z){
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }else{
                            jugadores [l]=z + jugadores [l];
                            cola--;
                        }
                        l++;
                        if(l==k){
                        l=0;
                        }   
                    }
            }
            k =0;
            n=0;
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]>k){
                    k=jugadores[j];
                }                
            }
            for (int j = 0; j < jugadores.length; j++) {
                if(jugadores[j]==k){
                ganadores[n]= j;
                n++;
                }                
            }
            
            System.out.println("Caso #"+casos+":");
            for (int j = 0; j < n; j++) {
                if(j==(n-1)){
                System.out.print((ganadores[j]+1));
                }else{
                System.out.print((ganadores[j]+1)+" ");
                }
            }
            System.out.println();
            //System.out.println(" "+jugadores[ganadores[0]]);
            
            
            
        }
        }
        // TODO code application logic here
    }
    
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemae;

import java.util.Scanner;

/**
 *
 */
public class ProblemaE {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if(0<t && t<1000){   
            int casos =0;
            for (int i = 0; i < t; i++) {
                casos++;
                System.out.println("Caso #"+casos+":");
                int n = sc.nextInt();
                sc.nextLine();
                int fila = 0;
                
                int [][] columna = new int [2][n];
                
                
                String cubi = sc.nextLine();
                String cubiculos [] = cubi.split(" ");
                
                if(1<=n && n<=1000){                    
                    for (int j = 0; j < cubiculos.length; j++) {
                        int k = Integer.parseInt(cubiculos[j]) ;
                        if(1<=k && k<=1000){
                            columna [0][fila] = k;
                            fila++;                       
                        }                        
                    }
                    String[][] casiller = new String [fila][];
                    for (int j = 0; j < fila ; j++) {
                        
                        casiller [j] = new String [columna[0][j]];                        
                    }    
                    n = sc.nextInt();
                    sc.nextLine();
                    if (1<=n && n<=10000){
                        int[][] entrantes = new int [2][n];
                        for (int j = 0; j < n; j++) {
                            
                            cubi = sc.nextLine();
                            cubiculos = cubi.split(" ");
                            
                            if(cubi.contains("ingresar")){
                                
                                boolean ingreso = true;
                                int id = Integer.parseInt(cubiculos[3]);                                
                                for (int k = 0; k < n; k++) {
                                    if(entrantes[0][k] == id ){                                        
                                        if(entrantes[1][k]>=3){
                                            System.out.println("ingreso denegado");
                                            ingreso = false;
                                        }
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    
                                    }else if(entrantes[0][k]== 0){
                                        entrantes[0][k] = id;
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    }
                                }
                                
                                if(ingreso){
                                double menor = 1;
                                double promedio ;
                                int libre = 0;
                                for (int k = 0; k < fila; k++) {
                                    double date1 =columna[1][k];
                                    double date2 =columna[0][k];
                                    promedio =(date1/date2);
                                   
                                    if (promedio < menor){
                                        menor = promedio;
                                        libre = k;
                                     
                                    }
                                }
                                if(menor==1){
                                    System.out.println("limite alcanzado");                                   
                                }else{               
                                    
                                    for (int h = 0; h < columna[0][libre]; h++) {
                                        
                                        if(casiller[libre][h] == null){
                                   
                                            casiller[libre][h] = cubi;
                                            System.out.println((libre+1)+" "+(h+1));
                                            
                                            columna[1][libre]= columna[1][libre] + 1;
                                            break;
                                        }                                        
                                    }
                                    
                                }           
                                }
                            }else if(cubi.contains("salir")){
                                int salto =0;
                                String cedula = cubiculos[1];
                                for (int k = 0; k < casiller.length; k++) {
                                    
                                    
                                    for (int l = 0; l < casiller[k].length; l++) {
                                        
                                        
                                        if(casiller[k][l]!=null){
                                        if(casiller[k][l].contains(cedula)){
                                            cubiculos = casiller[k][l].split(" ");
                                            System.out.println(cubiculos[1]);
                                            casiller[k][l] = null;
                                            columna[1][k] = columna[1][k]-1;
                                            salto++;
                                            break;
                                        }
                                        }
                                        
                                    }
                                    
                                    if (salto != 0) {
                                        break;
                                    }
                                }
                    
                            }
                            
                        }
                    
                    
                    }
                    
                }
                
                
                
            }
        }
        
    }
    
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemae;

import java.util.Scanner;

/**
 *
 */
public class ProblemaE {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        if(0<t && t<1000){   
            int casos =0;
            for (int i = 0; i < t; i++) {
                casos++;
                System.out.println("Caso #"+casos+":");
                int n = sc.nextInt();
                sc.nextLine();
                int fila = 0;
                
                int [][] columna = new int [2][n];
                
                
                String cubi = sc.nextLine();
                String cubiculos [] = cubi.split(" ");
                
                if(1<=n && n<=1000){                    
                    for (int j = 0; j < cubiculos.length; j++) {
                        int k = Integer.parseInt(cubiculos[j]) ;
                        if(1<=k && k<=1000){
                            columna [0][fila] = k;
                            fila++;                       
                        }                        
                    }
                    String[][] casiller = new String [fila][];
                    for (int j = 0; j < fila ; j++) {
                        
                        casiller [j] = new String [columna[0][j]];                        
                    }    
                    n = sc.nextInt();
                    sc.nextLine();
                    if (1<=n && n<=10000){
                        int[][] entrantes = new int [2][n];
                        for (int j = 0; j < n; j++) {
                            
                            if(sc.hasNextLine()){
                            
                            cubi = sc.nextLine();
                            cubiculos = cubi.split(" ");
                            
                            if(cubi.contains("ingresar")){
                                
                                boolean ingreso = true;
                                int id = Integer.parseInt(cubiculos[3]);                                
                                for (int k = 0; k < n; k++) {
                                    if(entrantes[0][k] == id ){                                        
                                        if(entrantes[1][k]>=3){
                                            System.out.println("ingreso denegado");
                                            ingreso = false;
                                        }
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    
                                    }else if(entrantes[0][k]== 0){
                                        entrantes[0][k] = id;
                                        entrantes[1][k]= entrantes[1][k] + 1;
                                        break;
                                    }
                                }
                                
                                if(ingreso){
                                double menor = 1;
                                double promedio ;
                                int libre = 0;
                                for (int k = 0; k < fila; k++) {
                                    double date1 =columna[1][k];
                                    double date2 =columna[0][k];
                                    promedio =(date1/date2);
                                   
                                    if (promedio < menor){
                                        menor = promedio;
                                        libre = k;
                                     
                                    }
                                }
                                if(menor==1){
                                    System.out.println("limite alcanzado");                                   
                                }else{               
                                    
                                    for (int h = 0; h < columna[0][libre]; h++) {
                                        
                                        if(casiller[libre][h] == null){
                                   
                                            casiller[libre][h] = cubi;
                                            System.out.println((libre+1)+" "+(h+1));
                                            
                                            columna[1][libre]= columna[1][libre] + 1;
                                            break;
                                        }                                        
                                    }
                                    
                                }           
                                }
                            }else if(cubi.contains("salir")){                                
                                String cedula = cubiculos[1];
                                for (int k = 0; k < casiller.length; k++) {
                                    
                                    
                                    for (int l = 0; l < casiller[k].length; l++) {
                                        
                                        
                                        if(casiller[k][l]!=null){
                                        if(casiller[k][l].contains(cedula)){
                                            cubiculos = casiller[k][l].split(" ");
                                            if(cubiculos[3].equals(cedula)) {
                                            System.out.println(cubiculos[1]);
                                            casiller[k][l] = null;
                                            columna[1][k] = columna[1][k]-1;
                                            }
                                            
                                        }
                                        }
                                        
                                    }
                                    
                                    
                                }
                    
                            }
                        }
                            
                        }
                    
                    
                    }
                    
                }
                
                
                
            }
        }
        
    }
    
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico;


import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico {

    /**
     * @param args the command line arguments
     */
    public static class Node {

        int dato;
        Node hijoIzq;
        Node hijoDer;

        public Node() {
            dato = 0;
            hijoIzq = null;
            hijoDer = null;
        }

        public Node(int dato, Node hijoIzq, Node hijoDer) {
            this.dato = dato;
            this.hijoIzq = hijoIzq;
            this.hijoDer = hijoDer;
        }
    }

    public static class ArbolGenealogico {

        Node raiz;

        public ArbolGenealogico() {
            raiz = null;
        }

        public ArbolGenealogico(Node raiz) {
            this.raiz = raiz;
        }

        static Node Insert(Node root, int value) {
            if (root == null) {
                Node nuevo = new Node();
                nuevo.dato = value;
                return nuevo;
            }
            if (value < root.dato) {
                root.hijoIzq = Insert(root.hijoIzq, value);
            }
            if (value > root.dato) {
                root.hijoDer = Insert(root.hijoDer, value);
            }
            return root;
        }

        static String Buscar(Node root, int value, String cadena) {
            if (root == null) {
                return cadena = null;
            }
            if (root.dato == value) {

                return cadena = String.valueOf(root.dato);
            }
            if (value < root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoIzq, value, cadena);
            }
            if (value > root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoDer, value, cadena);
            }
            return cadena;
        }

        public void Ancestro(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    tca1 = tca2;
                } else {
                    tca2 = tca1;
                }
                while (tca2 != 0 || tca1 != 0) {
                    if (cadena11[(tca1 - 1)].equals(cadena22[(tca2 - 1)])) {
                        System.out.print(cadena11[(tca1 - 1)]);
                        break;
                    }
                    tca1--;
                    tca2--;
                }
            }
        }

        public void Distancia(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;
            int index = 0;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    index = tca2;
                } else {
                    index = tca1;
                }
                while (index != 0) {
                    if (cadena11[index - 1].equals(cadena22[index - 1])) {
                        tca1 = tca1 - index;
                        tca2 = tca2 - index;
                        index = tca1 + tca2;
                        System.out.print(index);
                        break;
                    }
                    index--;
                }
            }
        }


    }



public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]));
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }
                }
            }
        }
    }
}


//1
//10
//agregar 50
//agregar 70
//agregar 40
//agregar 35
//agregar 42
//agregar 10
//agregar 36
//agregar 48
//agregar 49
//ancestro 36 49
//distancia 36 49

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico;


import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico {

    /**
     * @param args the command line arguments
     */
    public static class Node {

        int dato;
        Node hijoIzq;
        Node hijoDer;

        public Node() {
            dato = 0;
            hijoIzq = null;
            hijoDer = null;
        }

        public Node(int dato, Node hijoIzq, Node hijoDer) {
            this.dato = dato;
            this.hijoIzq = hijoIzq;
            this.hijoDer = hijoDer;
        }
    }

    public static class ArbolGenealogico {

        Node raiz;

        public ArbolGenealogico() {
            raiz = null;
        }

        public ArbolGenealogico(Node raiz) {
            this.raiz = raiz;
        }

        static Node Insert(Node root, int value) {
            if (root == null) {
                Node nuevo = new Node();
                nuevo.dato = value;
                return nuevo;
            }
            if (value < root.dato) {
                root.hijoIzq = Insert(root.hijoIzq, value);
            }
            if (value > root.dato) {
                root.hijoDer = Insert(root.hijoDer, value);
            }
            return root;
        }

        static String Buscar(Node root, int value, String cadena) {
            if (root == null) {
                return cadena = null;
            }
            if (root.dato == value) {

                return cadena = String.valueOf(root.dato);
            }
            if (value < root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoIzq, value, cadena);
            }
            if (value > root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoDer, value, cadena);
            }
            return cadena;
        }

        public void Ancestro(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    tca1 = tca2;
                } else {
                    tca2 = tca1;
                }
                while (tca2 != 0 || tca1 != 0) {
                    if (cadena11[(tca1 - 1)].equals(cadena22[(tca2 - 1)])) {
                        System.out.print(cadena11[(tca1 - 1)]);
                        break;
                    }
                    tca1--;
                    tca2--;
                }
            }
        }

        public void Distancia(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;
            int index = 0;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    index = tca2;
                } else {
                    index = tca1;
                }
                while (index != 0) {
                    if (cadena11[index - 1].equals(cadena22[index - 1])) {
                        tca1 = tca1 - index;
                        tca2 = tca2 - index;
                        index = tca1 + tca2;
                        System.out.print(index);
                        break;
                    }
                    index--;
                }
            }
        }


    }



public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]));
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }
                }
            }
        }
    }
}


//1
//10
//agregar 50
//agregar 70
//agregar 40
//agregar 35
//agregar 42
//agregar 10
//agregar 36
//agregar 48
//agregar 49
//ancestro 36 49
//distancia 36 49

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maximoproductoi;

import java.util.Arrays;
import java.util.Scanner;

/**
 *
 */
public class MaximoProductoi {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cantidad = sc.nextInt();
        sc.nextLine();
        if (0 < cantidad && cantidad < 100000) {
            String entrada = sc.nextLine();
            String[] numeros = entrada.split(" ");
            int value;
            int producto[] = new int[3];
            for (int i = 0; i < cantidad; i++) {
                value = Integer.parseInt(numeros[i]);
                if (0 <= value && value <= 1000000) {
                    if (i < 3) {
                        producto[i] = value;
                    } else {
                        for (int j = 0; j < 3; j++) {
                            if (value > producto[j]) {
                                producto[j] = value;
                                break;
                            }
                        }
                    }
                    if (i > 1) {
                        Arrays.sort(producto);
                        if (i<cantidad-1) {
                           System.out.println(producto[0] * producto[1] * producto[2]); 
                        }else{
                            System.out.print(producto[0] * producto[1] * producto[2]);
                        }
                        
                    } else {
                        if (i<cantidad-1) {
                           System.out.println("-1");
                        }else{
                            System.out.print("-1");
                        }
                        
                    }
                }
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package resultadosjuez;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 *
 */
public class ResultadosJuez {

    /**
     * @param args the command line arguments
     */
    public static class Equipo implements Comparable<Equipo> {

        int id;
        int ejercicios;
        int tiempo;

        public Equipo(int id, int ejercicios, int tiempo) {
            this.id = id;
            this.ejercicios = ejercicios;
            this.tiempo = tiempo;
        }

        @Override
        public String toString() {
            return id + " " + ejercicios + " " + tiempo;
        }

        @Override
        public int compareTo(Equipo o) {
            if (ejercicios < o.ejercicios) {
                return -1;
            }
            if (ejercicios > o.ejercicios) {
                return 1;
            }
            if (ejercicios == o.ejercicios) {
                if (tiempo < o.tiempo) {
                    return 1;
                }
                if (tiempo > o.tiempo) {
                    return -1;
                }
                if (ejercicios == o.ejercicios) {
                    if (id < o.id) {
                        return 1;
                    }
                    if (id > o.id) {
                        return -1;
                    }
                }
            }
            return 0;
        }

    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        if (0 < casos && casos < 1000000) {
            for (int i = 0; i < casos; i++) {
                String entradasNK = sc.nextLine();
                String[] realizados = entradasNK.split(" ");
                int equipos = Integer.parseInt(realizados[0]);
                int envios = Integer.parseInt(realizados[1]);

                Map< String, Integer> penalidad = new HashMap<String, Integer>();
                int[][] participantes = new int[2][equipos];

                if (1 <= equipos && 1 <= envios && equipos <= 1000000 && envios <= 1000000) {
                    for (int j = 0; j < envios; j++) {
                        String entrada = sc.nextLine();
                        String[] argumentos = entrada.split(" ");
                        int concursante = Integer.parseInt(argumentos[0]);
                        int problema = Integer.parseInt(argumentos[1]);
                        int tiempo = Integer.parseInt(argumentos[2]);
                        int aux;
                        if (1 <= concursante && 1 <= problema && 1 <= tiempo
                                && concursante <= equipos && problema <= 100000 && tiempo <= 1000) {
                            entrada = argumentos[0] + "0" + argumentos[1];
                            if (!penalidad.containsKey(entrada)) {
                                if (argumentos[3].contains("C")) {
                                    participantes[0][concursante - 1] = participantes[0][concursante - 1] + 1;
                                    participantes[1][concursante - 1] = participantes[1][concursante - 1] + tiempo;
                                } else if (!argumentos[3].equals("C")) {
                                    penalidad.put(entrada, 20);
                                }
                            } else {
                                if (argumentos[3].contains("C")) {
                                    aux = penalidad.get(entrada);
                                    aux = aux + tiempo;
                                    penalidad.remove(entrada);

                                    participantes[0][concursante - 1] = participantes[0][concursante - 1] + 1;
                                    participantes[1][concursante - 1] = participantes[1][concursante - 1] + aux;

                                } else if (!argumentos[3].equals("C")) {
                                    aux = penalidad.get(entrada);
                                    aux = aux + 20;
                                    penalidad.remove(entrada);
                                    penalidad.put(entrada, aux);
                                }
                            }

                        }
                    }
                    Equipo[] posicion = new Equipo[equipos];

                    for (int j = 0; j < equipos; j++) {
                        posicion[j] = new Equipo((j + 1), participantes[0][j], participantes[1][j]);
                    }
                    Arrays.sort(posicion);

                    System.out.println("Caso #" + (i + 1) + ":");
                    for (int j = equipos; 0 < j; j--) {

                        if (i == casos - 1 && 0 == j - 1) {
                            System.out.print(posicion[j - 1]);
                        } else {
                            System.out.println(posicion[j - 1]);
                        }
                    }

                }
            }
        }
    }
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico_hijos;

import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico_hijos {

    /**
     * @param args the command line arguments
     */
    public static class Node {
        int dato;
        Node hijoIzq;
        Node hijoDer;
        public Node() {
            dato = 0;
            hijoIzq = null;
            hijoDer = null;
        }
        public Node(int dato, Node hijoIzq, Node hijoDer) {
            this.dato = dato;
            this.hijoIzq = hijoIzq;
            this.hijoDer = hijoDer;
        }
    }

    public static class ArbolGenealogico {

        Node raiz;

        public ArbolGenealogico() {
            raiz = null;
        }

        public ArbolGenealogico(Node raiz) {
            this.raiz = raiz;
        }

        static Node Insert(Node root, int value) {
            if (root == null) {
                Node nuevo = new Node();
                nuevo.dato = value;
                return nuevo;
            }
            if (value < root.dato) {
                root.hijoIzq = Insert(root.hijoIzq, value);
            }
            if (value > root.dato) {
                root.hijoDer = Insert(root.hijoDer, value);
            }
            return root;
        }

        static String Buscar(Node root, int value, String cadena) {
            if (root == null) {
                return cadena = null;
            }
            if (root.dato == value) {

                return cadena = String.valueOf(root.dato);
            }
            if (value < root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoIzq, value, cadena);
            }
            if (value > root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoDer, value, cadena);
            }
            return cadena;
        }

        public void Ancestro(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    tca1 = tca2;
                } else {
                    tca2 = tca1;
                }
                while (tca2 != 0 || tca1 != 0) {
                    if (cadena11[(tca1 - 1)].equals(cadena22[(tca2 - 1)])) {
                        System.out.print(cadena11[(tca1 - 1)]);
                        break;
                    }
                    tca1--;
                    tca2--;
                }
            }
        }

        public void Distancia(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;
            int index = 0;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    index = tca2;
                } else {
                    index = tca1;
                }
                while (index != 0) {
                    if (cadena11[index - 1].equals(cadena22[index - 1])) {
                        tca1 = tca1 - index;
                        tca2 = tca2 - index;
                        index = tca1 + tca2;
                        System.out.print(index);
                        break;
                    }
                    index--;
                }
            }
        }

        public Node encontrarNodo(Node root, int dato) {
            if (root == null) {
                return null;
            }
            if (root.dato == dato) {
                return root;
            }
            if (root.dato > dato) {
                root = encontrarNodo(root.hijoIzq, dato);
            } else {
                root = encontrarNodo(root.hijoDer, dato);
            }
            return root;
        }
        int hh =0;
        public void postorden(Node root, int num) {
            if (root != null ) {                
                postorden(root.hijoIzq,num);                
                postorden(root.hijoDer,num);
                hh++;
            }
        }

        public void calcularHijos(int value) {
            Node primero = encontrarNodo(raiz, value);
            hh = 0;
            postorden(primero,value);
            if (primero == null) {
                System.out.print("-1");
            } else {
                hh--;
                System.out.print(hh);
            }
        }

    }



public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]));
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }else if (comando.startsWith("contar")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("contar: ");
                        arbol.calcularHijos(Integer.parseInt(entradas[1]));
                    }
                }
            }
        }
    }
}
//2
//12
//agregar 10
//agregar 20
//agregar 5
//agregar 3
//distancia 3 20
//ancestro 3 20
//agregar 8
//ancestro 3 8
//distancia 8 3
//distancia 5 11
//ancestro 20 10
//ancestro 5 5
//14
//agregar 10
//agregar 20
//agregar 5
//agregar 3
//distancia 3 20
//ancestro 3 20
//agregar 8
//ancestro 3 8
//distancia 8 3
//distancia 5 11
//ancestro 20 10
//ancestro 5 5
//contar 10
//contar 8
<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package donkingkong;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Scanner;

/**
 *
 */
public class DonKingKong {

    /**
     * @param args the command line arguments
     */
    private static ArrayList<String[]> ramas;

    public static class Node {

        int dato;
        int posHijoMasIzquierdo;
        int posHijoMasDerecho;

        public Node(int dato) {
            this.dato = dato;
            posHijoMasIzquierdo = -1;
            posHijoMasDerecho = -1;
        }
    }

    public static class Arbol {

        public Node[] nodos;
        private int posVacia;
        private int posHijo;

        public Arbol( int size) {
            nodos = new Node[size];
            posVacia = 0;
            posHijo = 1;
            ramas = new ArrayList<>();
        }

        public void insertar( String line) {
             String[] lineaPadreHijos = line.split(" ");
            if (nodos[0] == null) {
                for (int i = 0; i < lineaPadreHijos.length; ++i) {
                    nodos[i] = new Node(Integer.parseInt(lineaPadreHijos[i]));
                }
                nodos[0].posHijoMasIzquierdo = 1;
                nodos[0].posHijoMasDerecho = lineaPadreHijos.length - 1;
                posVacia = lineaPadreHijos.length;
            } else {
                if (Integer.parseInt(lineaPadreHijos[0]) == nodos[posHijo].dato) {
                    if (lineaPadreHijos.length > 1) {
                        int cnt = 1;
                        nodos[posHijo].posHijoMasIzquierdo = posVacia;
                        for (int i = posVacia; i < nodos.length; ++i) {
                            nodos[i] = new Node(Integer.parseInt(lineaPadreHijos[cnt++]));
                            if (cnt == lineaPadreHijos.length) {
                                posVacia = i + 1;
                                break;
                            }
                        }
                        nodos[posHijo].posHijoMasDerecho = posVacia - 1;
                        ++posHijo;
                    }
                } else {
                    if (lineaPadreHijos.length > 1) {
                        ramas.add(lineaPadreHijos);
                    }
                }
            }
        }

        public void rellenarArbol() {
            for (int i = 1; i < nodos.length; ++i) {
                for (String[] d : ramas) {
                    if (Integer.parseInt(d[0]) == nodos[i].dato) {
                        int cnt = 1;
                        nodos[i].posHijoMasIzquierdo = posVacia;
                        for (int k = posVacia; k < nodos.length; ++k) {
                            nodos[k] = new Node(Integer.parseInt(d[cnt++]));
                            if (cnt == d.length) {
                                posVacia = k + 1;
                                break;
                            }
                        }
                        nodos[i].posHijoMasDerecho = posVacia - 1;
                        break;
                    }
                }
                if (posVacia >= nodos.length) {
                    break;
                }
            }
        }
    }

    static void barrilCamino( Arbol arbol) {
         Deque<Node> lvOrdRight = new ArrayDeque<>();
         Deque<Node> lvOrdLeft = new ArrayDeque<>();
        boolean flag = false;
        int cnt = 0;
        int index = 0;
        int limite = arbol.nodos.length;
        int[] camino = new int[limite];
        limite = limite - 1;
        camino[index] = arbol.nodos[0].dato;
        index++;
        lvOrdLeft.addLast(arbol.nodos[0]);
        while (true) {
            while (!lvOrdLeft.isEmpty() && !flag) {
                Node aux = lvOrdLeft.removeLast();
                if (aux.posHijoMasDerecho != -1 && aux.posHijoMasIzquierdo != -1) {
                    for (int i = aux.posHijoMasDerecho; i >= aux.posHijoMasIzquierdo; --i) {
                    camino[index] = arbol.nodos[i].dato;
                    index++;
                    ++cnt;
                    if (cnt == limite) {
                        flag = true;
                        break;
                    }
                    lvOrdRight.addLast(arbol.nodos[i]);
                }
                }
                

            }
            while (!lvOrdRight.isEmpty() && !flag) {
                Node aux = lvOrdRight.removeLast();
                if (aux.posHijoMasDerecho != -1 && aux.posHijoMasIzquierdo != -1) {
                    for (int i = aux.posHijoMasIzquierdo; i <= aux.posHijoMasDerecho; ++i) {
                    camino[index] = arbol.nodos[i].dato;
                    index++;
                    ++cnt;
                    if (cnt == limite) {
                        flag = true;
                        break;
                    }
                    lvOrdLeft.addLast(arbol.nodos[i]);
                }
                }
                
            }
            if (flag) {
                break;
            }
        }
        for (int i = 0; i < camino.length; i++) {
            if ((i == limite)) {
                System.out.print(camino[i]);
            } else {
                System.out.print(camino[i] + " ");
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < casos; i++) {
            int numNodos = sc.nextInt();
            sc.nextLine();
            if(0 < numNodos && numNodos < 10000){
            Arbol arbol = new Arbol(numNodos);
            while ((numNodos--) > 0) {
                arbol.insertar(sc.nextLine());
            }
            if (arbol.posVacia < arbol.nodos.length) {
                arbol.rellenarArbol();
            }
            if (i == 0) {
                System.out.println("Caso #" + (i + 1) + ":");
            } else {
                System.out.println("\nCaso #" + (i + 1) + ":");
            }
            barrilCamino(arbol);
            }
        }
    }

}



<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package corte_arboles;

import java.util.Scanner;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Collections;
import java.util.Deque;
import java.util.Stack;

/**
 *
 */
public class Corte_arboles {

    /**
     * @param args the command line arguments
     */
    public static class Nodo {

        int llave;
        int dato;
        int[] posHijos;
        int indice;

        public Nodo(int dato) {
            this.dato = dato;
            posHijos = new int[2];
            indice = 0;
            llave = 0;
        }
    }

    public static class Arbol {

        public Nodo[] nodos;
        int cnt;

        public Arbol(int size) {
            nodos = new Nodo[size];
            cnt = 1;
        }

        public void insertar(String cadena) {
            if (nodos[0] == null) {
                Scanner aux = new Scanner(cadena);
                nodos[0] = new Nodo(aux.nextInt());
                nodos[0].posHijos[nodos[0].indice++] = cnt;
                nodos[1] = new Nodo(aux.nextInt());
                ++cnt;
            } else {
                Scanner aux = new Scanner(cadena);
                int padre = aux.nextInt();
                for (int i = 0; i < nodos.length; ++i) {
                    if (padre == nodos[i].dato) {
                        nodos[i].posHijos[nodos[i].indice++] = cnt;
                        break;
                    }
                }
                nodos[cnt++] = new Nodo(aux.nextInt());
            }
        }

        public void asignarLlave(int llave) {
            for (int i = 0; i < nodos.length; ++i) {
                if (nodos[i].dato == cnt) {
                    ++cnt;
                    nodos[i].llave = llave;
                    break;
                }
            }
        }

        
        public void calcularCorte() {
            Nodo raiz;
            Stack<Integer> pila = new Stack<>();
            int cnt = 0;
            while (cnt < nodos.length - 1) {
                raiz = nodos[cnt++];
                if (raiz.posHijos[1] == 0 && raiz.posHijos[0] != 0) {
                    Nodo raizN = nodos[raiz.posHijos[0]];
                    pila.push(realizarCalculo(raizN, raiz.posHijos[0]));
                } else {
                    Nodo raizN = nodos[raiz.posHijos[0]];
                    pila.push(realizarCalculo(raizN, raiz.posHijos[0]));
                    Nodo raizM = nodos[raiz.posHijos[1]];
                    pila.push(realizarCalculo(raizM, raiz.posHijos[1]));
                }
            }
            System.out.print(Collections.min(pila));

        }

        public int realizarCalculo(Nodo root, int posRoot) {
            int cnt1 = 0;
            int cnt2 = 0;
            int[] arr = new int[nodos.length];
            int cnt = 1;
            arr[0] = posRoot;
            Deque<Nodo> cola = new ArrayDeque<>();
            cola.addLast(root);
            while (!cola.isEmpty()) {
                Nodo suerte = cola.removeFirst();
                if (suerte.posHijos[0] != 0 && suerte.posHijos[1] == 0) {
                    arr[cnt++] = suerte.posHijos[0];
                    cola.addLast(nodos[suerte.posHijos[0]]);
                } else if (suerte.posHijos[0] != 0) {
                    arr[cnt++] = suerte.posHijos[0];
                    cola.addLast(nodos[suerte.posHijos[0]]);
                    arr[cnt++] = suerte.posHijos[1];
                    cola.addLast(nodos[suerte.posHijos[1]]);
                }
            }
            boolean flag;
            for (int i = 0; i < nodos.length; ++i) {
                flag = false;
                for (int j = 0; j < arr.length; ++j) {
                    if (arr[j] != 0) {
                        if (i == arr[j]) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {
                    cnt1 += nodos[i].llave;
                } else {
                    cnt2 += nodos[i].llave;
                }
            }
            return Math.abs(cnt1 - cnt2);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < casos; i++) {
            int numNodos = sc.nextInt();
            sc.nextLine();
            if(2 < numNodos && numNodos < 100000){
            Arbol arbol = new Arbol(numNodos);
            Scanner ints = new Scanner(sc.nextLine());
            while ((numNodos--) > 1) {
                arbol.insertar(sc.nextLine());
            }
            arbol.cnt = 1;
            while (ints.hasNextInt()) {
                arbol.asignarLlave(ints.nextInt());
            }
            if (i == 0) {
                System.out.println("Caso #" + (i + 1) + ":");
            } else {
                System.out.println("\nCaso #" + (i + 1) + ":");
            }
            arbol.calcularCorte();
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico;


import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico {

    /**
     * @param args the command line arguments
     */
    public static class Node {

        int dato;
        Node hijoIzq;
        Node hijoDer;

        public Node() {
            dato = 0;
            hijoIzq = null;
            hijoDer = null;
        }

        public Node(int dato, Node hijoIzq, Node hijoDer) {
            this.dato = dato;
            this.hijoIzq = hijoIzq;
            this.hijoDer = hijoDer;
        }
    }

    public static class ArbolGenealogico {

        Node raiz;

        public ArbolGenealogico() {
            raiz = null;
        }

        public ArbolGenealogico(Node raiz) {
            this.raiz = raiz;
        }

        static Node Insert(Node root, int value) {
            if (root == null) {
                Node nuevo = new Node();
                nuevo.dato = value;
                return nuevo;
            }
            if (value < root.dato) {
                root.hijoIzq = Insert(root.hijoIzq, value);
            }
            if (value > root.dato) {
                root.hijoDer = Insert(root.hijoDer, value);
            }
            return root;
        }

        static String Buscar(Node root, int value, String cadena) {
            if (root == null) {
                return cadena = "null";
            }
            if (root.dato == value) {

                return cadena = String.valueOf(root.dato);
            }
            if (value < root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoIzq, value, cadena);
            }
            if (value > root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoDer, value, cadena);
            }
            return cadena;
        }

        public void Ancestro(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    tca1 = tca2;
                } else {
                    tca2 = tca1;
                }
                while (tca2 != 0 || tca1 != 0) {
                    if (cadena11[(tca1 - 1)].equals(cadena22[(tca2 - 1)])) {
                        System.out.print(cadena11[(tca1 - 1)]);
                        break;
                    }
                    tca1--;
                    tca2--;
                }
            }
        }

        public void Distancia(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, "");
            String[] cadena11 = cadena1.split("");
            String cadena2 = Buscar(raiz, fin, "");
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;
            int index = 0;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    index = tca2;
                } else {
                    index = tca1;
                }
                while (index != 0) {
                    if (cadena11[index - 1].equals(cadena22[index - 1])) {
                        tca1 = tca1 - index;
                        tca2 = tca2 - index;
                        index = tca1 + tca2;
                        System.out.print(index);
                        break;
                    }
                    index--;
                }
            }
        }


    }



public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]));
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }
                }
            }
        }
    }
}



<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico_hijos;

import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico_hijos {

    /**
     * @param args the command line arguments
     */
    public static class Node {
        int dato;
        Node hijoIzq;
        Node hijoDer;
        public Node() {
            dato = 0;
            hijoIzq = null;
            hijoDer = null;
        }
        public Node(int dato, Node hijoIzq, Node hijoDer) {
            this.dato = dato;
            this.hijoIzq = hijoIzq;
            this.hijoDer = hijoDer;
        }
    }

    public static class ArbolGenealogico {

        Node raiz;

        public ArbolGenealogico() {
            raiz = null;
        }

        public ArbolGenealogico(Node raiz) {
            this.raiz = raiz;
        }

        static Node Insert(Node root, int value) {
            if (root == null) {
                Node nuevo = new Node();
                nuevo.dato = value;
                return nuevo;
            }
            if (value < root.dato) {
                root.hijoIzq = Insert(root.hijoIzq, value);
            }
            if (value > root.dato) {
                root.hijoDer = Insert(root.hijoDer, value);
            }
            return root;
        }

        static String Buscar(Node root, int value, String cadena) {
            if (root == null) {
                return cadena = "null";
            }
            if (root.dato == value) {

                return cadena = String.valueOf(root.dato);
            }
            if (value < root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoIzq, value, cadena);
            }
            if (value > root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoDer, value, cadena);
            }
            return cadena;
        }

        public void Ancestro(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, "");
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, "");
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    tca1 = tca2;
                } else {
                    tca2 = tca1;
                }
                while (tca2 != 0 || tca1 != 0) {
                    if (cadena11[(tca1 - 1)].equals(cadena22[(tca2 - 1)])) {
                        System.out.print(cadena11[(tca1 - 1)]);
                        break;
                    }
                    tca1--;
                    tca2--;
                }
            }
        }

        public void Distancia(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;
            int index = 0;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    index = tca2;
                } else {
                    index = tca1;
                }
                while (index != 0) {
                    if (cadena11[index - 1].equals(cadena22[index - 1])) {
                        tca1 = tca1 - index;
                        tca2 = tca2 - index;
                        index = tca1 + tca2;
                        System.out.print(index);
                        break;
                    }
                    index--;
                }
            }
        }

        public Node encontrarNodo(Node root, int dato) {
            if (root == null) {
                return null;
            }
            if (root.dato == dato) {
                return root;
            }
            if (root.dato > dato) {
                root = encontrarNodo(root.hijoIzq, dato);
            } else {
                root = encontrarNodo(root.hijoDer, dato);
            }
            return root;
        }
        int hh =0;
        public void postorden(Node root, int num) {
            if (root != null ) {                
                postorden(root.hijoIzq,num);                
                postorden(root.hijoDer,num);
                hh++;
            }
        }

        public void calcularHijos(int value) {
            Node primero = encontrarNodo(raiz, value);
            hh = 0;
            postorden(primero,value);
            if (primero == null) {
                System.out.print("-1");
            } else {
                hh--;
                System.out.print(hh);
            }
        }

    }



public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]));
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }else if (comando.startsWith("contar")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("contar: ");
                        arbol.calcularHijos(Integer.parseInt(entradas[1]));
                    }
                }
            }
        }
    }
}
//2
//12
//agregar 10
//agregar 20
//agregar 5
//agregar 3
//distancia 3 20
//ancestro 3 20
//agregar 8
//ancestro 3 8
//distancia 8 3
//distancia 5 11
//ancestro 20 10
//ancestro 5 5
//14
//agregar 10
//agregar 20
//agregar 5
//agregar 3
//distancia 3 20
//ancestro 3 20
//agregar 8
//ancestro 3 8
//distancia 8 3
//distancia 5 11
//ancestro 20 10
//ancestro 5 5
//contar 10
//contar 8
<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico_hijos;

import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico_hijos {

    /**
     * @param args the command line arguments
     */
    public static class Node {
        int dato;
        Node hijoIzq;
        Node hijoDer;
        public Node() {
            dato = 0;
            hijoIzq = null;
            hijoDer = null;
        }
        public Node(int dato, Node hijoIzq, Node hijoDer) {
            this.dato = dato;
            this.hijoIzq = hijoIzq;
            this.hijoDer = hijoDer;
        }
    }

    public static class ArbolGenealogico {

        Node raiz;

        public ArbolGenealogico() {
            raiz = null;
        }

        public ArbolGenealogico(Node raiz) {
            this.raiz = raiz;
        }

        static Node Insert(Node root, int value) {
            if (root == null) {
                Node nuevo = new Node();
                nuevo.dato = value;
                return nuevo;
            }
            if (value < root.dato) {
                root.hijoIzq = Insert(root.hijoIzq, value);
            }
            if (value > root.dato) {
                root.hijoDer = Insert(root.hijoDer, value);
            }
            return root;
        }

        static String Buscar(Node root, int value, String cadena) {
            if (root == null) {
                return cadena = "null";
            }
            if (root.dato == value) {

                return cadena = String.valueOf(root.dato);
            }
            if (value < root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoIzq, value, cadena);
            }
            if (value > root.dato) {
                return cadena = String.valueOf(root.dato) + " " + Buscar(root.hijoDer, value, cadena);
            }
            return cadena;
        }

        public void Ancestro(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, "");
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, "");
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    tca1 = tca2;
                } else {
                    tca2 = tca1;
                }
                while (tca2 != 0 || tca1 != 0) {
                    if (cadena11[(tca1 - 1)].equals(cadena22[(tca2 - 1)])) {
                        System.out.print(cadena11[(tca1 - 1)]);
                        break;
                    }
                    tca1--;
                    tca2--;
                }
            }
        }

        public void Distancia(int inicio, int fin) {
            String cadena1 = Buscar(raiz, inicio, null);
            String[] cadena11 = cadena1.split(" ");
            String cadena2 = Buscar(raiz, fin, null);
            String[] cadena22 = cadena2.split(" ");
            int tca1 = cadena11.length;
            int tca2 = cadena22.length;
            int index = 0;

            if (cadena11[(tca1 - 1)].equals("null") || cadena22[(tca2 - 1)].equals("null")) {
                System.out.print(-1);
            } else {
                if (tca1 > tca2) {
                    index = tca2;
                } else {
                    index = tca1;
                }
                while (index != 0) {
                    if (cadena11[index - 1].equals(cadena22[index - 1])) {
                        tca1 = tca1 - index;
                        tca2 = tca2 - index;
                        index = tca1 + tca2;
                        System.out.print(index);
                        break;
                    }
                    index--;
                }
            }
        }

        public Node encontrarNodo(Node root, int dato) {
            if (root == null) {
                return null;
            }
            if (root.dato == dato) {
                return root;
            }
            if (root.dato > dato) {
                root = encontrarNodo(root.hijoIzq, dato);
            } else {
                root = encontrarNodo(root.hijoDer, dato);
            }
            return root;
        }
        int hh =0;
        public void postorden(Node root, int num) {
            if (root != null ) {                
                postorden(root.hijoIzq,num);                
                postorden(root.hijoDer,num);
                hh++;
            }
        }

        public void calcularHijos(int value) {
            Node primero = encontrarNodo(raiz, value);
            hh = 0;
            postorden(primero,value);
            if (primero == null) {
                System.out.print("-1");
            } else {
                hh= hh -1;
                System.out.print(hh);
            }
        }

    }



public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]));
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }else if (comando.startsWith("contar")) {
                        entradas = comando.split(" ");
                        if (j<q && j != 0) {
                            System.out.println();
                        }
                        System.out.print("contar: ");
                        arbol.calcularHijos(Integer.parseInt(entradas[1]));
                    }
                }
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maximoproductoi;

import java.util.Arrays;
import java.util.Scanner;

/**
 *
 */
public class MaximoProductoi {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cantidad = sc.nextInt();
        sc.nextLine();
        if (0 < cantidad && cantidad <= 100000) {
            String entrada = sc.nextLine();
            String[] numeros = entrada.split(" ");
            int value;
            int producto[] = new int[3];
            for (int i = 0; i < cantidad; i++) {
                value = Integer.parseInt(numeros[i]);
                if (0 <= value && value <= 1000000) {
                    if (i < 3) {
                        producto[i] = value;
                    } else {
                        for (int j = 0; j < 3; j++) {
                            if (value > producto[j]) {
                                producto[j] = value;
                                break;
                            }
                        }
                    }
                    if (i > 1) {
                        Arrays.sort(producto);
                        if (i<cantidad-1) {
                           System.out.println(producto[0] * producto[1] * producto[2]); 
                        }else{
                            System.out.print(producto[0] * producto[1] * producto[2]);
                        }
                        
                    } else {
                        if (i<cantidad-1) {
                           System.out.println("-1");
                        }else{
                            System.out.print("-1");
                        }                        
                    }
                }
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico;


import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico {

    /**
     * @param args the command line arguments
     */
public static class Node{
        int dato;
        Node hijoIzquierdo,hijoDerecho,padre;
        public Node( int d, Node padre){
            dato = d;
            hijoIzquierdo = hijoDerecho = null;
            this.padre = padre;
        }
    }
    public static class ArbolGenealogico{
        Node raiz;
        public ArbolGenealogico(){
            raiz = null;
        }
        public boolean estaVacio(){
            return raiz == null;
        }
       Node Insert( Node root, int value, Node padre){
            Node aux = root;
            if(root == null){
                Node nuevo = new Node(value,padre);
                return nuevo;
            }
            if(root.dato > value){
                aux = Insert(root.hijoIzquierdo,value,aux);
                root.hijoIzquierdo= aux;
            }else{
                aux = Insert(root.hijoDerecho,value,aux);
                root.hijoDerecho = aux;
            }
            return root;
       }
       public Node Buscar( Node root, int dato){
           Node aux = root;
           if(root == null)
               return null;
           if(root.dato == dato)
               return root;
           if(root.dato > dato)
               aux = Buscar(root.hijoIzquierdo,dato);
           else
               aux = Buscar(root.hijoDerecho,dato);
           return aux;
       }
       public void Ancestro( int inicio, int fin){
           Node primero = Buscar(raiz,inicio);
           Node segundo = Buscar(raiz,fin);
           if(primero == null || segundo == null){
               System.out.print("-1");
           }else{
                Node auxSegundo = segundo;
                boolean flag = false;
                while(primero != null && !flag){
                    Node ramita = primero;
                    segundo = auxSegundo;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            System.out.print(ramita.dato);
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                    }
                    primero = primero.padre;
                }    
           }
       }
       public void Distancia( int inicio, int fin){
           Node primero = Buscar(raiz,inicio);
           Node segundo = Buscar(raiz,fin);
           if(primero == null || segundo == null)
               System.out.print("-1");
          else{
                Node auxSegundo = segundo;
                int cnt1 = 0;
                int cnt2 = 0;
                boolean flag = false;
                while(primero != null && !flag){
                    Node ramita = primero;
                    segundo = auxSegundo;
                    cnt2 = 0;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                        ++cnt2;
                    }
                    primero = primero.padre;
                    ++cnt1;
                }
                System.out.print((--cnt1)+cnt2);         
           }
       }
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]),null);
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }
                }
            }
        }
    }
}



<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico;


import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico {

    /**
     * @param args the command line arguments
     */
public static class Node{
        int dato;
        Node hijoIzquierdo,hijoDerecho,padre;
        public Node( int d, Node padre){
            dato = d;
            hijoIzquierdo = hijoDerecho = null;
            this.padre = padre;
        }
    }
    public static class ArbolGenealogico{
        Node raiz;
        public ArbolGenealogico(){
            raiz = null;
        }
        public boolean estaVacio(){
            return raiz == null;
        }
       Node Insert( Node root, int value, Node padre){
            Node aux = root;
            if(root == null){
                Node nuevo = new Node(value,padre);
                return nuevo;
            }
            if(root.dato > value){
                aux = Insert(root.hijoIzquierdo,value,aux);
                root.hijoIzquierdo= aux;
            }else{
                aux = Insert(root.hijoDerecho,value,aux);
                root.hijoDerecho = aux;
            }
            return root;
       }
       public Node Buscar( Node root, int dato){
           Node aux = root;
           if(root == null)
               return null;
           if(root.dato == dato)
               return root;
           if(root.dato > dato)
               aux = Buscar(root.hijoIzquierdo,dato);
           else
               aux = Buscar(root.hijoDerecho,dato);
           return aux;
       }
       public void Ancestro( int inicio, int fin){
           Node primero = Buscar(raiz,inicio);
           Node segundo = Buscar(raiz,fin);
           if(primero == null || segundo == null){
               System.out.print("-1");
           }else{
                Node auxSegundo = segundo;
                boolean flag = false;
                while(primero != null && !flag){
                    Node ramita = primero;
                    segundo = auxSegundo;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            System.out.print(ramita.dato);
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                    }
                    primero = primero.padre;
                }    
           }
       }
       public void Distancia( int inicio, int fin){
           Node primero = Buscar(raiz,inicio);
           Node segundo = Buscar(raiz,fin);
           if(primero == null || segundo == null)
               System.out.print("-1");
          else{
                Node auxSegundo = segundo;
                int cnt1 = 0;
                int cnt2 = 0;
                boolean flag = false;
                while(primero != null && !flag){
                    Node ramita = primero;
                    segundo = auxSegundo;
                    cnt2 = 0;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                        ++cnt2;
                    }
                    primero = primero.padre;
                    ++cnt1;
                }
                System.out.print((--cnt1)+cnt2);         
           }
       }
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]),null);
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }
                }
            }
        }
    }
}



<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico;


import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico {

    /**
     * @param args the command line arguments
     */
public static class Node{
        int dato;
        Node hijoIzquierdo,hijoDerecho,padre;
        public Node( int d, Node padre){
            dato = d;
            hijoIzquierdo = hijoDerecho = null;
            this.padre = padre;
        }
    }
    public static class ArbolGenealogico{
        Node raiz;
        public ArbolGenealogico(){
            raiz = null;
        }
        public boolean estaVacio(){
            return raiz == null;
        }
       Node Insert( Node root, int value, Node padre){
            Node aux = root;
            if(root == null){
                Node nuevo = new Node(value,padre);
                return nuevo;
            }
            if(root.dato > value){
                aux = Insert(root.hijoIzquierdo,value,aux);
                root.hijoIzquierdo= aux;
            }else{
                aux = Insert(root.hijoDerecho,value,aux);
                root.hijoDerecho = aux;
            }
            return root;
       }
       public Node Buscar( Node root, int dato){
           Node aux = root;
           if(root == null)
               return null;
           if(root.dato == dato)
               return root;
           if(root.dato > dato)
               aux = Buscar(root.hijoIzquierdo,dato);
           else
               aux = Buscar(root.hijoDerecho,dato);
           return aux;
       }
       public void Ancestro( int inicio, int fin){
           Node primero = Buscar(raiz,inicio);
           Node segundo = Buscar(raiz,fin);
           if(primero == null || segundo == null){
               System.out.print("-1");
           }else{
                Node auxSegundo = segundo;
                boolean flag = false;
                while(primero != null && !flag){
                    Node ramita = primero;
                    segundo = auxSegundo;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            System.out.print(ramita.dato);
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                    }
                    primero = primero.padre;
                }    
           }
       }
       public void Distancia( int inicio, int fin){
           Node primero = Buscar(raiz,inicio);
           Node segundo = Buscar(raiz,fin);
           if(primero == null || segundo == null)
               System.out.print("-1");
          else{
                Node auxSegundo = segundo;
                int cnt1 = 0;
                int cnt2 = 0;
                boolean flag = false;
                while(primero != null && !flag){
                    Node ramita = primero;
                    segundo = auxSegundo;
                    cnt2 = 0;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                        ++cnt2;
                    }
                    primero = primero.padre;
                    ++cnt1;
                }
                System.out.print((--cnt1)+cnt2);         
           }
       }
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if(i == 0){
                    System.out.print("Caso #"+(i+1)+":");
                }else{
                    System.out.print("\nCaso #"+(i+1)+":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(entradas[1]),null);
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("distancia: ");
                        arbol.Distancia(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        if (j<q) {
                            System.out.println();
                        }
                        System.out.print("ancestro: ");
                        arbol.Ancestro(Integer.parseInt(entradas[1]),Integer.parseInt(entradas[2]));
                    }
                }
            }
        }
    }
}



<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arbol_genealogico_hijos;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Scanner;

/**
 *
 */
public class Arbol_genealogico_hijos {

    /**
     * @param args the command line arguments
     */
    public static class Node {

        int dato;
        Node hijoIzquierdo, hijoDerecho, padre;

        public Node(int d, Node padre) {
            dato = d;
            hijoIzquierdo = hijoDerecho = null;
            this.padre = padre;
        }
    }

    public static class ArbolGenealogico {

        Node raiz;

        public ArbolGenealogico() {
            raiz = null;
        }

        public boolean estaVacio() {
            return raiz == null;
        }

        Node Insert(Node root, int value, Node padre) {
            Node aux = root;
            if (root == null) {
                Node nuevo = new Node(value, padre);
                return nuevo;
            }
            if (root.dato > value) {
                aux = Insert(root.hijoIzquierdo, value, aux);
                root.hijoIzquierdo = aux;
            } else {
                aux = Insert(root.hijoDerecho, value, aux);
                root.hijoDerecho = aux;
            }
            return root;
        }

        public Node Buscar(Node root, int dato) {
            Node aux = root;
            if (root == null) {
                return null;
            }
            if (root.dato == dato) {
                return root;
            }
            if (root.dato > dato) {
                aux = Buscar(root.hijoIzquierdo, dato);
            } else {
                aux = Buscar(root.hijoDerecho, dato);
            }
            return aux;
        }

        public void calcularAncestro(int inicio, int fin) {
            Node primero = Buscar(raiz, inicio);
            Node segundo = Buscar(raiz, fin);
            if (primero == null || segundo == null) {
                System.out.print("-1");
            } else {
                Node auxSegundo = segundo;
                boolean flag = false;
                while (primero != null && !flag) {
                    Node ramita = primero;
                    segundo = auxSegundo;
                    while (segundo != null) {
                        if (ramita.dato == segundo.dato) {
                            System.out.print(ramita.dato);
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                    }
                    primero = primero.padre;
                }
            }
        }

        public void Distancia(int inicio, int fin) {
            Node primero = Buscar(raiz, inicio);
            Node segundo = Buscar(raiz, fin);
            if (primero == null || segundo == null) {
                System.out.print("-1");
            } else {
                Node auxSegundo = segundo;
                int cnt1 = 0;
                int cnt2 = 0;
                boolean flag = false;
                while (primero != null && !flag) {
                    Node ramita = primero;
                    segundo = auxSegundo;
                    cnt2 = 0;
                    while (segundo != null) {
                        if (ramita.dato == segundo.dato) {
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                        ++cnt2;
                    }
                    primero = primero.padre;
                    ++cnt1;
                }
                System.out.print((--cnt1) + cnt2);
            }
        }

        public void ContarHijos(int datoNodo) {
            Node current = Buscar(raiz, datoNodo);
            if (current == null) {
                System.out.print("-1");
            } else {
                Deque<Node> nodos = new ArrayDeque<>();
                nodos.addLast(current);
                int cnt = 0;
                while (!nodos.isEmpty()) {
                    Node aux = nodos.removeFirst();
                    if (aux.hijoIzquierdo != null) {
                        nodos.addLast(aux.hijoIzquierdo);
                        ++cnt;
                    }
                    if (aux.hijoDerecho != null) {
                        nodos.addLast(aux.hijoDerecho);
                        ++cnt;
                    }
                }
                System.out.print(cnt);
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        int q;
        ArbolGenealogico arbol = new ArbolGenealogico();
        String comando;
        int persona1, persona2;
        String entradas[];
        for (int i = 0; i < t; i++) {
            q = sc.nextInt();
            sc.nextLine();
            if (0 < q && q < 10000) {
                if (i == 0) {
                    System.out.print("Caso #" + (i + 1) + ":");
                } else {
                    System.out.print("\nCaso #" + (i + 1) + ":");
                }
                for (int j = 0; j < q; j++) {
                    comando = sc.nextLine();
                    if (comando.startsWith("agregar")) {
                        entradas = comando.split(" ");
                        persona1 = Integer.parseInt(entradas[1]);
                        if (0 < persona1 && persona1 < 1000000) {
                            arbol.raiz = arbol.Insert(arbol.raiz, persona1, null);
                        }
                    } else if (comando.startsWith("distancia")) {
                        entradas = comando.split(" ");
                        persona1 = Integer.parseInt(entradas[1]);
                        persona2 = Integer.parseInt(entradas[2]);
                        if (0 < persona1 && persona1 < 1000000 && 0 < persona2 && persona2 < 1000000) {
                            if (j < q && j != 0) {
                                System.out.println();
                            }
                            System.out.print("distancia: ");
                            arbol.Distancia(persona1, persona2);
                        }
                    } else if (comando.startsWith("ancestro")) {
                        entradas = comando.split(" ");
                        persona1 = Integer.parseInt(entradas[1]);
                        persona2 = Integer.parseInt(entradas[2]);
                        if (0 < persona1 && persona1 < 1000000 && 0 < persona2 && persona2 < 1000000) {
                            if (j < q && j != 0) {
                                System.out.println();
                            }
                            System.out.print("ancestro: ");
                            arbol.calcularAncestro(persona1, persona2);
                        }
                    } else if (comando.startsWith("contar")) {
                        entradas = comando.split(" ");
                        persona1 = Integer.parseInt(entradas[1]);
                        if (0 < persona1 && persona1 < 1000000) {
                            if (j < q && j != 0) {
                                System.out.println();
                            }
                            System.out.print("contar: ");
                            arbol.ContarHijos(persona1);
                        }
                    }
                }
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package resultadosjuez;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 *
 */
public class ResultadosJuez {

    /**
     * @param args the command line arguments
     */
    public static class Equipo implements Comparable<Equipo> {

        int id;
        int ejercicios;
        int tiempo;

        public Equipo(int id, int ejercicios, int tiempo) {
            this.id = id;
            this.ejercicios = ejercicios;
            this.tiempo = tiempo;
        }

        @Override
        public String toString() {
            return id + " " + ejercicios + " " + tiempo;
        }

        @Override
        public int compareTo(Equipo o) {
            if (ejercicios < o.ejercicios) {
                return -1;
            }
            if (ejercicios > o.ejercicios) {
                return 1;
            }
            if (ejercicios == o.ejercicios) {
                if (tiempo < o.tiempo) {
                    return 1;
                }
                if (tiempo > o.tiempo) {
                    return -1;
                }
                if (ejercicios == o.ejercicios) {
                    if (id < o.id) {
                        return 1;
                    }
                    if (id > o.id) {
                        return -1;
                    }
                }
            }
            return 0;
        }

    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        if (0 < casos && casos < 1000000) {
            for (int i = 0; i < casos; i++) {
                String entradasNK = sc.nextLine();
                String[] realizados = entradasNK.split(" ");
                int equipos = Integer.parseInt(realizados[0]);
                int envios = Integer.parseInt(realizados[1]);

                Map< String, Integer> penalidad = new HashMap<String, Integer>();
                int[][] participantes = new int[3][equipos];

                if (1 <= equipos && 1 <= envios && equipos <= 1000000 && envios <= 1000000) {
                    for (int j = 0; j < envios; j++) {
                        String entrada = sc.nextLine();
                        String[] argumentos = entrada.split(" ");
                        int concursante = Integer.parseInt(argumentos[0]);
                        int problema = Integer.parseInt(argumentos[1]);
                        int tiempo = Integer.parseInt(argumentos[2]);
                        int aux;
                        if (1 <= concursante && 1 <= problema && 1 <= tiempo
                                && concursante <= equipos && problema <= 100000 && tiempo <= 1000) {
                            participantes[0][concursante - 1] = concursante;
                            entrada = argumentos[0] + "0" + argumentos[1];
                            if (!penalidad.containsKey(entrada)) {
                                if (argumentos[3].contains("C")) {
                                    participantes[0][concursante - 1] = concursante;
                                    participantes[1][concursante - 1] = participantes[1][concursante - 1] + 1;
                                    participantes[2][concursante - 1] = participantes[2][concursante - 1] + tiempo;
                                } else if (!argumentos[3].equals("C")) {
                                    penalidad.put(entrada, 20);
                                }
                            } else {
                                if (argumentos[3].contains("C")) {
                                    aux = penalidad.get(entrada);
                                    aux = aux + tiempo;
                                    penalidad.remove(entrada);
                                    participantes[0][concursante - 1] = concursante;
                                    participantes[1][concursante - 1] = participantes[1][concursante - 1] + 1;
                                    participantes[2][concursante - 1] = participantes[2][concursante - 1] + aux;

                                } else if (!argumentos[3].equals("C")) {
                                    aux = penalidad.get(entrada);
                                    aux = aux + 20;
                                    penalidad.remove(entrada);
                                    penalidad.put(entrada, aux);
                                }
                            }

                        }
                    }
                    Equipo[] posicion = new Equipo[equipos];

                    for (int j = 0; j < equipos; j++) {
                        
                        posicion[j] = new Equipo(participantes[0][j], participantes[1][j], participantes[2][j]);
                        
                    }
                    Arrays.sort(posicion);

                    System.out.println("Caso #" + (i + 1) + ":");
                    for (int j = equipos; 0 < j; j--) {

                        if (i == casos - 1 && 0 == j - 1) {
                            if(posicion[j - 1].id != 0){
                            System.out.print(posicion[j - 1]);
                            }
                        } else {
                            if(posicion[j - 1].id != 0){
                            System.out.println(posicion[j - 1]);
                            }
                        }
                    }

                }
            }
        }
    }
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package signomultiplicacionbar;

import java.util.Scanner;

/**
 *
 */
public class SignoMultiplicacionBar {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        int cantidad;
        int rondas;
        int inicio;
        int fin;
        int multiplicacion = 1;
        for (int i = 0; i < casos; i++) {
            System.out.print("Caso #" + (i + 1) + ":");
            String enterosNK = sc.nextLine();
            String numRondas[] = enterosNK.split(" ");
            cantidad = Integer.parseInt(numRondas[0]);
            rondas = Integer.parseInt(numRondas[1]);
            if (0 < cantidad && cantidad < 100000 && 0 < rondas && rondas < 100000) {
                int secuencia[] = new int[cantidad];
                enterosNK = sc.nextLine();
                numRondas = enterosNK.split(" ");
                for (int j = 0; j < cantidad; j++) {
                    secuencia[j] = Integer.parseInt(numRondas[j]);
                }
                for (int j = 0; j < rondas; j++) {
                    enterosNK = sc.nextLine();
                    numRondas = enterosNK.split(" ");
                    switch (numRondas[0]) {
                        case "cambio":
                            secuencia[Integer.parseInt(numRondas[1]) - 1] = Integer.parseInt(numRondas[2]);
                            break;
                        case "multiplicar":
                            inicio = Integer.parseInt(numRondas[1]);
                            inicio = inicio - 1;
                            fin = Integer.parseInt(numRondas[2]);
                            for (int k = inicio; k < fin; k++) {
                                multiplicacion = multiplicacion * secuencia[k];
                            }   if (j < (rondas)) {
                                System.out.println();
                            }   
                            if (multiplicacion < 0) {
                                System.out.print("-");
                            } else if (0 < multiplicacion) {
                                System.out.print("+");
                            } else {
                                System.out.print("0");
                            }   multiplicacion = 1;
                            break;
                    }
                }
            }
            if (i < (casos-1)) {
                System.out.println();
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package signomultiplicacionbar;

import java.util.Scanner;
import java.math.BigInteger;

/**
 *
 */
public class SignoMultiplicacionBar {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        int cantidad;
        int rondas;
        int inicio;
        int fin;
        
        for (int i = 0; i < casos; i++) {
            System.out.print("Caso #" + (i + 1) + ":");
            String enterosNK = sc.nextLine();
            String numRondas[] = enterosNK.split(" ");
            cantidad = Integer.parseInt(numRondas[0]);
            rondas = Integer.parseInt(numRondas[1]);
            if (0 < cantidad && cantidad < 100000 && 0 < rondas && rondas < 100000) {
                int secuencia[] = new int[cantidad];
                enterosNK = sc.nextLine();
                numRondas = enterosNK.split(" ");
                for (int j = 0; j < cantidad; j++) {
                    secuencia[j] = Integer.parseInt(numRondas[j]);
                }
                for (int j = 0; j < rondas; j++) {
                    enterosNK = sc.nextLine();
                    numRondas = enterosNK.split(" ");
                    switch (numRondas[0]) {
                        case "cambio":
                            secuencia[Integer.parseInt(numRondas[1]) - 1] = Integer.parseInt(numRondas[2]);
                            break;
                        case "multiplicar":
                            BigInteger multiplicacion = new BigInteger("1");
                            inicio = Integer.parseInt(numRondas[1]);
                            inicio = inicio - 1;
                            fin = Integer.parseInt(numRondas[2]);
                            for (int k = inicio; k < fin; k++) {
                                BigInteger auxiliarnum = new BigInteger(String.valueOf(secuencia[k]));
                                multiplicacion = multiplicacion.multiply(auxiliarnum);
                            }   if (j < (rondas)) {
                                System.out.println();
                            }   
                            if (multiplicacion.doubleValue() < 0) {
                                System.out.print("-");
                            } else if (0 < multiplicacion.doubleValue()) {
                                System.out.print("+");
                            } else {
                                System.out.print("0");
                            }                               
                            break;
                    }
                }
            }
            if (i < (casos-1)) {
                System.out.println();
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package signomultiplicacionbar;

import java.util.Scanner;
import java.math.BigInteger;

/**
 *
 */
public class SignoMultiplicacionBar {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        int cantidad;
        int rondas;
        int inicio;
        int fin;
        
        for (int i = 0; i < casos; i++) {
            System.out.print("Caso #" + (i + 1) + ":");
            String enterosNK = sc.nextLine();
            String numRondas[] = enterosNK.split(" ");
            cantidad = Integer.parseInt(numRondas[0]);
            rondas = Integer.parseInt(numRondas[1]);
            if (0 < cantidad && cantidad < 1000000 && 0 < rondas && rondas < 1000000) {
                int secuencia[] = new int[cantidad];
                enterosNK = sc.nextLine();
                numRondas = enterosNK.split(" ");
                for (int j = 0; j < cantidad; j++) {
                    secuencia[j] = Integer.parseInt(numRondas[j]);
                }
                for (int j = 0; j < rondas; j++) {
                    enterosNK = sc.nextLine();
                    numRondas = enterosNK.split(" ");
                    switch (numRondas[0]) {
                        case "cambio":
                            secuencia[Integer.parseInt(numRondas[1]) - 1] = Integer.parseInt(numRondas[2]);
                            break;
                        case "multiplicar":
                            BigInteger multiplicacion = new BigInteger("1");
                            inicio = Integer.parseInt(numRondas[1]);
                            inicio = inicio - 1;
                            fin = Integer.parseInt(numRondas[2]);
                            for (int k = inicio; k < fin; k++) {
                                BigInteger auxiliarnum = new BigInteger(String.valueOf(secuencia[k]));
                                multiplicacion = multiplicacion.multiply(auxiliarnum);
                            }   if (j < (rondas)) {
                                System.out.println();
                            }   
                            if (multiplicacion.doubleValue() < 0) {
                                System.out.print("-");
                            } else if (0 < multiplicacion.doubleValue()) {
                                System.out.print("+");
                            } else {
                                System.out.print("0");
                            }                               
                            break;
                    }
                }
            }
            if (i < (casos-1)) {
                System.out.println();
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package resultadosjuez;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 *
 */
public class ResultadosJuez {

    /**
     * @param args the command line arguments
     */
    public static class Equipo implements Comparable<Equipo> {

        int id;
        int ejercicios;
        int tiempo;

        public Equipo(int id, int ejercicios, int tiempo) {
            this.id = id;
            this.ejercicios = ejercicios;
            this.tiempo = tiempo;
        }

        @Override
        public String toString() {
            return id + " " + ejercicios + " " + tiempo;
        }

        @Override
        public int compareTo(Equipo o) {
            if (ejercicios < o.ejercicios) {
                return -1;
            }
            if (ejercicios > o.ejercicios) {
                return 1;
            }
            if (ejercicios == o.ejercicios) {
                if (tiempo < o.tiempo) {
                    return 1;
                }
                if (tiempo > o.tiempo) {
                    return -1;
                }
                if (ejercicios == o.ejercicios) {
                    if (id < o.id) {
                        return 1;
                    }
                    if (id > o.id) {
                        return -1;
                    }
                }
            }
            return 0;
        }

    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        if (0 < casos && casos < 1000000) {
            for (int i = 0; i < casos; i++) {
                String entradasNK = sc.nextLine();
                String[] realizados = entradasNK.split(" ");
                int equipos = Integer.parseInt(realizados[0]);
                int envios = Integer.parseInt(realizados[1]);

                Map< String, Integer> penalidad = new HashMap<String, Integer>();
                int[][] participantes = new int[3][equipos];

                if (1 <= equipos && 1 <= envios && equipos <= 1000000 && envios <= 1000000) {
                    for (int j = 0; j < envios; j++) {
                        String entrada = sc.nextLine();
                        String[] argumentos = entrada.split(" ");
                        int concursante = Integer.parseInt(argumentos[0]);
                        int problema = Integer.parseInt(argumentos[1]);
                        int tiempo = Integer.parseInt(argumentos[2]);
                        int aux;
                        if (1 <= concursante && 1 <= problema && 1 <= tiempo
                                && concursante <= equipos && problema <= 100000 && tiempo <= 1000) {
                            participantes[0][concursante - 1] = concursante;
                            entrada = argumentos[0] + "0" + argumentos[1];
                            if (!penalidad.containsKey(entrada)) {
                                if (argumentos[3].contains("C")) {
                                    participantes[0][concursante - 1] = concursante;
                                    participantes[1][concursante - 1] = participantes[1][concursante - 1] + 1;
                                    participantes[2][concursante - 1] = participantes[2][concursante - 1] + tiempo;
                                } else if (!argumentos[3].equals("C")) {
                                    penalidad.put(entrada, 20);
                                }
                            } else {
                                if (argumentos[3].contains("C")) {
                                    aux = penalidad.get(entrada);
                                    aux = aux + tiempo;
                                    penalidad.remove(entrada);
                                    participantes[0][concursante - 1] = concursante;
                                    participantes[1][concursante - 1] = participantes[1][concursante - 1] + 1;
                                    participantes[2][concursante - 1] = participantes[2][concursante - 1] + aux;

                                } else if (!argumentos[3].equals("C")) {
                                    aux = penalidad.get(entrada);
                                    aux = aux + 20;
                                    penalidad.remove(entrada);
                                    penalidad.put(entrada, aux);
                                }
                            }

                        }
                    }
                    Equipo[] posicion = new Equipo[equipos];

                    for (int j = 0; j < equipos; j++) {
                        
                        posicion[j] = new Equipo(participantes[0][j], participantes[1][j], participantes[2][j]);
                        
                    }
                    Arrays.sort(posicion);

                    System.out.println("Caso #" + (i + 1) + ":");
                    for (int j = equipos; 0 < j; j--) {

                        if (i == casos - 1 && 0 == j - 1) {
                            if(posicion[j - 1].id != 0){
                            System.out.print(posicion[j - 1]);
                            }
                        } else {
                            if(posicion[j - 1].id != 0){
                            System.out.println(posicion[j - 1]);
                            }
                        }
                    }

                }
            }
        }
    }
}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maximoproductoi;

import java.util.Arrays;
import java.util.Scanner;

/**
 *
 */
public class MaximoProductoi {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cantidad = sc.nextInt();
        sc.nextLine();
        if (0 < cantidad && cantidad <= 100000) {
            String entrada = sc.nextLine();
            String[] numeros = entrada.split(" ");
            int value;
            int producto[] = new int[3];
            for (int i = 0; i < cantidad; i++) {
                value = Integer.parseInt(numeros[i]);
                if (0 <= value && value <= 1000000) {
                    if (i < 3) {
                        producto[i] = value;
                    } else {
                        for (int j = 0; j < 3; j++) {
                            if (value > producto[j]) {
                                producto[j] = value;
                                break;
                            }
                        }
                    }
                    if (i > 1) {
                        Arrays.sort(producto);
                        if (i<cantidad-1) {
                           System.out.println(producto[0] * producto[1] * producto[2]); 
                        }else{
                            System.out.print(producto[0] * producto[1] * producto[2]);
                        }
                        
                    } else {
                        if (i<cantidad-1) {
                           System.out.println("-1");
                        }else{
                            System.out.print("-1");
                        }                        
                    }
                }
            }
        }
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
