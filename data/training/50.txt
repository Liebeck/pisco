
package Problema_A;

import java.util.Scanner;

public class Main {
    public static void makeProduct(int[] numbers){
        int minProduct = -1*(int)(Math.pow(2, 31));
        int aux = 0;
        for (int i = 0; i < numbers.length; i++) {
            for(int j = 0;j<numbers.length;++j){
                if(i!=j){
                    aux = numbers[i]*numbers[j];
                    if(minProduct<aux)
                        minProduct = aux;
                }
            }
        }
        System.out.println(minProduct);
    }    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int numbers[] = new int[N];
        for (int i = 0; i < numbers.length; i++) 
            numbers[i] = sc.nextInt();
        makeProduct(numbers);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_A;

import java.util.Scanner;

public class Main {
    public static void makeProduct(int[] numbers){
        int minProduct = -1*(int)(Math.pow(2, 31));
        int aux = 0;
        for (int i = 0; i < numbers.length; i++) {
            for(int j = 0;j<numbers.length;++j){
                if(i!=j){
                    aux = numbers[i]*numbers[j];
                    if(minProduct<aux)
                        minProduct = aux;
                }
            }
        }
        System.out.println(minProduct);
    }    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int N = sc.nextInt();
            int numbers[] = new int[N];
            for (int i = 0; i < numbers.length; i++) 
                numbers[i] = sc.nextInt();
            makeProduct(numbers);
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_A;

import java.util.Scanner;

public class Main {
    public static void makeProduct(int[] numbers){
        int minProduct = -1*(int)(Math.pow(2, 31));
        int aux = 0;
        for (int i = 0; i < numbers.length; i++) {
            for(int j = 0;j<numbers.length;++j){
                if(i!=j){
                    aux = numbers[i]*numbers[j];
                    if(minProduct<aux)
                        minProduct = aux;
                }
            }
        }
        System.out.println(minProduct);
    }    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            int N = sc.nextInt();
            int numbers[] = new int[N];
            for (int i = 0; i < numbers.length; i++) 
                numbers[i] = sc.nextInt();
            makeProduct(numbers);
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_A;

import java.util.Scanner;

public class Main {
    public static void makeProduct(int[] numbers){
        int minProduct = -1*(int)(Math.pow(2, 31));
        int aux = 0;
        for (int i = 0; i < numbers.length; i++) {
            for(int j = 0;j<numbers.length;++j){
                if(i!=j){
                    aux = numbers[i]*numbers[j];
                    if(minProduct<aux)
                        minProduct = aux;
                }
            }
        }
        System.out.println(minProduct);
    }    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
            int N = sc.nextInt();
            int numbers[] = new int[N];
            for (int i = 0; i < numbers.length; i++) 
                numbers[i] = sc.nextInt();
            makeProduct(numbers);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_A;

import java.util.Scanner;

public class Main {
    public static int makeProduct(int[] numbers){
        int minProduct = -1*(int)(Math.pow(2, 31));
        int aux = 0;
        for (int i = 0; i < numbers.length; i++) {
            for(int j = 0;j<numbers.length;++j){
                if(i!=j){
                    aux = numbers[i]*numbers[j];
                    if(minProduct<aux)
                        minProduct = aux;
                }
            }
        }
        return minProduct;
    }    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int numbers[] = new int[N];
        for (int i = 0; i < numbers.length; i++) 
            numbers[i] = sc.nextInt();
        int answer = makeProduct(numbers);
        System.out.println(answer);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_A;

import java.util.Scanner;

public class Main {
    public static long makeProduct(long[] numbers){
        long minProduct = -1*(long)(Math.pow(2, 31));
        long aux = 0;
        for (int i = 0; i < numbers.length; i++) {
            for(int j = 0;j<numbers.length;++j){
                if(i!=j){
                    aux = numbers[i]*numbers[j];
                    if(minProduct<aux)
                        minProduct = aux;
                }
            }
        }
        return minProduct;
    }    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long numbers[] = new long[N];
        for (int i = 0; i < numbers.length; i++) 
            numbers[i] = sc.nextInt();
        long answer = makeProduct(numbers);
        System.out.println(answer);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_B;

import java.util.Scanner;

public class Main {
    public static boolean getWinnerBox(int[][] numbers,int row,int col){
        int sumRow = 0,sumCol = 0;
        for(int i = 0;i<numbers.length;++i)
            sumCol += numbers[i][col];
        for(int j = 0;j<numbers.length;++j)
            sumRow += numbers[row][j];
        if(sumRow<sumCol)
            return true;
        else
            return false;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n,cnt,cnt2 = 1;
        while(sc.hasNext()){
            n = sc.nextInt();
            cnt = 0;
            int[][] numbers = new int[n][n];
            for (int i = 0; i < numbers.length; i++) {
                for (int j = 0; j < numbers.length; j++) 
                    numbers[i][j] = sc.nextInt();
            }
            for (int i = 0; i < numbers.length; i++) {
                for (int j = 0; j < numbers.length; j++) {
                    if(getWinnerBox(numbers,i,j))
                        ++cnt;
                }
            }
            System.out.println("Case "+cnt2++);
            System.out.println(cnt);
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_C;

import java.util.Scanner;

public class Main {
    public static void compareColors(int[][] colors,int indexA,int indexB){
        int cnt = 0;
        for (int i = 0; i < indexA; i++) {
            for(int j = 0;j<indexA;++j){
                if(i!=j){
                    if(colors[i][0] == colors[j][1])
                        ++cnt;
                }
            }
        }
        System.out.println(cnt);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cases = sc.nextInt(),ballTeams,cnt2 = 1;
        while(cases>0){
            ballTeams = sc.nextInt();
            int[][] colors = new int[ballTeams][2];
            for (int i = 0; i < ballTeams; i++) {
                for (int j = 0; j < 2; j++) 
                    colors[i][j] = sc.nextInt();
            }
            System.out.println("Case "+(cnt2++));
            compareColors(colors,ballTeams,2);
            --cases;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_B;

import java.util.Scanner;

public class Main {
    public static boolean getWinnerBox(int[][] numbers,int row,int col){
        int sumRow = 0,sumCol = 0;
        for(int i = 0;i<numbers.length;++i)
            sumCol += numbers[i][col];
        for(int j = 0;j<numbers.length;++j)
            sumRow += numbers[row][j];
        if(sumRow<sumCol)
            return true;
        else
            return false;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n,cnt,cnt2 = 1;
        while(sc.hasNext()){
            n = sc.nextInt();
            cnt = 0;
            int[][] numbers = new int[n][n];
            for (int i = 0; i < numbers.length; i++) {
                for (int j = 0; j < numbers.length; j++) 
                    numbers[i][j] = sc.nextInt();
            }
            for (int i = 0; i < numbers.length; i++) {
                for (int j = 0; j < numbers.length; j++) {
                    if(getWinnerBox(numbers,i,j))
                        ++cnt;
                }
            }
            System.out.println("Case #"+(cnt2++)+":");
            System.out.println(cnt);
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_C;

import java.util.Scanner;

public class Main {
    public static void compareColors(int[][] colors,int indexA,int indexB){
        int cnt = 0;
        for (int i = 0; i < indexA; i++) {
            for(int j = 0;j<indexA;++j){
                if(i!=j){
                    if(colors[i][0] == colors[j][1])
                        ++cnt;
                }
            }
        }
        System.out.println(cnt);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cases = sc.nextInt(),ballTeams,cnt2 = 1;
        while(cases>0){
            ballTeams = sc.nextInt();
            int[][] colors = new int[ballTeams][2];
            for (int i = 0; i < ballTeams; i++) {
                for (int j = 0; j < 2; j++) 
                    colors[i][j] = sc.nextInt();
            }
            System.out.println("Case #"+(cnt2++)+":");
            compareColors(colors,ballTeams,2);
            --cases;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;

import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static boolean viewRow(int row,char[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyRow = new Integer(row);
        while(row>=0){
            for (int j = 0; j < matrix.length; j++) {
                if(matrix[row][j]=='#')
                    ++cnt;
            }
            --row;
        }
        if(cnt == numBerry)
            return true;
        else
            return viewCol(copyRow,matrix,numBerry);
    }
    public static boolean viewCol(int col,char[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyCol = new Integer(col);
        while(col>=0){
            for (int i = 0; i < matrix.length; i++) {
                if(matrix[i][col]=='#')
                    ++cnt;
            }
        --col;
        }
        if(cnt == numBerry)
            return true;
        else{
            if(copyCol != (matrix.length-1))
                return viewRow(copyCol+1,matrix,numBerry);
            else
                return false;
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String barra = "";
            for(int i = 0;i<sizeCh;++i)
                barra += sc.next();
            char[] chocAux = barra.toCharArray();
            ArrayList<Character> chocChar = new ArrayList<>();
            int numBerry = 0;
            for (int i = 0; i < chocAux.length; i++) {
                if(chocAux[i]=='.'||chocAux[i]=='#')
                    chocChar.add(chocAux[i]);
            }
            for (int i = 0; i <chocAux.length; i++) 
                if(chocAux[i] == '#')
                    ++numBerry;
            if(numBerry%2==1)
                System.out.println("NO");
            else{
                char[][] barraMatrix = new char[sizeCh][sizeCh];
                int cnt = 0;
                for (int i = 0; i < barraMatrix.length; i++) {
                    for (int j = 0; j < barraMatrix.length; j++) {
                        barraMatrix[i][j] = chocChar.get(cnt++);
                    }
                }
                    if(viewRow(0,barraMatrix,numBerry/2)){
                        System.out.println("YES");
                    }else
                        System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static boolean viewRow(int row,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyRow = new Integer(row);
        while(row>=0){
            for (int j = 0; j < matrix.length; j++) {
                if(matrix[row][j].equals("#"))
                    ++cnt;
            }
            --row;
        }
        if(cnt == numBerry)
            return true;
        else
            return viewCol(copyRow,matrix,numBerry);
    }
    public static boolean viewCol(int col,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyCol = new Integer(col);
        while(col>=0){
            for (int i = 0; i < matrix.length; i++) {
                if(matrix[i][col].equals("#"))
                    ++cnt;
            }
        --col;
        }
        if(cnt == numBerry)
            return true;
        else{
            if(copyCol != (matrix.length-1))
                return viewRow(copyCol+1,matrix,numBerry);
            else
                return false;
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String barra = "";
            for(int i = 0;i<sizeCh;++i)
                barra += sc.next();
            String[] chocAux = barra.split("");
            ArrayList<Character> chocChar = new ArrayList<>();
            int numBerry = 0;
            for (int i = 0; i <chocAux.length; i++) 
                if(chocAux[i].equals("#"))
                    ++numBerry;
            if(numBerry%2==1)
                System.out.println("NO");
            else{
                String[][] barraMatrix = new String[sizeCh][sizeCh];
                int cnt = 0;
                for (int i = 0; i < barraMatrix.length; i++) {
                    for (int j = 0; j < barraMatrix.length; j++) {
                        barraMatrix[i][j] = chocAux[cnt++];
                    }
                }
                if(viewRow(0,barraMatrix,numBerry/2))
                     System.out.println("YES");
                else
                    System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;
import java.util.Scanner;
public class Main {
    public static boolean viewRow(int row,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyRow = new Integer(row);
        while(row>=0){
            for (int j = 0; j < matrix.length; j++) {
                if(matrix[row][j].equals("#"))
                    ++cnt;
            }
            --row;
        }
        if(cnt == numBerry)
            return true;
        else
            return viewCol(copyRow,matrix,numBerry);
    }
    public static boolean viewCol(int col,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyCol = new Integer(col);
        while(col>=0){
            for (int i = 0; i < matrix.length; i++) {
                if(matrix[i][col].equals("#"))
                    ++cnt;
            }
            --col;
        }
        if(cnt == numBerry)
            return true;
        else{
            if(copyCol != (matrix.length-1))
                return viewRow(copyCol+1,matrix,numBerry);
            else
                return false;
        }
    }
    public static int viewBerrys(String[] chocAux,int numBerry){
        for (int i = 0; i < chocAux.length; ++i) {
            if (chocAux[i].equals("#")) 
                ++numBerry; 
        }
        return numBerry;    
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String barra = "";
            barra = sc.next();
            for(int i = 0;i<sizeCh;++i)
                barra += sc.next();
            String[] chocAux = barra.split("");
            int numBerry = 0;
            numBerry = viewBerrys(chocAux,numBerry);
            if (numBerry % 2 == 1) 
                System.out.println("NO");
            else{
                String[][] barraMatrix = new String[sizeCh][sizeCh];
                int cnt = 0;
                for (int i = 0; i < barraMatrix.length; i++) {
                    for (int j = 0; j < barraMatrix.length; j++) {
                        barraMatrix[i][j] = chocAux[cnt++];
                    }
                }
                if(viewRow(0,barraMatrix,numBerry/2))
                     System.out.println("YES");
                else
                    System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;
import java.util.Scanner;
public class Main {
    public static boolean viewRow(int row,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyRow = new Integer(row);
        while(row>=0){
            for (int j = 0; j < matrix.length; j++) {
                if(matrix[row][j].equals("#"))
                    ++cnt;
            }
            --row;
        }
        if(cnt == numBerry)
            return true;
        else
            return viewCol(copyRow,matrix,numBerry);
    }
    public static boolean viewCol(int col,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyCol = new Integer(col);
        while(col>=0){
            for (int i = 0; i < matrix.length; i++) {
                if(matrix[i][col].equals("#"))
                    ++cnt;
            }
            --col;
        }
        if(cnt == numBerry)
            return true;
        else{
            if(copyCol != (matrix.length-1))
                return viewRow(copyCol+1,matrix,numBerry);
            else
                return false;
        }
    }
    public static int viewBerrys(String[] chocAux){
        int numBerry = 0;
        for (int i = 0; i < chocAux.length; ++i) {
            if (chocAux[i].equals("#")) 
                ++numBerry; 
        }
        return numBerry;    
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String barra = "";
            for(int i = 0;i<sizeCh;i++)
                barra += sc.next();
            String[] chocAux = barra.split("");
            int numBerry = 0;
            numBerry = viewBerrys(chocAux);
            if (numBerry%2 == 1) 
                System.out.println("NO");
            else{
                String[][] barraMatrix = new String[sizeCh][sizeCh];
                int cnt = 0;
                for (int i = 0; i < barraMatrix.length; i++) {
                    for (int j = 0; j < barraMatrix.length; j++) {
                        barraMatrix[i][j] = chocAux[cnt++];
                    }
                }
                if(viewRow(0,barraMatrix,numBerry/2))
                     System.out.println("YES");
                else
                    System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;
import java.util.Scanner;
public class Main {
    public static boolean viewRow(int row,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyRow = new Integer(row);
        while(row>=0){
            for (int j = 0; j < matrix.length; j++) {
                if(matrix[row][j].equals("#"))
                    ++cnt;
            }
            --row;
        }
        if(cnt == numBerry)
            return true;
        else
            return viewCol(copyRow,matrix,numBerry);
    }
    public static boolean viewCol(int col,String[][] matrix,int numBerry){
        int cnt = 0;
        Integer copyCol = new Integer(col);
        while(col>=0){
            for (int i = 0; i < matrix.length; i++) {
                if(matrix[i][col].equals("#"))
                    ++cnt;
            }
            --col;
        }
        if(cnt == numBerry)
            return true;
        else{
            if(copyCol != (matrix.length-1))
                return viewRow(copyCol+1,matrix,numBerry);
            else
                return false;
        }
    }
    public static int viewBerrys(String[] chocAux){
        int numBerry = 0;
        for (int i = 0; i < chocAux.length; ++i) {
            if (chocAux[i].equals("#")) 
                ++numBerry; 
        }
        return numBerry;    
    }
    public static String fillBarra(int sizeCh,Scanner sc){
            String barra = "";
            for(int i = 0;i<sizeCh;i++)
                barra += sc.next();
            return barra;
    }
    public static String[][] fillMatrix(String[][] barraMatrix,String[] chocAux){
        int cnt = 0;
        for (int i = 0; i < barraMatrix.length; i++) {
            for (int j = 0; j < barraMatrix.length; j++) {
                barraMatrix[i][j] = chocAux[cnt++];
            }
        }
        return barraMatrix;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String[] chocAux = fillBarra(sizeCh,sc).split("");
            int numBerry = 0;
            numBerry = viewBerrys(chocAux);
            if (numBerry%2 == 1) 
                System.out.println("NO");
            else{
                String[][] barraMatrix = new String[sizeCh][sizeCh];
                barraMatrix = fillMatrix(barraMatrix,chocAux);
                if(viewRow(0,barraMatrix,numBerry/2))
                     System.out.println("YES");
                else
                    System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;
import java.util.Scanner;
public class Main {
    public static boolean viewRow(int row,String[][] matrix,int numBerry,int cnt){
        if (row != (matrix.length - 1)) {
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[row][j].equals("#")) 
                    ++cnt; 
            }
            if(cnt == numBerry)
                return true;
            else
                return viewRow(row+1, matrix, numBerry,cnt);    
        }else{
            //cnt = 0; viewCol(0,matrix,numBerry,cnt);  
            return false;
        }
    }/*
    public static boolean viewCol(int col,String[][] matrix,int numBerry,int cnt){
        Integer copyCol = new Integer(col);
        if(copyCol != (matrix.length-1)){
            for (int i = 0; i < matrix.length; i++) {
                if(matrix[i][col].equals("#"))
                    ++cnt;
            }
            if(cnt == numBerry)
                return true;
            else
                return viewRow(copyCol+1,matrix,numBerry,cnt);   
        }else
            return false;
    }*/
    public static int viewBerrys(String[] chocAux){
        int numBerry = 0;
        for (int i = 0; i < chocAux.length; ++i) {
            if (chocAux[i].equals("#")) 
                ++numBerry; 
        }
        return numBerry;    
    }
    public static String fillBarra(int sizeCh,Scanner sc){
            String barra = "";
            for(int i = 0;i<sizeCh;i++)
                barra += sc.next();
            return barra;
    }
    public static String[][] fillMatrix(String[][] barraMatrix,String[] chocAux){
        int cnt = 0;
        for (int i = 0; i < barraMatrix.length; i++) {
            for (int j = 0; j < barraMatrix.length; j++) {
                barraMatrix[i][j] = chocAux[cnt++];
            }
        }
        return barraMatrix;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String[] chocAux = fillBarra(sizeCh,sc).split("");
            int numBerry = 0;
            numBerry = viewBerrys(chocAux);
            if (numBerry%2 == 1) 
                System.out.println("NO");
            else{
                String[][] barraMatrix = new String[sizeCh][sizeCh];
                barraMatrix = fillMatrix(barraMatrix,chocAux);
                int cnt = 0;
                if(viewRow(0,barraMatrix,numBerry/2,cnt))
                     System.out.println("YES");
                else
                    System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;
import java.util.Scanner;
public class Main {
    public static boolean viewRow(int row,String[][] matrix,int numBerry,int cnt){
        if (row != (matrix.length - 1)) {
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[row][j].equals("#")) 
                    ++cnt; 
            }
            if(cnt == numBerry)
                return true;
            else
                return viewRow(row+1, matrix, numBerry,cnt);    
        }else{
            //cnt = 0; viewCol(0,matrix,numBerry,cnt);  
            return false;
        }
    }/*
    public static boolean viewCol(int col,String[][] matrix,int numBerry,int cnt){
        Integer copyCol = new Integer(col);
        if(copyCol != (matrix.length-1)){
            for (int i = 0; i < matrix.length; i++) {
                if(matrix[i][col].equals("#"))
                    ++cnt;
            }
            if(cnt == numBerry)
                return true;
            else
                return viewRow(copyCol+1,matrix,numBerry,cnt);   
        }else
            return false;
    }*/
    public static int viewBerrys(String[] chocAux,int numBerry){
        for (int i = 0; i < chocAux.length; ++i) {
            if (chocAux[i].equals("#")) 
                ++numBerry; 
        }
        return numBerry;    
    }
    public static String fillBarra(int sizeCh,Scanner sc){
            String barra = "";
            for(int i = 0;i<sizeCh;i++)
                barra += sc.next();
            return barra;
    }
    public static String[][] fillMatrix(String[][] barraMatrix,String[] chocAux){
        int cnt = 0;
        for (int i = 0; i < barraMatrix.length; i++) {
            for (int j = 0; j < barraMatrix.length; j++) {
                barraMatrix[i][j] = chocAux[cnt++];
            }
        }
        return barraMatrix;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String[] chocAux = fillBarra(sizeCh,sc).split("");
            int numBerry = 0;
            numBerry = viewBerrys(chocAux,numBerry);
            if (numBerry%2 == 1) 
                System.out.println("NO");
            else{
                String[][] barraMatrix = new String[sizeCh][sizeCh];
                barraMatrix = fillMatrix(barraMatrix,chocAux);
                if(viewRow(0,barraMatrix,numBerry/2,0))
                     System.out.println("YES");
                else
                    System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Problema_D;
import java.util.Scanner;
public class Main {
    public static boolean viewRow(int row,String[][] matrix,int numBerry,int cnt){
        while(row != (matrix.length-1)){
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[row][j].equals("#")) 
                    ++cnt; 
            }
            if(cnt == numBerry)
                return true;
            ++row;
        }
        return false;
    }
    public static int viewBerrys(String[] chocAux,int numBerry){
        for (int i = 0; i < chocAux.length; ++i) {
            if (chocAux[i].equals("#")) 
                ++numBerry; 
        }
        return numBerry;    
    }
    public static String fillBarra(int sizeCh,Scanner sc){
            String barra = "";
            for(int i = 0;i<sizeCh;i++)
                barra += sc.next();
            return barra;
    }
    public static String[][] fillMatrix(String[][] barraMatrix,String[] chocAux){
        int cnt = 0;
        for (int i = 0; i < barraMatrix.length; i++) {
            for (int j = 0; j < barraMatrix.length; j++) {
                barraMatrix[i][j] = chocAux[cnt++];
            }
        }
        return barraMatrix;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        while(casos>0){
            int sizeCh = sc.nextInt();
            String[] chocAux = fillBarra(sizeCh,sc).split("");
            int numBerry = 0;
            numBerry = viewBerrys(chocAux,numBerry);
            if (numBerry%2 == 1) 
                System.out.println("NO");
            else{
                String[][] barraMatrix = new String[sizeCh][sizeCh];
                barraMatrix = fillMatrix(barraMatrix,chocAux);
                if(viewRow(0,barraMatrix,numBerry/2,0))
                     System.out.println("YES");
                else
                    System.out.println("NO");
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Problema_E;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        int[] numers = new int[5];
        for (int i = 0; i < numers.length; i++) 
            numers[i] = sc.nextInt();  
        int cnt = 0;
        for (int i = 0; i < numers.length; i++) {
            if(numers[i] == T)
                ++cnt;
        }
        System.out.println(cnt);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C_v01;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int cnt,cnt2;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int Nniñas = Integer.parseInt(sc.nextLine());
        boolean flag = false;
        while(Nniñas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                for(int i = 0;i<girlCuali.length();++i){
                    if(girlCuali.charAt(i)!=' '){
                        flag = manCuali.indexOf(String.valueOf(girlCuali.charAt(i)))!=-1;
                        if(flag)
                            ++cnt;
                    }
                }
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }
            }
            --Nniñas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_B;

import java.util.Scanner;

public class Main {
    static int[] valores;
    private static int inicio,fin,raiz;
    public static void eliminarInicio(){
        for(int i = 0;i<valores.length;++i){
            if(valores[i] != 0){
                valores[i] = 0;
                ++raiz;
                if(raiz != valores.length)
                    ++inicio;
                break;
            }
        }
    }
    public static void eliminarFin(){
        for(int i = valores.length-1;i>=0;--i){
            if(valores[i]!=0){
                valores[i] = 0;
                ++raiz;
                if(raiz != valores.length)
                    --fin;
                break;
            }
        }
    }
    public static int getTurno(int turno,int cantidad){
        if(turno == 0)
            return 1;
        else if(turno!=cantidad)
            return turno+1;
        else
            return 0;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        int cantidadMazo,Njugadores;
        int cnt = 1,turno = 0;
        while(casos>0){
            System.out.println("Caso #"+(cnt++)+":");
            cantidadMazo = sc.nextInt();
            Njugadores = sc.nextInt();
            valores = new int[cantidadMazo];
            inicio=turno=raiz=0;
            fin = cantidadMazo-1;
            for(int i = 0;i<valores.length;++i)
                valores[i] = sc.nextInt();
            int[] contadores;
            contadores = new int[Njugadores];
            for(int i = 0;i<Njugadores;++i)
                contadores[i] = 0;
            while(raiz!=valores.length){
                if(valores[inicio]>valores[fin]){
                    contadores[turno]+=valores[inicio];
                    eliminarInicio();
                }else{
                    contadores[turno]+=valores[fin];
                    eliminarFin();
                }
                if(Njugadores!=1)
                    turno = getTurno(turno,Njugadores-1);
            }
            int maximo = 0;
            for(int i = 0;i<contadores.length;++i){
                if(contadores[i]>maximo)
                    maximo = contadores[i];
            }
            for(int i = 0;i<contadores.length;++i){
                if(contadores[i]==maximo)
                    System.out.print((i+1)+" ");
            }
            System.out.println();
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_A;
import java.util.Arrays;
import java.util.Scanner;
import java.util.StringTokenizer;
public class Main {
    public static class Nodo {
        public int dato;
        public Nodo siguiente;
            public Nodo(int dato) {
            this.dato = dato;
            this.siguiente = null;
        }
        public Nodo(int dato,Nodo siguiente) {
            this.dato = dato;
            this.siguiente = siguiente;
        }
    }
   static class Lista {
        private Nodo inicio,fin;
        private int size,costo;
        public Lista() {
            inicio = fin = null;
            size = costo = 0;
        }
        public boolean insertar(int dato,int pos){
            if (inicio == null && pos == 0) {
                inicio = fin = new Nodo(dato, null);
                ++size;
                return true;
            }else if(inicio != null) {
                if (pos >= 0 && pos <= size) {
                    if(pos == 0){
                       Nodo nuevo = new Nodo(dato);
                       nuevo.siguiente = inicio;
                       inicio = nuevo; 
                       ++size;
                       return true;
                    }else{
                        Nodo aux,anterior;
                        aux = anterior = inicio;
                        int cnt = 0;
                        while(aux.siguiente != null){
                            aux = aux.siguiente;
                            ++cnt;
                            ++costo;
                            if(anterior.siguiente!=aux)
                                anterior = anterior.siguiente;
                            if(cnt == pos)
                                break;
                        }
                        if(pos == size){
                            aux.siguiente = new Nodo(dato,null);
                            fin = aux.siguiente;
                            ++size;
                            ++costo;
                            return true;
                        }else{
                            Nodo nuevo = new Nodo(dato,aux);
                            anterior.siguiente = nuevo;
                            ++size;
                            //++costo;
                            return true;
                        }
                    }
                }
            } 
            return false;
        }
        public int consultar(int pos){
            if(inicio == null){
                return -1;
            }else{
                if(pos >= 0 && pos < size){
                    Nodo aux = inicio;
                    for(int i = 0;i<pos;++i){
                        aux = aux.siguiente;
                        ++costo;
                    }
                    return aux.dato;
                }
            }
            return -1;
        }
        public int buscar(int dato){
            if(inicio == null){
                return -1;
            }
            else{
                Nodo aux = inicio;
                for(int i = 0;i<size;++i){
                    ++costo;
                    if(aux.dato == dato)
                        return i;
                    else
                        aux = aux.siguiente;
                }
            }
            return -1;
        }
        public boolean eliminar(int pos){
            if(inicio == null){
                return false;
            }else{
                if(pos >= 0 && pos < size){
                    if(inicio==fin){
                         inicio = fin = null;
                         --size;
                         return true;
                    }else if(pos == 0){
                        inicio = inicio.siguiente;
                        --size;
                        return true;
                    }else{
                        Nodo aux = inicio;
                        int cnt = 0;
                        while(aux.siguiente!=null){
                            ++cnt;
                            ++costo;
                            if(cnt == pos)
                                break;
                            aux = aux.siguiente;
                        }
                        if(pos == size-1){
                            fin = aux;
                            fin.siguiente = null;
                            ++costo;
                            --size;
                            return true;
                        }else{
                            aux.siguiente = aux.siguiente.siguiente;
                            ++costo;
                            --size;
                            return true;
                        }
                    }     
                }
            }
            return false;
        }
    }
    public static class ArrLista{
        private int[] lista;
        private int costo;
        private int inicio,fin;
        public ArrLista(){
            lista = new int[10];
            Arrays.fill(lista, -1);
            costo = 0;
            inicio = fin = -1;
        }
        public void modificar(){
            int[] copy = new int[(lista.length/2)+lista.length];
            System.arraycopy(lista, 0, copy, 0,lista.length);
            lista = copy;
        }
        public void insertar(int dato,int pos){
            if(pos == 0 && inicio == -1){
                lista[0] = dato; 
                inicio = fin = 0;
            }else if(inicio != -1){
                if(lista[lista.length-1] != -1)
                    modificar();
                else{
                    if(pos == 0){
                     int[] arrCopy = new int[lista.length];
                     arrCopy[0] = dato;
                     inicio = 0;
                     for(int i = 1;i<arrCopy.length;++i){
                         if(lista[i-1]!=-1){
                             arrCopy[i] = lista[i-1];
                             ++costo;
                         }else
                             arrCopy[i] =lista[i-1];
                     }
                     ++fin;
                     lista = arrCopy;
                 }else{
                     if(pos>0 && pos<=fin+1){
                         if(lista[pos]==-1 && pos==fin+1){
                             lista[pos] = dato;
                             ++fin;
                         }else if(lista[pos]==-1){
                            lista[pos] = dato;
                        } else{
                             int[] arr = new int[lista.length];
                             for(int i = 0;i<pos;++i)
                                 arr[i] = lista[i];
                             for(int i = pos;i<lista.length;++i){
                                 if(i == pos)
                                     arr[pos] = dato;
                                 else if(i>pos){
                                     if(lista[i-1]!=-1)
                                         ++costo;
                                     arr[i] = lista[i-1];
                                 }
                             }
                             lista = arr;
                             ++fin;
                         }
                     }
                 }  
                }
            }
        }
        public void eliminar(int pos){
            if(inicio !=-1){
                if(inicio == fin && pos==0){
                    inicio = fin = -1;
                    lista[0] = -1;
                }else if(inicio !=fin){
                    if(pos == 0){
                        int[] arrCop = new int[lista.length];
                        for(int i = 1;i<lista.length;++i){
                            if(lista[i]!=-1){
                                arrCop[i-1] = lista[i];
                                ++costo;
                            }else{
                                arrCop[i-1] = lista[i];
                            }
                        }
                        arrCop[arrCop.length-1] = -1;
                        lista = arrCop;
                        --fin;
                    }else if(pos>0 && pos<=fin){
                        int[] arrCop = new int[lista.length];
                        for(int i = 0;i<pos;++i){
                            arrCop[i] = lista[i];
                            ++costo;
                        }
                        for(int i = pos;i<lista.length-1;++i)
                            arrCop[i] = lista[i+1];
                        arrCop[arrCop.length-1] = -1;
                        lista = arrCop;
                        --fin;
                    }
                }
            }
        }
        public void buscar(int dato){
            if(inicio != -1){
                for(int i = 0;i<=fin;++i){
                    ++costo;
                    if(lista[i]==dato)
                        break;
                }
            }//else
              //  ++costo;
            System.out.println("arreglo buscar: "+costo);
        }
        public void consultar(int pos){}
    } 
    public static void main(String[] args) {
        Main.Lista lista;
        Main.ArrLista arreglo;
        Scanner sc = new Scanner(System.in);
        int casos =  Integer.parseInt(sc.nextLine());
        String comando,tok;
        int cnt = 1,elemento;
        while(casos>0){
            System.out.println("Caso #"+(cnt++)+":");
            int comandos = Integer.parseInt(sc.nextLine());
            lista = new Main.Lista();
            arreglo = new Main.ArrLista();
            do{
                comando = sc.nextLine();
                StringTokenizer cadena = new StringTokenizer(comando);
                switch(cadena.nextToken()){
                    case "insertar":
                        tok = cadena.nextToken();
                        String aux = cadena.nextToken();
                        if(lista.insertar(Integer.parseInt(tok),Integer.parseInt(aux))){
                            arreglo.insertar(Integer.parseInt(tok),Integer.parseInt(aux));
                            System.out.println("insertar: posicion valida");
                        }else
                            System.out.println("insertar: posicion invalida");
                        break;
                    case "buscar":
                        tok = cadena.nextToken();
                        elemento = lista.buscar(Integer.parseInt(tok));
                        arreglo.buscar(Integer.parseInt(tok));
                        if(elemento == -1)
                            System.out.println("no existe numero");
                        else
                            System.out.println("buscar: "+elemento);
                        break;
                    case "consultar":
                        tok = cadena.nextToken();
                        elemento = lista.consultar(Integer.parseInt(tok));
                        arreglo.consultar(Integer.parseInt(tok));
                        if(elemento == -1)
                            System.out.println("consulta: no encontrado");
                        else
                            System.out.println("consulta: "+elemento);
                        break;
                    case "costo":
                        System.out.println("costo: "+arreglo.costo+" "+lista.costo);
                        break;
                    case "eliminar":
                        tok = cadena.nextToken();
                        if(lista.eliminar(Integer.parseInt(tok))){
                            arreglo.eliminar(Integer.parseInt(tok));
                            System.out.println("eliminar: posicion valida");
                        }else
                            System.out.println("eliminar posicion invalida");
                        break;
                }
                --comandos;
            }while(comandos>0);
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_C;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    private static Lista lista;
    public Main(){
        lista = new Lista();
    }
    class Lista{
        private Nodo inicio,fin;
        int cuenta;
        public Lista(){
            inicio = fin = null;
            cuenta = 0;
        }
        public void add(int[] arr){
            if(inicio == null)
                inicio = fin = new Nodo(arr,null);
            else{
                Nodo nuevo = new Nodo(arr,null);
                fin.next = nuevo;
                fin = nuevo;
            }
        }
        public void buscar(int[] cualidades){
            Nodo current = inicio;
            int cnt = 0;
            while(current!=null){
                int[] aux = current.arreglo;
                cnt = 0;
                if(aux.length>=cualidades.length){
                    Arrays.sort(aux);
                    for(int i = 0;i<cualidades.length;++i){
                        if(aux[i] == cualidades[i])
                            ++cnt;
                        else
                            break;
                    }
                    if(cnt == cualidades.length)
                        ++cuenta;
                }
                current = current.next;
            }
        }
    }
    class Nodo{
        private int[] arreglo;
        private Nodo next;
        public Nodo(int[] arr,Nodo next){
            arreglo = arr;
            this.next = next;
        }
    }
    public static void main(String[] args) {
        int cnt,cnt2;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int Nniñas = Integer.parseInt(sc.nextLine());
        boolean flag = false;
        while(Nniñas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                for(int i = 0;i<girlCuali.length();++i){
                    if(girlCuali.charAt(i)!=' '){
                        flag = manCuali.indexOf(String.valueOf(girlCuali.charAt(i)))!=-1;
                        if(flag)
                            ++cnt;
                    }
                }
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }
            }
            --Nniñas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_C;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    private static Lista lista;
    public Main(){
        lista = new Lista();
    }
    class Lista{
        private Nodo inicio,fin;
        int cuenta;
        public Lista(){
            inicio = fin = null;
            cuenta = 0;
        }
        public void add(int[] arr){
            if(inicio == null)
                inicio = fin = new Nodo(arr,null);
            else{
                Nodo nuevo = new Nodo(arr,null);
                fin.next = nuevo;
                fin = nuevo;
            }
        }
        public void buscar(int[] cualidades){
            Nodo current = inicio;
            int cnt = 0;
            while(current!=null){
                int[] aux = current.arreglo;
                cnt = 0;
                if(aux.length>=cualidades.length){
                    Arrays.sort(aux);
                    for(int i = 0;i<cualidades.length;++i){
                        if(aux[i] == cualidades[i])
                            ++cnt;
                        else
                            break;
                    }
                    if(cnt == cualidades.length)
                        ++cuenta;
                }
                current = current.next;
            }
        }
    }
    class Nodo{
        private int[] arreglo;
        private Nodo next;
        public Nodo(int[] arr,Nodo next){
            arreglo = arr;
            this.next = next;
        }
    }
    public static void main(String[] args) {
        int cnt,cnt2;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int Nniñas = Integer.parseInt(sc.nextLine());
        boolean flag = false;
        while(Nniñas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                for(int i = 0;i<girlCuali.length();++i){
                    if(girlCuali.charAt(i)!=' '){
                        flag = manCuali.indexOf(String.valueOf(girlCuali.charAt(i)))!=-1;
                        if(flag)
                            ++cnt;
                    }
                }
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }
            }
            --Nniñas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C_v01;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int cnt,cnt2;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int ninas = Integer.parseInt(sc.next());
        boolean flag = false;
        while(ninas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                for(int i = 0;i<girlCuali.length();++i){
                    if(girlCuali.charAt(i)!=' '){
                        flag = manCuali.indexOf(String.valueOf(girlCuali.charAt(i)))!=-1;
                        if(flag)
                            ++cnt;
                    }
                }
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }
            }
            --ninas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C_v01;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int cnt,cnt2;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int ninas = Integer.parseInt(sc.nextLine());
        boolean flag = false;
        while(ninas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                for(int i = 0;i<girlCuali.length();++i){
                    if(girlCuali.charAt(i)!=' '){
                        flag = manCuali.indexOf(String.valueOf(girlCuali.charAt(i)))!=-1;
                        if(flag)
                            ++cnt;
                    }
                }
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }
            }
            --ninas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_A;
import java.util.Arrays;
import java.util.Scanner;
import java.util.StringTokenizer;
public class Main {
    public static class Nodo {
        public int dato;
        public Nodo siguiente;
            public Nodo(int dato) {
            this.dato = dato;
            this.siguiente = null;
        }
        public Nodo(int dato,Nodo siguiente) {
            this.dato = dato;
            this.siguiente = siguiente;
        }
    }
   static class Lista {
        private Nodo inicio,fin;
        private int size,costo;
        public Lista() {
            inicio = fin = null;
            size = costo = 0;
        }
        public boolean insertar(int dato,int pos){
            if (inicio == null && pos == 0) {
                inicio = fin = new Nodo(dato, null);
                ++size;
                return true;
            }else if(inicio != null) {
                if (pos >= 0 && pos <= size) {
                    if(pos == 0){
                       Nodo nuevo = new Nodo(dato);
                       nuevo.siguiente = inicio;
                       inicio = nuevo; 
                       ++size;
                       return true;
                    }else{
                        Nodo aux,anterior;
                        aux = anterior = inicio;
                        int cnt = 0;
                        while(aux.siguiente != null){
                            aux = aux.siguiente;
                            ++cnt;
                            ++costo;
                            if(anterior.siguiente!=aux)
                                anterior = anterior.siguiente;
                            if(cnt == pos)
                                break;
                        }
                        if(pos == size){
                            aux.siguiente = new Nodo(dato,null);
                            fin = aux.siguiente;
                            ++size;
                            ++costo;
                            return true;
                        }else{
                            Nodo nuevo = new Nodo(dato,aux);
                            anterior.siguiente = nuevo;
                            ++size;
                            //++costo;
                            return true;
                        }
                    }
                }
            } 
            return false;
        }
        public int consultar(int pos){
            if(inicio == null){
                return -1;
            }else{
                if(pos >= 0 && pos < size){
                    Nodo aux = inicio;
                    for(int i = 0;i<pos;++i){
                        aux = aux.siguiente;
                        ++costo;
                    }
                    return aux.dato;
                }
            }
            return -1;
        }
        public int buscar(int dato){
            if(inicio == null){
                return -1;
            }
            else{
                Nodo aux = inicio;
                for(int i = 0;i<size;++i){
                    ++costo;
                    if(aux.dato == dato)
                        return i;
                    else
                        aux = aux.siguiente;
                }
            }
            return -1;
        }
        public boolean eliminar(int pos){
            if(inicio == null){
                return false;
            }else{
                if(pos >= 0 && pos < size){
                    if(inicio==fin){
                         inicio = fin = null;
                         --size;
                         return true;
                    }else if(pos == 0){
                        inicio = inicio.siguiente;
                        --size;
                        return true;
                    }else{
                        Nodo aux = inicio;
                        int cnt = 0;
                        while(aux.siguiente!=null){
                            ++cnt;
                            ++costo;
                            if(cnt == pos)
                                break;
                            aux = aux.siguiente;
                        }
                        if(pos == size-1){
                            fin = aux;
                            fin.siguiente = null;
                            ++costo;
                            --size;
                            return true;
                        }else{
                            aux.siguiente = aux.siguiente.siguiente;
                            ++costo;
                            --size;
                            return true;
                        }
                    }     
                }
            }
            return false;
        }
    }
    public static class ArrLista{
        private int[] lista;
        private int costo;
        private int inicio,fin;
        public ArrLista(){
            lista = new int[10];
            Arrays.fill(lista, -1);
            costo = 0;
            inicio = fin = -1;
        }
        public void modificar(){
            int[] copy = new int[(lista.length/2)+lista.length];
            System.arraycopy(lista, 0, copy, 0,lista.length);
            lista = copy;
        }
        public void insertar(int dato,int pos){
            if(pos == 0 && inicio == -1){
                lista[0] = dato; 
                inicio = fin = 0;
            }else if(inicio != -1){
                if(lista[lista.length-1] != -1)
                    modificar();
                else{
                    if(pos == 0){
                     int[] arrCopy = new int[lista.length];
                     arrCopy[0] = dato;
                     inicio = 0;
                     for(int i = 1;i<arrCopy.length;++i){
                         if(lista[i-1]!=-1){
                             arrCopy[i] = lista[i-1];
                             ++costo;
                         }else
                             arrCopy[i] =lista[i-1];
                     }
                     ++fin;
                     lista = arrCopy;
                 }else{
                     if(pos>0 && pos<=fin+1){
                         if(lista[pos]==-1 && pos==fin+1){
                             lista[pos] = dato;
                             ++fin;
                         }else if(lista[pos]==-1){
                            lista[pos] = dato;
                        } else{
                             int[] arr = new int[lista.length];
                             for(int i = 0;i<pos;++i)
                                 arr[i] = lista[i];
                             for(int i = pos;i<lista.length;++i){
                                 if(i == pos)
                                     arr[pos] = dato;
                                 else if(i>pos){
                                     if(lista[i-1]!=-1)
                                         ++costo;
                                     arr[i] = lista[i-1];
                                 }
                             }
                             lista = arr;
                             ++fin;
                         }
                     }
                 }  
                }
            }
        }
        public void eliminar(int pos){
            if(inicio !=-1){
                if(inicio == fin && pos==0){
                    inicio = fin = -1;
                    lista[0] = -1;
                }else if(inicio !=fin){
                    if(pos == 0){
                        int[] arrCop = new int[lista.length];
                        for(int i = 1;i<lista.length;++i){
                            if(lista[i]!=-1){
                                arrCop[i-1] = lista[i];
                                ++costo;
                            }else{
                                arrCop[i-1] = lista[i];
                            }
                        }
                        arrCop[arrCop.length-1] = -1;
                        lista = arrCop;
                        --fin;
                    }else if(pos>0 && pos<=fin){
                        int[] arrCop = new int[lista.length];
                        for(int i = 0;i<pos;++i){
                            arrCop[i] = lista[i];
                            ++costo;
                        }
                        for(int i = pos;i<lista.length-1;++i)
                            arrCop[i] = lista[i+1];
                        arrCop[arrCop.length-1] = -1;
                        lista = arrCop;
                        --fin;
                    }
                }
            }
        }
        public void buscar(int dato){
            if(inicio != -1){
                for(int i = 0;i<=fin;++i){
                    ++costo;
                    if(lista[i]==dato)
                        break;
                }
            }//else
              //  ++costo;
            System.out.println("arreglo buscar: "+costo);
        }
        public void consultar(int pos){}
    } 
    public static void main(String[] args) {
        Main.Lista lista;
        Main.ArrLista arreglo;
        Scanner sc = new Scanner(System.in);
        int casos =  Integer.parseInt(sc.nextLine());
        int comandos;
        String comando,tok;
        int cnt = 1,elemento;
        while(casos>0){
            System.out.println("Caso #"+(cnt++)+":");
            comandos = Integer.parseInt(sc.nextLine());
            lista = new Main.Lista();
            arreglo = new Main.ArrLista();
            do{
                comando = sc.nextLine();
                StringTokenizer cadena = new StringTokenizer(comando);
                switch(cadena.nextToken()){
                    case "insertar":
                        tok = cadena.nextToken();
                        String aux = cadena.nextToken();
                        if(lista.insertar(Integer.parseInt(tok),Integer.parseInt(aux))){
                            arreglo.insertar(Integer.parseInt(tok),Integer.parseInt(aux));
                            System.out.println("insertar: posicion valida");
                        }else
                            System.out.println("insertar: posicion invalida");
                        break;
                    case "buscar":
                        tok = cadena.nextToken();
                        elemento = lista.buscar(Integer.parseInt(tok));
                        arreglo.buscar(Integer.parseInt(tok));
                        if(elemento == -1)
                            System.out.println("no existe numero");
                        else
                            System.out.println("buscar: "+elemento);
                        break;
                    case "consultar":
                        tok = cadena.nextToken();
                        elemento = lista.consultar(Integer.parseInt(tok));
                        arreglo.consultar(Integer.parseInt(tok));
                        if(elemento == -1)
                            System.out.println("consulta: no encontrado");
                        else
                            System.out.println("consulta: "+elemento);
                        break;
                    case "costo":
                        System.out.println("costo: "+arreglo.costo+" "+lista.costo);
                        break;
                    case "eliminar":
                        tok = cadena.nextToken();
                        if(lista.eliminar(Integer.parseInt(tok))){
                            arreglo.eliminar(Integer.parseInt(tok));
                            System.out.println("eliminar: posicion valida");
                        }else
                            System.out.println("eliminar posicion invalida");
                        break;
                }
                --comandos;
            }while(comandos>0);
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_D;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Main {
    private static int cubic,casil;
    public static class Cubiculo{
        private int casillero[];
        public int llenarCasillero(int[] casillero){
            int answer = 0;
            for(int i = 0;i<casillero.length;++i){
                if(casillero[i]==0){
                    answer = i;
                    casillero[i] = 1;
                    break;
                }
            }
            return answer;
        }
    }
    public static class Lista{
        Nodo inicio,fin;
        public Lista(){
            inicio = fin = null;
        }
        public void add(String nombre,String cedula,int cubiculo,int casillero){
            if(inicio == null){
                inicio = fin = new Nodo(nombre,cedula,null,cubiculo,casillero);
            }else{
                Nodo nuevo = new Nodo(nombre,cedula,null,cubiculo,casillero);
                nuevo.next = inicio;
                inicio = nuevo;
            }
        }
        public String delete(String cedula){
            if(inicio == null)
                return "";
            else{
                if(inicio == fin && inicio.cedula.equals(cedula)){
                    String answer = inicio.nombre;
                    vaciarCasillero(inicio.cubiculo,inicio.casillero);
                    inicio = fin = null;
                    return answer;
                }else if(cedula.equals(inicio.cedula)){
                    String answer = inicio.nombre;
                    vaciarCasillero(inicio.cubiculo,inicio.casillero);
                    inicio = inicio.next;
                    return answer;
                }else if(cedula.equals(fin.cedula)){
                    String answer = fin.nombre;
                    Nodo tmp = inicio;
                    while(tmp.next!=fin){
                        tmp = tmp.next;
                    }
                    vaciarCasillero(fin.cubiculo,fin.casillero);
                    fin = tmp;
                    fin.next = null;
                    return answer;
                }else{
                    Nodo aux,anterior;
                    aux = anterior = inicio;
                    while(aux.next!=null && !aux.cedula.equals(cedula)){
                        aux = aux.next;
                        if(anterior.next!=aux)
                            anterior = anterior.next;
                    }
                    if(aux.next == null && !aux.cedula.equals(cedula))
                        return "";
                    else{
                        vaciarCasillero(aux.cubiculo,aux.casillero);
                        anterior.next = aux.next;
                        return aux.nombre;
                    }
                }        
            }
        }
    }
    public static class Nodo{
        private String nombre;
        private String cedula;
        private int cubiculo,casillero;
        private Nodo next;
        public Nodo(String name,String card,Nodo next,int cubi,int cass){
            nombre = name;
            cedula = card;
            this.next = next;
            cubiculo = cubi;
            casillero = cass;
        }
    }
    public static void vaciarCasillero(int cub,int cas){
        cubic = cub;
        casil = cas;
    }
    public static double algoritmo(int[] array){
        double cnt = 0;
        for(int i = 0;i<array.length;++i){
            if(array[i]==1)
                ++cnt;
        }
        return cnt;
    }
    public static boolean isCompletely(Cubiculo[] cubi){
        for(int i = 0;i<cubi.length;++i){
            if(!isFull(cubi[i].casillero))
                return false;
        }
        return true;
    }
    public static boolean isFull(int[] array){
        int cnt = 0;
        for(int i = 0;i<array.length;++i){
            if(array[i]==1)
                ++cnt;
        }
        return cnt == array.length;
    }
    public static void calcularCasillero(Cubiculo[] cubiculos){
        double  menor = Math.pow(2, 31);
        int indice = 0;
        for(int i = 0;i<cubiculos.length;++i){
            if(!isFull(cubiculos[i].casillero)){
                double aux = algoritmo(cubiculos[i].casillero)/(cubiculos[i].casillero.length);
                if(menor>aux){
                    menor = aux;
                    indice = i;
                }
            }
        }
        int casillero = cubiculos[indice].llenarCasillero(cubiculos[indice].casillero);
        cubic = indice+1;
        casil = casillero+1;
        System.out.println(cubic+" "+casil);
    }
    public static void main(String[] args) {
        Main.Lista lista = new Main.Lista();
        int cnt = 1;
        StringTokenizer cadena,sizeCasi;
        Scanner sc=new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int casilleros,comandos,cantidadCubiculos;
        while(casos>0){
            System.out.println("Caso #"+(cnt++)+":");
            cantidadCubiculos = Integer.parseInt(sc.nextLine());
            Main.Cubiculo[] cubi = new Main.Cubiculo[cantidadCubiculos];
            String casille = sc.nextLine();
            sizeCasi = new StringTokenizer(casille);
            for(int i = 0;i<cubi.length;++i){
                cubi[i] = new Main.Cubiculo();
                casilleros = Integer.parseInt(String.valueOf(sizeCasi.nextToken()));
                cubi[i].casillero = new int[casilleros];
            }
            comandos = Integer.parseInt(sc.nextLine());
            while(comandos>0){
                String cad = sc.nextLine();
                cadena = new StringTokenizer(cad);
                switch(cadena.nextToken()){
                    case "ingresar":
                        if(!isCompletely(cubi)){
                            String aux = cadena.nextToken();
                            cadena.nextToken();
                            calcularCasillero(cubi);
                            lista.add(aux, cadena.nextToken(),cubic,casil);
                        }else
                            System.out.println("limite alcanzado");
                        break;
                    case "salir":
                        System.out.println(lista.delete(cadena.nextToken()));
                        cubi[cubic-1].casillero[casil-1] = 0;
                        break;
                }
                cadena = null;
                --comandos;
            }
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_E;

import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Main {
    private static int cubic,casil;
    private static List<String> codigos;
    private static List<Integer> gratuito;
    public static class Cubiculo{
        private int casillero[];
        public int llenarCasillero(int[] casillero){
            int answer = 0;
            for(int i = 0;i<casillero.length;++i){
                if(casillero[i]==0){
                    answer = i;
                    casillero[i] = 1;
                    break;
                }
            }
            return answer;
        }
    }
    public static class Lista{
        Nodo inicio,fin;
        public Lista(){
            inicio = fin = null;
        }
        public void add(String nombre,String cedula,int cubiculo,int casillero){
            if(inicio == null){
                inicio = fin = new Nodo(nombre,cedula,null,cubiculo,casillero);
            }else{
                Nodo nuevo = new Nodo(nombre,cedula,null,cubiculo,casillero);
                nuevo.next = inicio;
                inicio = nuevo;
            }
        }
        public String delete(String cedula){
            if(inicio == null)
                return "";
            else{
                if(inicio == fin && inicio.cedula.equals(cedula)){
                    String answer = inicio.nombre;
                    vaciarCasillero(inicio.cubiculo,inicio.casillero);
                    inicio = fin = null;
                    return answer;
                }else if(cedula.equals(inicio.cedula)){
                    String answer = inicio.nombre;
                    vaciarCasillero(inicio.cubiculo,inicio.casillero);
                    inicio = inicio.next;
                    return answer;
                }else if(cedula.equals(fin.cedula)){
                    String answer = fin.nombre;
                    Nodo tmp = inicio;
                    while(tmp.next!=fin){
                        tmp = tmp.next;
                    }
                    vaciarCasillero(fin.cubiculo,fin.casillero);
                    fin = tmp;
                    fin.next = null;
                    return answer;
                }else{
                    Nodo aux,anterior;
                    aux = anterior = inicio;
                    while(aux.next!=null && !aux.cedula.equals(cedula)){
                        aux = aux.next;
                        if(anterior.next!=aux)
                            anterior = anterior.next;
                    }
                    if(aux.next == null && !aux.cedula.equals(cedula))
                        return "";
                    else{
                        vaciarCasillero(aux.cubiculo,aux.casillero);
                        anterior.next = aux.next;
                        return aux.nombre;
                    }
                }        
            }
        }
    }
    public static class Nodo{
        private String nombre;
        private String cedula;
        private int cubiculo,casillero;
        private Nodo next;
        public Nodo(String name,String card,Nodo next,int cubi,int cass){
            nombre = name;
            cedula = card;
            this.next = next;
            cubiculo = cubi;
            casillero = cass;
        }
    }
    public static void vaciarCasillero(int cub,int cas){
        cubic = cub;
        casil = cas;
    }
    public static double algoritmo(int[] array){
        double cnt = 0;
        for(int i = 0;i<array.length;++i){
            if(array[i]==1)
                ++cnt;
        }
        return cnt;
    }
    public static boolean isCompletely(Cubiculo[] cubi){
        for(int i = 0;i<cubi.length;++i){
            if(!isFull(cubi[i].casillero))
                return false;
        }
        return true;
    }
    public static boolean isFull(int[] array){
        int cnt = 0;
        for(int i = 0;i<array.length;++i){
            if(array[i]==1)
                ++cnt;
        }
        return cnt == array.length;
    }
    public static void calcularCasillero(Cubiculo[] cubiculos){
        double  menor = Math.pow(2, 31);
        int indice = 0;
        for(int i = 0;i<cubiculos.length;++i){
            if(!isFull(cubiculos[i].casillero)){
                double aux = algoritmo(cubiculos[i].casillero)/(cubiculos[i].casillero.length);
                if(menor>aux){
                    menor = aux;
                    indice = i;
                }
            }
        }
        int casillero = cubiculos[indice].llenarCasillero(cubiculos[indice].casillero);
        cubic = indice+1;
        casil = casillero+1;
        System.out.println(cubic+" "+casil);
    }
    public static void main(String[] args) {
        codigos = new LinkedList<>();
        gratuito = new LinkedList<>();
        Main.Lista lista = new Main.Lista();
        int cnt = 1;
        StringTokenizer cadena,sizeCasi;;
        Scanner sc=new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int casilleros,comandos,cantidadCubiculos;
        while(casos>0){
            System.out.println("Caso #"+(cnt++)+":");
            cantidadCubiculos = Integer.parseInt(sc.nextLine());
            Main.Cubiculo[] cubi = new Main.Cubiculo[cantidadCubiculos];
            String casille = sc.nextLine();
            sizeCasi = new StringTokenizer(casille);
            for(int i = 0;i<cubi.length;++i){
                cubi[i] = new Main.Cubiculo();
                casilleros = Integer.parseInt(String.valueOf(sizeCasi.nextToken()));
                cubi[i].casillero = new int[casilleros];
            }
            comandos = Integer.parseInt(sc.nextLine());
            while(comandos>0){
                String cad = sc.nextLine();
                cadena = new StringTokenizer(cad);
                switch(cadena.nextToken()){
                    case "ingresar":
                        if(!isCompletely(cubi)){
                            String aux = cadena.nextToken();
                            cadena.nextToken();
                            String cedula = cadena.nextToken();
                            if(!codigos.contains(cedula)){
                                codigos.add(cedula);
                                gratuito.add(0);
                                calcularCasillero(cubi);
                                lista.add(aux, cedula,cubic,casil);
                            }else{
                                if(gratuito.get(codigos.lastIndexOf(cedula))<3)
                                    gratuito.set(codigos.lastIndexOf(cedula),gratuito.get(codigos.lastIndexOf(cedula))+1);
                                if(gratuito.get(codigos.lastIndexOf(cedula))!=3){
                                    calcularCasillero(cubi);
                                    lista.add(aux, cedula,cubic,casil);
                                }else
                                    System.out.println("ingreso denegado");
                            }
                        }else
                            System.out.println("limite alcanzado");
                        break;
                    case "salir":
                        System.out.println(lista.delete(cadena.nextToken()));
                        cubi[cubic-1].casillero[casil-1] = 0;
                        break;
                }
                cadena = null;
                --comandos;
            }
            codigos = new LinkedList<>();
            gratuito = new LinkedList<>();
            --casos;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C_v01;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int cnt,cnt2;
	StringTokenizer cadena;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int ninas = Integer.parseInt(sc.nextLine());
	ArrayList<String> lista;
        while(ninas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                cadena = new StringTokenizer(girlCuali);
		lista = new ArrayList<>();
		while(cadena.hasMoreTokens()){
			lista.add(cadena.nextToken());
		}
		for(int i = 0;i<lista.size();++i){
			if(manCuali.contains(lista.get(i)))
				++cnt;
		}
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }
            }
            --ninas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C_v01;

import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.ArrayList;
public class Main {
    public static void main(String[] args) {
        int cnt,cnt2;
	StringTokenizer cadena;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int ninas = Integer.parseInt(sc.nextLine());
	ArrayList<String> lista;
        while(ninas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                cadena = new StringTokenizer(girlCuali);
		lista = new ArrayList<>();
		while(cadena.hasMoreTokens()){
			lista.add(cadena.nextToken());
		}
		for(int i = 0;i<lista.size();++i){
			if(manCuali.contains(lista.get(i)))
				++cnt;
		}
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }
            }
            --ninas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C_v01;

import java.util.LinkedList;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        int cnt,cnt2;
	StringTokenizer cadena;
        cnt = cnt2 = 0;
        Scanner sc = new Scanner(System.in);
        int cualidades = Integer.parseInt(sc.nextLine());
        String manCuali = sc.nextLine();
        int ninas = Integer.parseInt(sc.nextLine());
	LinkedList<String> lista;
        while(ninas>0){
            String girlCuali = sc.nextLine();
            if(girlCuali.length()>=manCuali.length()){
                cadena = new StringTokenizer(girlCuali);
                lista = new LinkedList<>();
                while(cadena.hasMoreTokens()){
                    lista.add(cadena.nextToken());
                }
                for(String c:lista){
                    if(manCuali.contains(c))
                        ++cnt;
                }
                if(cnt == cualidades){
                    cnt = 0;
                    ++cnt2;
                }else
                    cnt = 0;
            }
            --ninas;
        }
        System.out.println(cnt2);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package ejercicios_A.A_v01;

import java.util.Scanner;

public class Main {
    public static class Nodo{
        int dato;
        Nodo hijoIzquierdo,hijoDerecho,padre;
        public Nodo(final int d,final Nodo padre){
            dato = d;
            hijoIzquierdo = hijoDerecho = null;
            this.padre = padre;
        }
    }
    public static class ArbolBinario{
        Nodo raiz;
        public ArbolBinario(){
            raiz = null;
        }
        public boolean estaVacio(){
            return raiz == null;
        }
       Nodo Insert(final Nodo root,final int value,final Nodo padre){
            Nodo aux = root;
            if(root == null){
                Nodo nuevo = new Nodo(value,padre);
                return nuevo;
            }
            if(root.dato > value){
                aux = Insert(root.hijoIzquierdo,value,aux);
                root.hijoIzquierdo= aux;
            }else{
                aux = Insert(root.hijoDerecho,value,aux);
                root.hijoDerecho = aux;
            }
            return root;
       }
       public Nodo encontrarNodo(final Nodo root,final int dato){
           Nodo aux = root;
           if(root == null)
               return null;
           if(root.dato == dato)
               return root;
           if(root.dato > dato)
               aux = encontrarNodo(root.hijoIzquierdo,dato);
           else
               aux = encontrarNodo(root.hijoDerecho,dato);
           return aux;
       }
       public void calcularAncestro(final int vNodox,final int vNodoy){
           Nodo primero = encontrarNodo(raiz,vNodox);
           Nodo segundo = encontrarNodo(raiz,vNodoy);
           if(primero == null || segundo == null){
               System.out.println("-1");
           }else{
                Nodo auxSegundo = segundo;
                boolean flag = false;
                while(primero != null && !flag){
                    Nodo ramita = primero;
                    segundo = auxSegundo;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            System.out.println(ramita.dato);
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                    }
                    primero = primero.padre;
                }    
           }
       }
       public void calcularDistancia(final int vNodox,final int vNodoy){
           Nodo primero = encontrarNodo(raiz,vNodox);
           Nodo segundo = encontrarNodo(raiz,vNodoy);
           if(primero == null || segundo == null)
               System.out.println("-1");
          else{
                Nodo auxSegundo = segundo;
                int cnt1 = 0;
                int cnt2 = 0;
                boolean flag = false;
                while(primero != null && !flag){
                    Nodo ramita = primero;
                    segundo = auxSegundo;
                    cnt2 = 0;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                        ++cnt2;
                    }
                    primero = primero.padre;
                    ++cnt1;
                }
                System.out.println((--cnt1)+cnt2);         
           }
       }
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        ArbolBinario arbol;
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            int comandos = Integer.parseInt(sc.nextLine());
            arbol = new ArbolBinario();
            System.out.println("Caso #"+(cnt++)+":");
            while((comandos--)>0){
                String line = sc.nextLine();
                Scanner inLine = new Scanner(line);
                switch(inLine.next()){
                    case "agregar":
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(inLine.next()),null);
                        break;
                    case "distancia":
                        System.out.print("distancia: ");
                        arbol.calcularDistancia(Integer.parseInt(inLine.next()),Integer.parseInt(inLine.next()));
                        break;
                    case "ancestro":
                        System.out.print("ancestro: ");
                        arbol.calcularAncestro(Integer.parseInt(inLine.next()),Integer.parseInt(inLine.next()));
                        break;
                }
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
﻿
package Ejercicios_B.B_v01;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Scanner;

public class Main {
    private static ArrayList<String[]> ramas;
    private static int caso = 1;
    public static class Nodo{
        int dato;
        int posHijoMasIzquierdo;
        int posHijoMasDerecho;
        public Nodo(final int dato){
            this.dato = dato;
            posHijoMasIzquierdo = -1;
            posHijoMasDerecho = -1;
        }
    }
        public static class Arbol{
        public Nodo[] nodos;
        private int posVacia;
        private int posHijo;
        public Arbol(final int size){
            nodos = new Nodo[size];
            posVacia = 0;
            posHijo = 1;
            ramas = new ArrayList<>();
        }
        public void insertar(final String line){
            final String[] lineNodos = line.split(" ");
            if(nodos[0] == null){
                for(int i = 0;i<lineNodos.length;++i)
                    nodos[i] = new Nodo(Integer.parseInt(lineNodos[i]));
                nodos[0].posHijoMasIzquierdo = 1;
                nodos[0].posHijoMasDerecho = lineNodos.length-1;   
                posVacia = lineNodos.length;
            }else{
                if( Integer.parseInt(lineNodos[0]) == nodos[posHijo].dato){
                    if(lineNodos.length>1){
                        int cnt = 1;
                        nodos[posHijo].posHijoMasIzquierdo = posVacia;
                        for(int i = posVacia;i<nodos.length;++i){
                            nodos[i] = new Nodo(Integer.parseInt(lineNodos[cnt++]));
                            if(cnt == lineNodos.length){
                                posVacia = i+1;
                                break;
                            }
                        }
                        nodos[posHijo].posHijoMasDerecho = posVacia-1;
                       ++posHijo;
                    }
               }else{
                    if(lineNodos.length>1)
                        ramas.add(lineNodos);
                }
            }
        }
        public void rellenarArbol(){
            for(int i = 1;i<nodos.length;++i){
                for(String[] d:ramas){
                    if(Integer.parseInt(d[0]) == nodos[i].dato){
                        int cnt = 1;
                        nodos[i].posHijoMasIzquierdo = posVacia;
                        for(int k = posVacia;k<nodos.length;++k){
                            nodos[k] = new Nodo(Integer.parseInt(d[cnt++]));
                            if(cnt == d.length){
                                posVacia = k+1;
                                break;
                            }
                        }
                        nodos[i].posHijoMasDerecho = posVacia-1;
                        break;
                    }
                }
                if(posVacia >= nodos.length)
                    break;
            }
        }
    }
    private static void jugarDonkey(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        while((casos--) > 0){
            int tamañoArbol = Integer.parseInt(sc.nextLine());
            Arbol arbol = new Arbol(tamañoArbol);
            while((tamañoArbol--) > 0){
                arbol.insertar(sc.nextLine());
            }
            if(arbol.posVacia<arbol.nodos.length){
                arbol.rellenarArbol();
            }
            //imprimir(arbol);
            /*
            /////////////////////
            System.out.print("[");
            for(Nodo d:arbol.nodos){
                System.out.print(d.posHijoMasIzquierdo+"--"+d.posHijoMasDerecho+",");
            }
            System.out.print("]");
            System.out.println("");
            System.out.println("poshijo: "+arbol.posHijo+" posVacia: "+arbol.posVacia);
            ///////////////////
            System.out.println("resultado: ");*/
            System.out.println("Caso #"+(caso++)+":");
            donkeyOrder(arbol);
        }
    }
    static void donkeyOrder(final Arbol arbol){
        final Deque<Nodo> lvOrdRight = new ArrayDeque<>();
        final Deque<Nodo> lvOrdLeft = new ArrayDeque<>();
        boolean flag = false;
        int cnt = 0;
        int limite = arbol.nodos.length-1;
        System.out.print(arbol.nodos[0].dato+" ");
        lvOrdLeft.addLast(arbol.nodos[0]);
        while(true){
            while(!lvOrdLeft.isEmpty() && !flag){
                Nodo aux = lvOrdLeft.removeLast();
                if(aux.posHijoMasDerecho == -1 || aux.posHijoMasIzquierdo == -1)
                    continue;
                for(int i = aux.posHijoMasDerecho;i>=aux.posHijoMasIzquierdo;--i){
                    System.out.print(arbol.nodos[i].dato+" ");
                    ++cnt;
                    if(cnt == limite){
                        flag = true;
                        break;
                    }
                    lvOrdRight.addLast(arbol.nodos[i]);
                }
                
            }
            while(!lvOrdRight.isEmpty() && !flag){
                Nodo aux = lvOrdRight.removeLast();
                if(aux.posHijoMasDerecho == -1 || aux.posHijoMasIzquierdo == -1)
                    continue;
                for(int i = aux.posHijoMasIzquierdo;i<=aux.posHijoMasDerecho;++i){
                    System.out.print(arbol.nodos[i].dato+" ");
                    ++cnt;
                    if(cnt == limite){
                        flag = true;
                        break;
                    }
                    lvOrdLeft.addLast(arbol.nodos[i]);
                }
            }
            if(flag)
              break;
        }
        System.out.println("");
    }/*
    static void imprimir(Arbol arbol){
        System.out.println("");
            System.out.print("[");
            for(Nodo d:arbol.nodos){
                System.out.print(d.dato+",");
            }
            System.out.print("]");
            System.out.println("");
    }*/
    public static void main(String[] args) {
        jugarDonkey();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C.C_v01;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Collections;
import java.util.Deque;
import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static class Nodo{
        int llave;
        int dato;
        int[] posHijos;
        int indice;
        public Nodo(final int dato){
            this.dato = dato;
            posHijos = new int[2];
            indice = 0;
            llave = 0;
        }
    }
    public static class Arbol{
        public Nodo[] nodos;
        int cnt;
        public Arbol(final int size){
            nodos = new Nodo[size];
            cnt = 1;
        } 
        public void insertar(final String cadena){
            if(nodos[0] == null){
                Scanner aux = new Scanner(cadena);
                nodos[0] = new Nodo(aux.nextInt());
                nodos[0].posHijos[nodos[0].indice++] = cnt;
                nodos[1] = new Nodo(aux.nextInt());
                ++cnt;
            }else{
                Scanner aux = new Scanner(cadena);
                int padre = aux.nextInt();
                for(int i = 0;i<nodos.length;++i){
                    if(padre == nodos[i].dato){
                        nodos[i].posHijos[nodos[i].indice++] = cnt;
                        break;
                    }
                }
                nodos[cnt++] = new Nodo(aux.nextInt());
            }
        }
        public void asignarLlave(final int llave){
            for(int i = 0;i<nodos.length;++i){
                if(nodos[i].dato == cnt){
                    ++cnt;
                    nodos[i].llave = llave;
                    break;
                }
            }
        }
        public void calcularMejorCorte(){
            Nodo raiz;
            Stack<Integer> pila = new Stack<>();
            int cnt = 0;
            while(cnt < nodos.length-1){
                raiz = nodos[cnt++];
                if(raiz.posHijos[0] == 0)
                    continue;
                else if(raiz.posHijos[1] == 0){
                   Nodo raizN = nodos[raiz.posHijos[0]]; 
                   pila.push(realizarCalculo(raizN,raiz.posHijos[0]));
                }else{
                    Nodo raizN = nodos[raiz.posHijos[0]];
                    pila.push(realizarCalculo(raizN,raiz.posHijos[0]));
                    Nodo raizM = nodos[raiz.posHijos[1]];
                    pila.push(realizarCalculo(raizM,raiz.posHijos[1]));
                }  
            }
            System.out.println(Collections.min(pila));
        }
        public int realizarCalculo(Nodo root,final int posRoot){
            int cnt1 = 0;
            int cnt2 = 0;
            int[] arr = new int[nodos.length];
            int cnt = 1;
            arr[0] = posRoot;
            Deque<Nodo> cola = new ArrayDeque<>();
            cola.addLast(root);
            while(!cola.isEmpty()){
                Nodo suerte = cola.removeFirst();
                if(suerte.posHijos[0] == 0)
                    continue;
                else if(suerte.posHijos[1] == 0){
                    arr[cnt++] = suerte.posHijos[0];
                    cola.addLast(nodos[suerte.posHijos[0]]);
                }else{
                    arr[cnt++] = suerte.posHijos[0];
                    cola.addLast(nodos[suerte.posHijos[0]]);
                    arr[cnt++] = suerte.posHijos[1];
                    cola.addLast(nodos[suerte.posHijos[1]]);
                }
            }
            System.out.println(Arrays.toString(arr));
            boolean flag;
            for(int i = 0;i<nodos.length;++i){
                flag = false;
                for(int j = 0;j<arr.length;++j){
                    if(arr[j]!=0){
                        if(i == arr[j]){
                            flag = true;
                            break;
                        }
                    }
                }
                if(flag)
                    cnt1 += nodos[i].llave;
                else
                    cnt2 += nodos[i].llave;
            }
            System.out.println("cnt1: "+cnt1+" cnt2: "+cnt2);
            return Math.abs(cnt1-cnt2);
        }
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        while((casos--)>0){
            int numNodos = Integer.parseInt(sc.nextLine());
            Arbol arbol = new Arbol(numNodos);
            Scanner ints = new Scanner(sc.nextLine());
            while((numNodos--) > 1)
                arbol.insertar(sc.nextLine());
            //imprimirA(arbol);
            //imprimirB(arbol);
            arbol.cnt = 1;
            while(ints.hasNextInt())
                arbol.asignarLlave(ints.nextInt());
            //imprimirC(arbol);
            arbol.calcularMejorCorte();
            
        }
    }
    //temporal
    static void imprimirA(Arbol arbol){
        for(Nodo d:arbol.nodos)
                System.out.print(d.dato+",");
            System.out.println("");
    }
    static void imprimirB(Arbol arbol){
        for(Nodo d:arbol.nodos)
                System.out.println(d.posHijos[0]+"--"+d.posHijos[1]);
            System.out.println("");
    }
    static void imprimirC(Arbol arbol){
        for(Nodo d:arbol.nodos)
                System.out.println(d.llave+" ");
            System.out.println("");
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_D.D_v02;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Scanner;

public class Main {
    private static StringBuilder cadenaA;
    private static StringBuilder cadenaB;
    public static class Nodo {
        int dato,fe;
        int ocurrencia;
        Nodo hijoIzquierdo;
        Nodo hijoDerecho;
        public Nodo(int dato){
            this.dato = dato;
            this.fe = 0;
            ocurrencia = 1;
            this.hijoIzquierdo = this.hijoDerecho = null;
        }
        public Nodo(final int dato,final int ocurrencia){
            this.dato = dato;
            this.fe = 0;
            this.ocurrencia = ocurrencia;
            this.hijoIzquierdo = this.hijoDerecho = null;
        }
    }
    public static class ArbolAVL {
        private Nodo raiz;
        public int idx;
        public ArbolAVL() {
            this.raiz = null;
        }

        public Nodo getRaiz() {
            return raiz;
        }
        public Nodo buscar(int dato, Nodo r) {
            if (raiz == null) {
                return null;
            } else {
                if(r == null)
                    return null;
                if (r.dato == dato) {
                    return r;
                } else if (r.dato < dato) {
                    return buscar(dato, r.hijoDerecho);
                } else {
                    return buscar(dato, r.hijoIzquierdo);
                }
            }
        }
        public int obtenerFE(Nodo x) {
            if (x == null) {
                return -1;
            } else {
                return x.fe;
            }
        }
        public Nodo rotacionIzquierda(Nodo c) {
            Nodo aux = c.hijoIzquierdo;
            c.hijoIzquierdo = aux.hijoDerecho;
            aux.hijoDerecho = c;
            c.fe = Math.max(obtenerFE(c.hijoIzquierdo), obtenerFE(c.hijoDerecho)) + 1;
            aux.fe = Math.max(obtenerFE(aux.hijoIzquierdo), obtenerFE(aux.hijoDerecho)) + 1;
            return aux;
        }
        public Nodo rotacionDerecha(Nodo c) {
            Nodo aux = c.hijoDerecho;
            c.hijoDerecho = aux.hijoIzquierdo;
            aux.hijoIzquierdo = c;
            c.fe = Math.max(obtenerFE(c.hijoIzquierdo), obtenerFE(c.hijoDerecho)) + 1;
            aux.fe = Math.max(obtenerFE(aux.hijoIzquierdo), obtenerFE(aux.hijoDerecho)) + 1;
            return aux;
        }
        public Nodo rotacionDobleIzquierda(Nodo c) {
            Nodo tmp = c;
            c.hijoIzquierdo = rotacionDerecha(c.hijoIzquierdo);
            tmp = rotacionIzquierda(c);
            return tmp;
        }
        public Nodo rotacionDobleDerecha(Nodo c) {
            Nodo tmp = c;
            c.hijoDerecho = rotacionIzquierda(c.hijoDerecho);
            tmp = rotacionDerecha(tmp);
            return tmp;
        }
        public Nodo insertarAVL(Nodo nuevo, Nodo subArbol) {
            Nodo nuevoPadre = subArbol;
            if (nuevo.dato < subArbol.dato) {
                if (subArbol.hijoIzquierdo == null) {
                    subArbol.hijoIzquierdo = nuevo;
                } else {
                    subArbol.hijoIzquierdo = insertarAVL(nuevo, subArbol.hijoIzquierdo);
                    if (obtenerFE(subArbol.hijoIzquierdo) - obtenerFE(subArbol.hijoDerecho) == 2) {
                        if (nuevo.dato < subArbol.hijoIzquierdo.dato) {
                            nuevoPadre = rotacionIzquierda(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleIzquierda(subArbol);
                        }
                    }
                }
            } else if (nuevo.dato > subArbol.dato) {
                if (subArbol.hijoDerecho == null) {
                    subArbol.hijoDerecho = nuevo;
                } else {
                    subArbol.hijoDerecho = insertarAVL(nuevo, subArbol.hijoDerecho);
                    if (obtenerFE(subArbol.hijoDerecho) - obtenerFE(subArbol.hijoIzquierdo) == 2) {
                        if (nuevo.dato > subArbol.hijoDerecho.dato) {
                            nuevoPadre = rotacionDerecha(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleDerecha(subArbol);
                        }
                    }
                }
            } else {
                    subArbol.ocurrencia = ++subArbol.ocurrencia;             
            }
            if (subArbol.hijoIzquierdo == null && subArbol.hijoDerecho != null) {
                subArbol.fe = subArbol.hijoDerecho.fe + 1;
            } else if (subArbol.hijoDerecho == null && subArbol.hijoIzquierdo != null) {
                subArbol.fe = subArbol.hijoIzquierdo.fe + 1;
            } else {
                subArbol.fe = Math.max(obtenerFE(subArbol.hijoIzquierdo), obtenerFE(subArbol.hijoDerecho)) + 1;
            }
            return nuevoPadre;
        }
        public Nodo insertarAVLUnir(Nodo nuevo, Nodo subArbol,final int ocurr) {
            Nodo nuevoPadre = subArbol;
            if (nuevo.dato < subArbol.dato) {
                if (subArbol.hijoIzquierdo == null) {
                    subArbol.hijoIzquierdo = nuevo;
                } else {
                    subArbol.hijoIzquierdo = insertarAVLUnir(nuevo, subArbol.hijoIzquierdo,ocurr);
                    if (obtenerFE(subArbol.hijoIzquierdo) - obtenerFE(subArbol.hijoDerecho) == 2) {
                        if (nuevo.dato < subArbol.hijoIzquierdo.dato) {
                            nuevoPadre = rotacionIzquierda(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleIzquierda(subArbol);
                        }
                    }
                }
            } else if (nuevo.dato > subArbol.dato) {
                if (subArbol.hijoDerecho == null) {
                    subArbol.hijoDerecho = nuevo;
                } else {
                    subArbol.hijoDerecho = insertarAVLUnir(nuevo, subArbol.hijoDerecho,ocurr);
                    if (obtenerFE(subArbol.hijoDerecho) - obtenerFE(subArbol.hijoIzquierdo) == 2) {
                        if (nuevo.dato > subArbol.hijoDerecho.dato) {
                            nuevoPadre = rotacionDerecha(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleDerecha(subArbol);
                        }
                    }
                }
            } else {
                    subArbol.ocurrencia = subArbol.ocurrencia+ocurr;             
            }
            if (subArbol.hijoIzquierdo == null && subArbol.hijoDerecho != null) {
                subArbol.fe = subArbol.hijoDerecho.fe + 1;
            } else if (subArbol.hijoDerecho == null && subArbol.hijoIzquierdo != null) {
                subArbol.fe = subArbol.hijoIzquierdo.fe + 1;
            } else {
                subArbol.fe = Math.max(obtenerFE(subArbol.hijoIzquierdo), obtenerFE(subArbol.hijoDerecho)) + 1;
            }
            return nuevoPadre;
        }
        public void insertar(int d) {
            Nodo nuevo = new Nodo(d);
            if (raiz == null) {
                raiz = nuevo;
            } else {
                raiz = insertarAVL(nuevo, raiz);
            }
        }
        public void insertarUnir(final int d,final int ocurr) {
            Nodo nuevo = new Nodo(d,ocurr);
            if (raiz == null) {
                raiz = nuevo;
            } else {
                raiz = insertarAVLUnir(nuevo, raiz,ocurr);
            }
        }
        public boolean eliminar(int d){
            Nodo aux = raiz;
            Nodo padre = raiz;
            boolean hijoIzquierdo = true;
            while(aux.dato!=d){
                padre = aux;
                if(d<aux.dato){
                    hijoIzquierdo = true;
                    aux = aux.hijoIzquierdo;
                }else{
                   hijoIzquierdo = false;
                   aux = aux.hijoDerecho;
                }
                if(aux == null)
                    return false;
            }
            if(aux.hijoDerecho == null && aux.hijoIzquierdo == null){
                if(aux == raiz)
                    raiz = null;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo = null;
                else
                    padre.hijoDerecho = null;
            }else if(aux.hijoDerecho == null){
                if(aux == raiz)
                    raiz = aux.hijoIzquierdo;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo = aux.hijoIzquierdo;
                else
                    padre.hijoDerecho = aux.hijoDerecho;
            }else if(aux.hijoIzquierdo ==null){
                if(aux == raiz)
                    raiz = aux.hijoDerecho;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo = aux.hijoDerecho;
                else
                    padre.hijoDerecho = aux.hijoIzquierdo;
            }else{
                Nodo remplazo = obtenerNodo(aux);
                if(aux==raiz)
                    raiz = remplazo;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo=remplazo;
                else
                    padre.hijoDerecho = remplazo;
                remplazo.hijoIzquierdo = aux.hijoIzquierdo;
                }
                return true;
            }
        public Nodo obtenerNodo(Nodo remplazo){
            Nodo remPadre = remplazo;
            Nodo rempla = remplazo;
            Nodo auxiliar = remplazo.hijoDerecho;
            while(auxiliar!=null){
                remPadre = rempla;
                rempla = auxiliar;
                auxiliar = auxiliar.hijoIzquierdo;
            }
            if(rempla!=remplazo.hijoDerecho){
                remPadre.hijoIzquierdo = rempla.hijoDerecho;
                rempla.hijoDerecho = remplazo.hijoDerecho;
            }
            return rempla;
        }
        public Nodo minimo(){
            Nodo aux = raiz;
            while(aux.hijoIzquierdo!=null){
                aux = aux.hijoIzquierdo;
            }
            return aux;
        }
    }
       public static void inOrdenA(Nodo r){
            if(r!=null){
                inOrdenA(r.hijoIzquierdo);
                cadenaA.append(r.dato+"");
                inOrdenA(r.hijoDerecho);
            }
        }
        public static void inOrdenB(Nodo r){
            if(r!=null){
                inOrdenB(r.hijoIzquierdo);
                cadenaB.append(r.dato+"");
                inOrdenB(r.hijoDerecho);
            }
        }
    public static boolean contieneAVL(ArbolAVL buscado,ArbolAVL base){
        Deque<Nodo> nodosBuscados = new ArrayDeque<>();
        nodosBuscados.addLast(buscado.raiz);
        while(!nodosBuscados.isEmpty()){
            Nodo subRaiz = nodosBuscados.removeFirst();
            if(subRaiz.hijoIzquierdo!=null)
                nodosBuscados.addLast(subRaiz.hijoIzquierdo);
            if(subRaiz.hijoDerecho!=null)
                nodosBuscados.addLast(subRaiz.hijoDerecho);
            if(compararAVL(base.raiz,subRaiz))
                return true;
        }
        return false;
    }
    public static boolean compararAVL(Nodo rootBase,Nodo rootSearch){
        cadenaA = new StringBuilder();
        cadenaB = new StringBuilder();
        inOrdenA(rootBase);
        inOrdenB(rootSearch);
        if(cadenaA.toString().equals(cadenaB.toString()))
            return true;
        return false;
    }
    public static ArbolAVL unirAVL(ArbolAVL base,ArbolAVL eliminado){
        while(eliminado.raiz != null){
            Nodo elim = eliminado.minimo();
            base.insertarUnir(elim.dato,elim.ocurrencia);
            eliminado.eliminar(elim.dato);
        }
        
        return base;
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int comandos = Integer.parseInt(sc.nextLine());
        ArrayList<ArbolAVL> arboles = new ArrayList<>();
        while((comandos--)>0){
            Scanner splitLine = new Scanner(sc.nextLine());
            boolean flag = false;
            switch(splitLine.next()){
                case "crear":
                    int id = Integer.parseInt(splitLine.next());
                    if(arboles.isEmpty()){
                        for(ArbolAVL c:arboles){
                            if(c.idx == id){
                                flag = true;
                                break;
                            }
                        }
                    }
                    if(!flag){
                        ArbolAVL nuevo = new ArbolAVL();
                        nuevo.idx = id;
                        nuevo.insertar(Integer.parseInt(splitLine.next()));
                        arboles.add(nuevo);
                    }
                    break;
                case "insertar":
                    if(!arboles.isEmpty()){
                        ArbolAVL actual = null;
                        int idIn = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idIn){
                                actual = c;
                                flag = true;
                                break;
                            }
                        }
                        if(flag){
                            actual.insertar(Integer.parseInt(splitLine.next()));
                            //imprimirArbol(actual);
                        }
                    }
                    break;
                case "ocurrencia":
                    if(!arboles.isEmpty()){
                        int idInz = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idInz){
                                Nodo aux = c.buscar(Integer.parseInt(splitLine.next()),c.raiz);
                                if(aux == null){
                                    System.out.println("ocurrencia: "+0);
                                }else{
                                    System.out.println("ocurrencia: "+aux.ocurrencia);
                                }
                                break;
                            }
                        }
                    }
                    break;
                case "contiene":
                    if(!arboles.isEmpty()){
                        ArbolAVL x = null;
                        ArbolAVL y = null;
                        int idInx = Integer.parseInt(splitLine.next());
                        int idIny = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idInx){
                                x = c;
                            }else if(c.idx == idIny){
                                y = c;
                            }
                        }
                        if(x!=null && y != null){
                            if(contieneAVL(x,y))
                                System.out.println("contiene: Yes");
                            else
                                System.out.println("contiene: No");
                        }
                    }
                    break;
                case "unir":
                    if(!arboles.isEmpty()){
                        ArbolAVL x = null;
                        ArbolAVL y = null;
                        int idx = Integer.parseInt(splitLine.next());
                        int idy = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idx){
                                x = c;
                            }else if(c.idx == idy){
                                y = c;
                            }
                        }
                        if(x!=null && y != null){
                            arboles.remove(x);
                            arboles.remove(y);
                            x = unirAVL(x,y);
                            arboles.add(x);
                            y = null;
                        }
                    }
                    //break;
            }
            System.out.println("");
        }
    }
    public static void imprimirArbol(ArbolAVL arbol){
        System.out.println("arbol imprimiendose");
        cadenaA = new StringBuilder();
        inOrdenA(arbol.raiz);
        System.out.println(cadenaA.toString());
        System.out.println("");
    }/*
    public static void imprimirArbolB(ArbolAVL arbol){
        System.out.println("arbol imprimiendose");
        cadenaB = new StringBuilder();
        inOrdenC(arbol.raiz);
        System.out.println(cadenaB.toString());
        System.out.println("");
    }
    public static void inOrdenC(Nodo r){
            if(r!=null){
                inOrdenC(r.hijoIzquierdo);
                cadenaB.append(r.ocurrencia+" ");
                inOrdenC(r.hijoDerecho);
            }
   }*/
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_E.E_v01;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Scanner;

public class Main {
    public static class Nodo{
        int dato;
        Nodo hijoIzquierdo,hijoDerecho,padre;
        public Nodo(final int d,final Nodo padre){
            dato = d;
            hijoIzquierdo = hijoDerecho = null;
            this.padre = padre;
        }
    }
    public static class ArbolBinario{
        Nodo raiz;
        public ArbolBinario(){
            raiz = null;
        }
        public boolean estaVacio(){
            return raiz == null;
        }
       Nodo Insert(final Nodo root,final int value,final Nodo padre){
            Nodo aux = root;
            if(root == null){
                Nodo nuevo = new Nodo(value,padre);
                return nuevo;
            }
            if(root.dato > value){
                aux = Insert(root.hijoIzquierdo,value,aux);
                root.hijoIzquierdo= aux;
            }else{
                aux = Insert(root.hijoDerecho,value,aux);
                root.hijoDerecho = aux;
            }
            return root;
       }
       public Nodo encontrarNodo(final Nodo root,final int dato){
           Nodo aux = root;
           if(root == null)
               return null;
           if(root.dato == dato)
               return root;
           if(root.dato > dato)
               aux = encontrarNodo(root.hijoIzquierdo,dato);
           else
               aux = encontrarNodo(root.hijoDerecho,dato);
           return aux;
       }
       public void calcularAncestro(final int vNodox,final int vNodoy){
           Nodo primero = encontrarNodo(raiz,vNodox);
           Nodo segundo = encontrarNodo(raiz,vNodoy);
           if(primero == null || segundo == null){
               System.out.println("-1");
           }else{
                Nodo auxSegundo = segundo;
                boolean flag = false;
                while(primero != null && !flag){
                    Nodo ramita = primero;
                    segundo = auxSegundo;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            System.out.println(ramita.dato);
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                    }
                    primero = primero.padre;
                }    
           }
       }
       public void calcularDistancia(final int vNodox,final int vNodoy){
           Nodo primero = encontrarNodo(raiz,vNodox);
           Nodo segundo = encontrarNodo(raiz,vNodoy);
           if(primero == null || segundo == null)
               System.out.println("-1");
          else{
                Nodo auxSegundo = segundo;
                int cnt1 = 0;
                int cnt2 = 0;
                boolean flag = false;
                while(primero != null && !flag){
                    Nodo ramita = primero;
                    segundo = auxSegundo;
                    cnt2 = 0;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                        ++cnt2;
                    }
                    primero = primero.padre;
                    ++cnt1;
                }
                System.out.println((--cnt1)+cnt2);         
           }
       }
       public void contar(final int datoNodo){
           Nodo current = encontrarNodo(raiz,datoNodo);
           if(current == null)
               System.out.println(-1);
           else{
            Deque<Nodo> nodos = new ArrayDeque<>();
            nodos.addLast(current);
            int cnt = 0;
            while(!nodos.isEmpty()){
                Nodo aux = nodos.removeFirst();
                if(aux.hijoIzquierdo!=null){
                    nodos.addLast(aux.hijoIzquierdo);
                    ++cnt;
                }if(aux.hijoDerecho!=null){
                    nodos.addLast(aux.hijoDerecho);
                    ++cnt;
                }
            }
            System.out.println(cnt);  
           }
       }
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        ArbolBinario arbol;
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            int comandos = Integer.parseInt(sc.nextLine());
            arbol = new ArbolBinario();
            System.out.println("Caso #"+(cnt++)+":");
            while((comandos--)>0){
                String line = sc.nextLine();
                Scanner inLine = new Scanner(line);
                switch(inLine.next()){
                    case "agregar":
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(inLine.next()),null);
                        break;
                    case "distancia":
                        System.out.print("distancia: ");
                        arbol.calcularDistancia(Integer.parseInt(inLine.next()),Integer.parseInt(inLine.next()));
                        break;
                    case "ancestro":
                        System.out.print("ancestro: ");
                        arbol.calcularAncestro(Integer.parseInt(inLine.next()),Integer.parseInt(inLine.next()));
                        break;
                    case "contar":
                        System.out.print("contar: ");
                        arbol.contar(Integer.parseInt(inLine.next()));
                        break;
                }
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_A.A_V02;

import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static class Equipo{
        int id;
        int problemasResuletos;
        int tiempoPenalizacion;
        HashMap<Integer,Integer> puntos;
        int acumulador;
        public Equipo(){
            problemasResuletos = 0;
            tiempoPenalizacion = 0;
            acumulador = 0;
            puntos = new HashMap<Integer,Integer>();
        }
        public Equipo(final int id,final int pRes,final int tPe){
            this.id = id;
            problemasResuletos = pRes;
            tiempoPenalizacion = tPe;
        }
        @Override
        public String toString(){
            return id+" "+problemasResuletos+" "+tiempoPenalizacion;
        }
    }
    private static Comparator<Equipo> comp = new Comparator<Equipo>(){

        @Override
        public int compare(Equipo o1, Equipo o2) {
            if(o1.problemasResuletos == o2.problemasResuletos){
                if(o1.tiempoPenalizacion>o2.tiempoPenalizacion)
                    return 1;
                if(o1.tiempoPenalizacion<o2.tiempoPenalizacion)
                    return -1;
                if(o1.tiempoPenalizacion==o2.tiempoPenalizacion){
                    if(o1.id>o2.id)
                        return 1;
                    else
                        return -1;
                }
            }
            if(o1.problemasResuletos>o2.problemasResuletos)
                return -1;
            if(o1.problemasResuletos<o2.problemasResuletos)
                return 1;
            return 0;
        }
        
    };
public static class Hash {
    Equipo[] arreglo;
    Equipo nada;
    int tamanio,contador;
    boolean vacio;
    Hash(final int tam){
        tamanio = tam;
        arreglo = new Equipo[tam];
        nada = new Equipo();
        Arrays.fill(arreglo,nada);
        vacio = true;
    }
    public void put(final int id,final Equipo elemento){
        int indiceArreglo = id % (arreglo.length - 1);
        while (!arreglo[indiceArreglo].equals(nada)) {
            indiceArreglo++;
            indiceArreglo %= tamanio;
        }
        arreglo[indiceArreglo] = elemento;
        vacio = false;
    }
    public void putOne(final int id,final Equipo elemento){
        arreglo[0] = elemento;
        vacio = false;
    }
    public boolean isEmpty(){
        return vacio;
    }
    public Equipo getOne(int elemento){
        if((arreglo[0].id) == elemento)
           return arreglo[0];
        return null;
    }
    //
    public boolean buscarClarve(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return true;
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return false;
    }
    public Equipo get(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return arreglo[indiceArreglo];
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return null;
    }
}
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            Scanner inSplit = new Scanner(sc.nextLine());
            int size = inSplit.nextInt();
            int nLineas = inSplit.nextInt();
            Hash contenedor = new Hash(size);
            System.out.println("Caso #"+(cnt++)+":");
            if(size == 1){
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    Equipo equipo = contenedor.getOne(id);
                    String resuelto = inSplit.next();
                    if (!resuelto.equals("C")) {
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.puntos.put(example, 20);
                        } else {
                            equipo.puntos.replace(example, equipo.puntos.get(example) + 20);
                        }
                        //equipo.acumulador += 20;
                    } else {
                        //equipo.tiempoPenalizacion += (tiempo+equipo.acumulador);
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.tiempoPenalizacion += tiempo;
                        } else {
                            equipo.tiempoPenalizacion += tiempo + equipo.puntos.get(example);
                        }
                        //equipo.acumulador = 0;
                        equipo.problemasResuletos += 1;
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.putOne(id, equipo);
                }
            }  
            }else{
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    if(contenedor.buscarClarve(id)){
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        Equipo equipo = contenedor.get(id);
                        String resuelto = inSplit.next();
                        if(!resuelto.equals("C")){
                            if(!equipo.puntos.containsKey(example))
                                equipo.puntos.put(example,20);
                            else
                                equipo.puntos.replace(example, equipo.puntos.get(example)+20);
                            //equipo.acumulador += 20;
                        }else{
                            //equipo.tiempoPenalizacion += (tiempo+equipo.acumulador);
                            if(!equipo.puntos.containsKey(example))
                                equipo.tiempoPenalizacion += tiempo;
                            else
                                equipo.tiempoPenalizacion += tiempo+equipo.puntos.get(example);
                            //equipo.acumulador = 0;
                            equipo.problemasResuletos +=1;
                        }
                    }else{
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        String resuelto = inSplit.next();
                        Equipo equipo = new Equipo();
                        equipo.id = id;
                        if(!resuelto.equals("C")){
                                equipo.puntos.put(example,20);
                        }else{
                            equipo.tiempoPenalizacion = tiempo;
                            equipo.problemasResuletos = 1;
                        }
                        contenedor.put(id, equipo);
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.put(id, equipo);
                }
            }
            redondear(contenedor,contenedor.arreglo.length);
            Arrays.sort(contenedor.arreglo,comp);
            }
            for(Equipo eq:contenedor.arreglo){
                if(eq.id == 0)
                    continue;
                System.out.println(eq);
            }
        }
    }
    public static void redondear(final Hash contenedor,final int length){
        for(int i = 0;i<length;++i){
            if(contenedor.arreglo[i].problemasResuletos == 0)
                contenedor.arreglo[i].tiempoPenalizacion = 0;     
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_B.B_v01;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            HashMap<Integer,Integer> hash = new HashMap<>();
            Deque<Integer> numbers = new ArrayDeque<>();
            sc.nextLine();
            Scanner linea = new Scanner(sc.nextLine());
            while(linea.hasNextInt()){
                if(!hash.isEmpty()){
                    int next = linea.nextInt();
                    if(hash.containsKey(next))
                        hash.replace(next, hash.get(next)+1);
                    else{
                       numbers.addLast(next);
                       hash.put(next, 1); 
                    }
                }else{
                    int next = linea.nextInt();
                    numbers.addLast(next);
                    hash.put(next, 1);
                }
            }
            while(!numbers.isEmpty()){
                int output = numbers.removeFirst();
                //System.out.println(output+" "+hash.get(output));
                System.out.println(output+" "+hash.remove(output));
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C.C_V01;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    private static int cnt;
    private static HashMap<String,Persona> visitados;
    public static class Persona{
        String llave;
        Deque<Persona> amigos;
        //int nAmigos;
        public Persona(final String llave/*,final int nAmigos*/){
            this.llave = llave;
            amigos = new ArrayDeque<>();
            //this.nAmigos = nAmigos;
        }
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cntX = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cntX++)+":");
            HashMap<String,Persona> redSocial = new HashMap<>();
            int lineas = Integer.parseInt(sc.nextLine());
            while((lineas--)>0){
                Scanner split = new Scanner(sc.nextLine());
                Persona A;
                Persona B;
                cnt = 2;
                if(redSocial.isEmpty()){
                    A = new Persona(split.next());
                    B = new Persona(split.next());
                    A.amigos.addLast(B);
                    B.amigos.addLast(A);
                    redSocial.put(A.llave,A);
                    redSocial.put(B.llave, B);
                }else{
                    String llaveA = split.next();
                    String llaveB = split.next();
                    if(!redSocial.containsKey(llaveA) && !redSocial.containsKey(llaveB)){
                        A = new Persona(llaveA);
                        B = new Persona(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                        redSocial.put(llaveA,A);
                        redSocial.put(llaveB, B);
                    }else if(redSocial.containsKey(llaveA) && !redSocial.containsKey(llaveB)){
                        A = redSocial.get(llaveA);
                        B = new Persona(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                        redSocial.put(llaveB, B);
                    }else if(!redSocial.containsKey(llaveA) && redSocial.containsKey(llaveB)){
                        A = new Persona(llaveA);
                        B = redSocial.get(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                        redSocial.put(llaveA,A);
                    }else{
                        A = redSocial.get(llaveA);
                        B = redSocial.get(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                    }
                }
                Deque<Persona> a = new ArrayDeque(A.amigos);
                Deque<Persona> b = new ArrayDeque(B.amigos);
                visitados = new HashMap<>();
                visitados.put(A.llave, A);
                visitados.put(B.llave, B);
                contarAmigos(a);
                //System.out.println("amigos: "+cnt);
                contarAmigos(b);
                System.out.println(cnt);
            }
        }
    }
    public static void contarAmigos(Deque<Persona> a){
        while(!a.isEmpty()){
            Persona amigo = a.removeFirst();
            if(visitados.containsKey(amigo.llave))
                continue;
            //System.out.println(amigo.llave);
            Deque<Persona> per = new ArrayDeque<>(amigo.amigos);
            while(!per.isEmpty()){
                Persona friend = per.removeFirst();
                if(visitados.containsKey(friend.llave))
                    continue;
                a.addLast(friend);
            }
            visitados.put(amigo.llave, amigo);
            ++cnt;
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;


public class Main {//esta version es depronto un poco mejor que la 1
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int size = Integer.parseInt(sc.nextLine());
        Scanner split = new Scanner(sc.nextLine());
        int cnt = 0;
        int[] arr = new int[size];
        Queue<Integer> cola = new PriorityQueue<>(comp); 
        while(split.hasNextInt()){
            cola.add(split.nextInt());
            if(cnt<2)
                System.out.println(-1);
            else{
                 Queue<Integer> colita = new PriorityQueue<>(cola);
                 System.out.println(colita.poll()*colita.poll()*colita.poll());
            }
            ++cnt;
        }   
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios.Ejercicio_B.B_V02;

import java.util.ArrayDeque;
import java.util.Collections;
import java.util.Deque;
import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        while((casos--)>0){
            Deque<Integer> dequesito = new ArrayDeque<>();
            Deque<Integer> ponquesito = new ArrayDeque<>();
            Scanner fl = new Scanner(sc.nextLine());
            fl.next();
            int pos = fl.nextInt();
            fl = new Scanner(sc.nextLine());
            int cnt = 0;
            while(fl.hasNextInt()){
                dequesito.addLast(fl.nextInt());
                ponquesito.addLast(cnt++);
            }
            cnt = 1;
            while (true) {
                int max = Collections.max(dequesito);
                if (dequesito.getFirst() < max) {
                    dequesito.addLast(dequesito.removeFirst());
                    ponquesito.addLast(ponquesito.removeFirst());
                } else {
                    if (ponquesito.getFirst() == pos) {
                        break;
                    }
                    dequesito.removeFirst();
                    ponquesito.removeFirst();
                    ++cnt;
                }
            }
            System.out.println(cnt);
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_C.C_v01;

import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int n,k,cnt = 1;
        int casos = Integer.parseInt(sc.nextLine());
        Scanner split;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            split = new Scanner(sc.nextLine());
            int arr[] = new int[split.nextInt()];
            k = split.nextInt();
            n = 0;
            split = new Scanner(sc.nextLine());
            while(n<arr.length)
                arr[n++] = split.nextInt();
            while((k--)>0){
                split = new Scanner(sc.nextLine());
                switch(split.next()){
                    case "cambio":
                        arr[split.nextInt()-1] = split.nextInt();
                        break;
                    case "multiplicar":
                        int a = split.nextInt();
                        n = split.nextInt()-1;
                        int acumm = arr[a-1];
                        if(acumm == 0)
                            System.out.println("0");
                        else{
                            for(int i = a;i<=n;++i){
                                acumm *= arr[i];
                                if(arr[i] == 0){
                                    System.out.println("0");
                                    break;
                                }
                            }
                            if(acumm<0)
                                System.out.println("-");
                            else if(acumm>0)
                                System.out.println("+");
                        }
                        break;
                } 
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package ejercicios_A.A_v01;

import java.util.Scanner;

public class Main {
    public static class Nodo{
        int dato;
        Nodo hijoIzquierdo,hijoDerecho,padre;
        public Nodo(final int d,final Nodo padre){
            dato = d;
            hijoIzquierdo = hijoDerecho = null;
            this.padre = padre;
        }
    }
    public static class ArbolBinario{
        Nodo raiz;
        public ArbolBinario(){
            raiz = null;
        }
        public boolean estaVacio(){
            return raiz == null;
        }
       Nodo Insert(final Nodo root,final int value,final Nodo padre){
            Nodo aux = root;
            if(root == null){
                Nodo nuevo = new Nodo(value,padre);
                return nuevo;
            }
            if(root.dato > value){
                aux = Insert(root.hijoIzquierdo,value,aux);
                root.hijoIzquierdo= aux;
            }else{
                aux = Insert(root.hijoDerecho,value,aux);
                root.hijoDerecho = aux;
            }
            return root;
       }
       public Nodo encontrarNodo(final Nodo root,final int dato){
           Nodo aux = root;
           if(root == null)
               return null;
           if(root.dato == dato)
               return root;
           if(root.dato > dato)
               aux = encontrarNodo(root.hijoIzquierdo,dato);
           else
               aux = encontrarNodo(root.hijoDerecho,dato);
           return aux;
       }
       public void calcularAncestro(final int vNodox,final int vNodoy){
           Nodo primero = encontrarNodo(raiz,vNodox);
           Nodo segundo = encontrarNodo(raiz,vNodoy);
           if(primero == null || segundo == null){
               System.out.println("-1");
           }else{
                Nodo auxSegundo = segundo;
                boolean flag = false;
                while(primero != null && !flag){
                    Nodo ramita = primero;
                    segundo = auxSegundo;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            System.out.println(ramita.dato);
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                    }
                    primero = primero.padre;
                }    
           }
       }
       public void calcularDistancia(final int vNodox,final int vNodoy){
           Nodo primero = encontrarNodo(raiz,vNodox);
           Nodo segundo = encontrarNodo(raiz,vNodoy);
           if(primero == null || segundo == null)
               System.out.println("-1");
          else{
                Nodo auxSegundo = segundo;
                int cnt1 = 0;
                int cnt2 = 0;
                boolean flag = false;
                while(primero != null && !flag){
                    Nodo ramita = primero;
                    segundo = auxSegundo;
                    cnt2 = 0;
                    while(segundo != null){
                        if(ramita.dato == segundo.dato){
                            flag = true;
                            break;
                        }
                        segundo = segundo.padre;
                        ++cnt2;
                    }
                    primero = primero.padre;
                    ++cnt1;
                }
                System.out.println((--cnt1)+cnt2);         
           }
       }
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        ArbolBinario arbol;
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            int comandos = Integer.parseInt(sc.nextLine());
            arbol = new ArbolBinario();
            System.out.println("Caso #"+(cnt++)+":");
            while((comandos--)>0){
                String line = sc.nextLine();
                Scanner inLine = new Scanner(line);
                switch(inLine.next()){
                    case "agregar":
                        arbol.raiz = arbol.Insert(arbol.raiz, Integer.parseInt(inLine.next()),null);
                        break;
                    case "distancia":
                        System.out.print("distancia: ");
                        arbol.calcularDistancia(Integer.parseInt(inLine.next()),Integer.parseInt(inLine.next()));
                        break;
                    case "ancestro":
                        System.out.print("ancestro: ");
                        arbol.calcularAncestro(Integer.parseInt(inLine.next()),Integer.parseInt(inLine.next()));
                        break;
                }
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios_B.B_v01;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Scanner;

public class Main {
   static ArrayList<String[]> ramas;
   static int caso = 1;
    public static class Nodo{
        int dato;
        int posHijoMasIzquierdo;
        int posHijoMasDerecho;
        public Nodo(final int dato){
            this.dato = dato;
            posHijoMasIzquierdo = -1;
            posHijoMasDerecho = -1;
        }
    }
    public static class Arbol {

        public Nodo[] nodos;
        private int posVacia;
        private int posHijo;

        public Arbol(final int size) {
            nodos = new Nodo[size];
            posVacia = 0;
            posHijo = 1;
            ramas = new ArrayList<>();
        }

        public void insertar(final String line) {
            final String[] lineNodos = line.split(" ");
            if (nodos[0] == null) {
                for (int i = 0; i < lineNodos.length; ++i) {
                    nodos[i] = new Nodo(Integer.parseInt(lineNodos[i]));
                }
                nodos[0].posHijoMasIzquierdo = 1;
                nodos[0].posHijoMasDerecho = lineNodos.length - 1;
                posVacia = lineNodos.length;
            } else {
                if (Integer.parseInt(lineNodos[0]) == nodos[posHijo].dato) {
                    if (lineNodos.length > 1) {
                        int cnt = 1;
                        nodos[posHijo].posHijoMasIzquierdo = posVacia;
                        for (int i = posVacia; i < nodos.length; ++i) {
                            nodos[i] = new Nodo(Integer.parseInt(lineNodos[cnt++]));
                            if (cnt == lineNodos.length) {
                                posVacia = i + 1;
                                break;
                            }
                        }
                        nodos[posHijo].posHijoMasDerecho = posVacia - 1;
                        ++posHijo;
                    }
                } else {
                    if (lineNodos.length > 1) {
                        ramas.add(lineNodos);
                    }
                }
            }
        }

        public void rellenarArbol() {
            for (int i = 1; i < nodos.length; ++i) {
                for (String[] d : ramas) {
                    if (Integer.parseInt(d[0]) == nodos[i].dato) {
                        int cnt = 1;
                        nodos[i].posHijoMasIzquierdo = posVacia;
                        for (int k = posVacia; k < nodos.length; ++k) {
                            nodos[k] = new Nodo(Integer.parseInt(d[cnt++]));
                            if (cnt == d.length) {
                                posVacia = k + 1;
                                break;
                            }
                        }
                        nodos[i].posHijoMasDerecho = posVacia - 1;
                        break;
                    }
                }
                if (posVacia >= nodos.length) {
                    break;
                }
            }
        }
    }
    private static void jugarDonkey(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        while((casos--) > 0){
            int tamañoArbol = Integer.parseInt(sc.nextLine());
            Arbol arbol = new Arbol(tamañoArbol);
            while((tamañoArbol--) > 0){
                arbol.insertar(sc.nextLine());
            }
            if(arbol.posVacia<arbol.nodos.length){
                arbol.rellenarArbol();
            }
            System.out.println("Caso #"+(caso++)+":");
            donkeyOrder(arbol);
        }
    }
    static void donkeyOrder(final Arbol arbol){
        final Deque<Nodo> lvOrdRight = new ArrayDeque<>();
        final Deque<Nodo> lvOrdLeft = new ArrayDeque<>();
        boolean flag = false;
        int cnt = 0;
        int limite = arbol.nodos.length-1;
        System.out.print(arbol.nodos[0].dato+" ");
        lvOrdLeft.addLast(arbol.nodos[0]);
        while(true){
            while(!lvOrdLeft.isEmpty() && !flag){
                Nodo aux = lvOrdLeft.removeLast();
                if(aux.posHijoMasDerecho == -1 || aux.posHijoMasIzquierdo == -1)
                    continue;
                for(int i = aux.posHijoMasDerecho;i>=aux.posHijoMasIzquierdo;--i){
                    System.out.print(arbol.nodos[i].dato+" ");
                    ++cnt;
                    if(cnt == limite){
                        flag = true;
                        break;
                    }
                    lvOrdRight.addLast(arbol.nodos[i]);
                }
                
            }
            while(!lvOrdRight.isEmpty() && !flag){
                Nodo aux = lvOrdRight.removeLast();
                if(aux.posHijoMasDerecho == -1 || aux.posHijoMasIzquierdo == -1)
                    continue;
                for(int i = aux.posHijoMasIzquierdo;i<=aux.posHijoMasDerecho;++i){
                    System.out.print(arbol.nodos[i].dato+" ");
                    ++cnt;
                    if(cnt == limite){
                        flag = true;
                        break;
                    }
                    lvOrdLeft.addLast(arbol.nodos[i]);
                }
            }
            if(flag)
              break;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        jugarDonkey();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios_B.B_v01;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Scanner;

public class Main {
    static ArrayList<String[]> ramas;
    static int caso = 1;
    public static class Nodo{
        int dato;
        int posHijoMasIzquierdo;
        int posHijoMasDerecho;
        public Nodo(final int dato){
            this.dato = dato;
            posHijoMasIzquierdo = -1;
            posHijoMasDerecho = -1;
        }
    }
    public static class Arbol {

        public Nodo[] nodos;
        int posVacia;
        int posHijo;

        public Arbol(final int size) {
            nodos = new Nodo[size];
            posVacia = 0;
            posHijo = 1;
            ramas = new ArrayList<>();
        }

        public void insertar(final String line) {
            final String[] lineNodos = line.split(" ");
            if (nodos[0] == null) {
                for (int i = 0; i < lineNodos.length; ++i) {
                    nodos[i] = new Nodo(Integer.parseInt(lineNodos[i]));
                }
                nodos[0].posHijoMasIzquierdo = 1;
                nodos[0].posHijoMasDerecho = lineNodos.length - 1;
                posVacia = lineNodos.length;
            } else {
                if (Integer.parseInt(lineNodos[0]) == nodos[posHijo].dato) {
                    if (lineNodos.length > 1) {
                        int cnt = 1;
                        nodos[posHijo].posHijoMasIzquierdo = posVacia;
                        for (int i = posVacia; i < nodos.length; ++i) {
                            nodos[i] = new Nodo(Integer.parseInt(lineNodos[cnt++]));
                            if (cnt == lineNodos.length) {
                                posVacia = i + 1;
                                break;
                            }
                        }
                        nodos[posHijo].posHijoMasDerecho = posVacia - 1;
                        ++posHijo;
                    }
                } else {
                    if (lineNodos.length > 1) {
                        ramas.add(lineNodos);
                    }
                }
            }
        }

        public void rellenarArbol() {
            for (int i = 1; i < nodos.length; ++i) {
                for (String[] d : ramas) {
                    if (Integer.parseInt(d[0]) == nodos[i].dato) {
                        int cnt = 1;
                        nodos[i].posHijoMasIzquierdo = posVacia;
                        for (int k = posVacia; k < nodos.length; ++k) {
                            nodos[k] = new Nodo(Integer.parseInt(d[cnt++]));
                            if (cnt == d.length) {
                                posVacia = k + 1;
                                break;
                            }
                        }
                        nodos[i].posHijoMasDerecho = posVacia - 1;
                        break;
                    }
                }
                if (posVacia >= nodos.length) {
                    break;
                }
            }
        }
    }
    static void jugarDonkey(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        while((casos--) > 0){
            int tamanoArbol = Integer.parseInt(sc.nextLine());
            Arbol arbol = new Arbol(tamanoArbol);
            while((tamanoArbol--) > 0){
                arbol.insertar(sc.nextLine());
            }
            if(arbol.posVacia<arbol.nodos.length){
                arbol.rellenarArbol();
            }
            System.out.println("Caso #"+(caso++)+":");
            donkeyOrder(arbol);
        }
    }
    static void donkeyOrder(final Arbol arbol){
        final Deque<Nodo> lvOrdRight = new ArrayDeque<>();
        final Deque<Nodo> lvOrdLeft = new ArrayDeque<>();
        boolean flag = false;
        int cnt = 0;
        int limite = arbol.nodos.length-1;
        System.out.print(arbol.nodos[0].dato+" ");
        lvOrdLeft.addLast(arbol.nodos[0]);
        while(true){
            while(!lvOrdLeft.isEmpty() && !flag){
                Nodo aux = lvOrdLeft.removeLast();
                if(aux.posHijoMasDerecho == -1 || aux.posHijoMasIzquierdo == -1)
                    continue;
                for(int i = aux.posHijoMasDerecho;i>=aux.posHijoMasIzquierdo;--i){
                    System.out.print(arbol.nodos[i].dato+" ");
                    ++cnt;
                    if(cnt == limite){
                        flag = true;
                        break;
                    }
                    lvOrdRight.addLast(arbol.nodos[i]);
                }
                
            }
            while(!lvOrdRight.isEmpty() && !flag){
                Nodo aux = lvOrdRight.removeLast();
                if(aux.posHijoMasDerecho == -1 || aux.posHijoMasIzquierdo == -1)
                    continue;
                for(int i = aux.posHijoMasIzquierdo;i<=aux.posHijoMasDerecho;++i){
                    System.out.print(arbol.nodos[i].dato+" ");
                    ++cnt;
                    if(cnt == limite){
                        flag = true;
                        break;
                    }
                    lvOrdLeft.addLast(arbol.nodos[i]);
                }
            }
            if(flag)
              break;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        jugarDonkey();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C.C_v01;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Collections;
import java.util.Deque;
import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static class Nodo{
        int llave;
        int dato;
        int[] posHijos;
        int indice;
        public Nodo(final int dato){
            this.dato = dato;
            posHijos = new int[2];
            indice = 0;
            llave = 0;
        }
    }
    public static class Arbol{
        public Nodo[] nodos;
        int cnt;
        public Arbol(final int size){
            nodos = new Nodo[size];
            cnt = 1;
        }
        public void insertar(final int a,final int b){
            if(nodos[0] == null){
                nodos[0] = new Nodo(a);
                nodos[0].posHijos[nodos[0].indice++] = cnt;
                nodos[1] = new Nodo(b);
                ++cnt;
            }else{
                int padre = a;
                for(int i = 0;i<nodos.length;++i){
                    if(padre == nodos[i].dato){
                        nodos[i].posHijos[nodos[i].indice++] = cnt;
                        break;
                    }
                }
                nodos[cnt++] = new Nodo(b);
            }
        }
        public void asignarLlave(final int llave){
            for(int i = 0;i<nodos.length;++i){
                if(nodos[i].dato == cnt){
                    ++cnt;
                    nodos[i].llave = llave;
                    break;
                }
            }
        }
        public void calcularMejorCorte(){
            Nodo raiz;
            Stack<Integer> pila = new Stack<>();
            int cnt = 0;
            while(cnt < nodos.length-1){
                raiz = nodos[cnt++];
                if(raiz.posHijos[0] == 0)
                    continue;
                else if(raiz.posHijos[1] == 0){
                   Nodo raizN = nodos[raiz.posHijos[0]]; 
                   pila.push(realizarCalculo(raizN,raiz.posHijos[0]));
                }else{
                    Nodo raizN = nodos[raiz.posHijos[0]];
                    pila.push(realizarCalculo(raizN,raiz.posHijos[0]));
                    Nodo raizM = nodos[raiz.posHijos[1]];
                    pila.push(realizarCalculo(raizM,raiz.posHijos[1]));
                }  
            }
            System.out.println(Collections.min(pila));
        }
        public int realizarCalculo(Nodo root,final int posRoot){
            int cnt1 = 0;
            int cnt2 = 0;
            int[] arr = new int[nodos.length];
            int cnt = 1;
            arr[0] = posRoot;
            Deque<Nodo> cola = new ArrayDeque<>();
            cola.addLast(root);
            while(!cola.isEmpty()){
                Nodo suerte = cola.removeFirst();
                if(suerte.posHijos[0] == 0)
                    continue;
                else if(suerte.posHijos[1] == 0){
                    arr[cnt++] = suerte.posHijos[0];
                    cola.addLast(nodos[suerte.posHijos[0]]);
                }else{
                    arr[cnt++] = suerte.posHijos[0];
                    cola.addLast(nodos[suerte.posHijos[0]]);
                    arr[cnt++] = suerte.posHijos[1];
                    cola.addLast(nodos[suerte.posHijos[1]]);
                }
            }
            boolean flag;
            for(int i = 0;i<nodos.length;++i){
                flag = false;
                for(int j = 0;j<arr.length;++j){
                    if(arr[j]!=0){
                        if(i == arr[j]){
                            flag = true;
                            break;
                        }
                    }
                }
                if(flag)
                    cnt1 += nodos[i].llave;
                else
                    cnt2 += nodos[i].llave;
            }
            return Math.abs(cnt1-cnt2);
        }
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cntV = 1;
        while((casos--)>0){
            int numNodos = Integer.parseInt(sc.nextLine());
            Arbol arbol = new Arbol(numNodos);
            Scanner ints = new Scanner(sc.nextLine());
            while((numNodos--) > 1)
                arbol.insertar(sc.nextInt(),sc.nextInt());
            sc.nextLine();
            arbol.cnt = 1;
            while(ints.hasNextInt())
                arbol.asignarLlave(ints.nextInt());
            System.out.println("Caso #"+(cntV++)+":");
            arbol.calcularMejorCorte();
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_D.D_v02;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Scanner;

public class Main {
    private static StringBuilder cadenaA;
    private static StringBuilder cadenaB;
    public static class Nodo {
        int dato,fe;
        int ocurrencia;
        Nodo hijoIzquierdo;
        Nodo hijoDerecho;
        public Nodo(int dato){
            this.dato = dato;
            this.fe = 0;
            ocurrencia = 1;
            this.hijoIzquierdo = this.hijoDerecho = null;
        }
        public Nodo(final int dato,final int ocurrencia){
            this.dato = dato;
            this.fe = 0;
            this.ocurrencia = ocurrencia;
            this.hijoIzquierdo = this.hijoDerecho = null;
        }
    }
    public static class ArbolAVL {
        private Nodo raiz;
        public int idx;
        public ArbolAVL() {
            this.raiz = null;
        }

        public Nodo getRaiz() {
            return raiz;
        }
        public Nodo buscar(int dato, Nodo r) {
            if (raiz == null) {
                return null;
            } else {
                if(r == null)
                    return null;
                if (r.dato == dato) {
                    return r;
                } else if (r.dato < dato) {
                    return buscar(dato, r.hijoDerecho);
                } else {
                    return buscar(dato, r.hijoIzquierdo);
                }
            }
        }
        public int obtenerFE(Nodo x) {
            if (x == null) {
                return -1;
            } else {
                return x.fe;
            }
        }
        public Nodo rotacionIzquierda(Nodo c) {
            Nodo aux = c.hijoIzquierdo;
            c.hijoIzquierdo = aux.hijoDerecho;
            aux.hijoDerecho = c;
            c.fe = Math.max(obtenerFE(c.hijoIzquierdo), obtenerFE(c.hijoDerecho)) + 1;
            aux.fe = Math.max(obtenerFE(aux.hijoIzquierdo), obtenerFE(aux.hijoDerecho)) + 1;
            return aux;
        }
        public Nodo rotacionDerecha(Nodo c) {
            Nodo aux = c.hijoDerecho;
            c.hijoDerecho = aux.hijoIzquierdo;
            aux.hijoIzquierdo = c;
            c.fe = Math.max(obtenerFE(c.hijoIzquierdo), obtenerFE(c.hijoDerecho)) + 1;
            aux.fe = Math.max(obtenerFE(aux.hijoIzquierdo), obtenerFE(aux.hijoDerecho)) + 1;
            return aux;
        }
        public Nodo rotacionDobleIzquierda(Nodo c) {
            Nodo tmp = c;
            c.hijoIzquierdo = rotacionDerecha(c.hijoIzquierdo);
            tmp = rotacionIzquierda(c);
            return tmp;
        }
        public Nodo rotacionDobleDerecha(Nodo c) {
            Nodo tmp = c;
            c.hijoDerecho = rotacionIzquierda(c.hijoDerecho);
            tmp = rotacionDerecha(tmp);
            return tmp;
        }
        public Nodo insertarAVL(Nodo nuevo, Nodo subArbol) {
            Nodo nuevoPadre = subArbol;
            if (nuevo.dato < subArbol.dato) {
                if (subArbol.hijoIzquierdo == null) {
                    subArbol.hijoIzquierdo = nuevo;
                } else {
                    subArbol.hijoIzquierdo = insertarAVL(nuevo, subArbol.hijoIzquierdo);
                    if (obtenerFE(subArbol.hijoIzquierdo) - obtenerFE(subArbol.hijoDerecho) == 2) {
                        if (nuevo.dato < subArbol.hijoIzquierdo.dato) {
                            nuevoPadre = rotacionIzquierda(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleIzquierda(subArbol);
                        }
                    }
                }
            } else if (nuevo.dato > subArbol.dato) {
                if (subArbol.hijoDerecho == null) {
                    subArbol.hijoDerecho = nuevo;
                } else {
                    subArbol.hijoDerecho = insertarAVL(nuevo, subArbol.hijoDerecho);
                    if (obtenerFE(subArbol.hijoDerecho) - obtenerFE(subArbol.hijoIzquierdo) == 2) {
                        if (nuevo.dato > subArbol.hijoDerecho.dato) {
                            nuevoPadre = rotacionDerecha(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleDerecha(subArbol);
                        }
                    }
                }
            } else {
                    subArbol.ocurrencia = ++subArbol.ocurrencia;             
            }
            if (subArbol.hijoIzquierdo == null && subArbol.hijoDerecho != null) {
                subArbol.fe = subArbol.hijoDerecho.fe + 1;
            } else if (subArbol.hijoDerecho == null && subArbol.hijoIzquierdo != null) {
                subArbol.fe = subArbol.hijoIzquierdo.fe + 1;
            } else {
                subArbol.fe = Math.max(obtenerFE(subArbol.hijoIzquierdo), obtenerFE(subArbol.hijoDerecho)) + 1;
            }
            return nuevoPadre;
        }
        public Nodo insertarAVLUnir(Nodo nuevo, Nodo subArbol,final int ocurr) {
            Nodo nuevoPadre = subArbol;
            if (nuevo.dato < subArbol.dato) {
                if (subArbol.hijoIzquierdo == null) {
                    subArbol.hijoIzquierdo = nuevo;
                } else {
                    subArbol.hijoIzquierdo = insertarAVLUnir(nuevo, subArbol.hijoIzquierdo,ocurr);
                    if (obtenerFE(subArbol.hijoIzquierdo) - obtenerFE(subArbol.hijoDerecho) == 2) {
                        if (nuevo.dato < subArbol.hijoIzquierdo.dato) {
                            nuevoPadre = rotacionIzquierda(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleIzquierda(subArbol);
                        }
                    }
                }
            } else if (nuevo.dato > subArbol.dato) {
                if (subArbol.hijoDerecho == null) {
                    subArbol.hijoDerecho = nuevo;
                } else {
                    subArbol.hijoDerecho = insertarAVLUnir(nuevo, subArbol.hijoDerecho,ocurr);
                    if (obtenerFE(subArbol.hijoDerecho) - obtenerFE(subArbol.hijoIzquierdo) == 2) {
                        if (nuevo.dato > subArbol.hijoDerecho.dato) {
                            nuevoPadre = rotacionDerecha(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleDerecha(subArbol);
                        }
                    }
                }
            } else {
                    subArbol.ocurrencia = subArbol.ocurrencia+ocurr;             
            }
            if (subArbol.hijoIzquierdo == null && subArbol.hijoDerecho != null) {
                subArbol.fe = subArbol.hijoDerecho.fe + 1;
            } else if (subArbol.hijoDerecho == null && subArbol.hijoIzquierdo != null) {
                subArbol.fe = subArbol.hijoIzquierdo.fe + 1;
            } else {
                subArbol.fe = Math.max(obtenerFE(subArbol.hijoIzquierdo), obtenerFE(subArbol.hijoDerecho)) + 1;
            }
            return nuevoPadre;
        }
        public void insertar(int d) {
            Nodo nuevo = new Nodo(d);
            if (raiz == null) {
                raiz = nuevo;
            } else {
                raiz = insertarAVL(nuevo, raiz);
            }
        }
        public void insertarUnir(final int d,final int ocurr) {
            Nodo nuevo = new Nodo(d,ocurr);
            if (raiz == null) {
                raiz = nuevo;
            } else {
                raiz = insertarAVLUnir(nuevo, raiz,ocurr);
            }
        }
        public boolean eliminar(int d){
            Nodo aux = raiz;
            Nodo padre = raiz;
            boolean hijoIzquierdo = true;
            while(aux.dato!=d){
                padre = aux;
                if(d<aux.dato){
                    hijoIzquierdo = true;
                    aux = aux.hijoIzquierdo;
                }else{
                   hijoIzquierdo = false;
                   aux = aux.hijoDerecho;
                }
                if(aux == null)
                    return false;
            }
            if(aux.hijoDerecho == null && aux.hijoIzquierdo == null){
                if(aux == raiz)
                    raiz = null;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo = null;
                else
                    padre.hijoDerecho = null;
            }else if(aux.hijoDerecho == null){
                if(aux == raiz)
                    raiz = aux.hijoIzquierdo;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo = aux.hijoIzquierdo;
                else
                    padre.hijoDerecho = aux.hijoDerecho;
            }else if(aux.hijoIzquierdo ==null){
                if(aux == raiz)
                    raiz = aux.hijoDerecho;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo = aux.hijoDerecho;
                else
                    padre.hijoDerecho = aux.hijoIzquierdo;
            }else{
                Nodo remplazo = obtenerNodo(aux);
                if(aux==raiz)
                    raiz = remplazo;
                else if(hijoIzquierdo)
                    padre.hijoIzquierdo=remplazo;
                else
                    padre.hijoDerecho = remplazo;
                remplazo.hijoIzquierdo = aux.hijoIzquierdo;
                }
                return true;
            }
        public Nodo obtenerNodo(Nodo remplazo){
            Nodo remPadre = remplazo;
            Nodo rempla = remplazo;
            Nodo auxiliar = remplazo.hijoDerecho;
            while(auxiliar!=null){
                remPadre = rempla;
                rempla = auxiliar;
                auxiliar = auxiliar.hijoIzquierdo;
            }
            if(rempla!=remplazo.hijoDerecho){
                remPadre.hijoIzquierdo = rempla.hijoDerecho;
                rempla.hijoDerecho = remplazo.hijoDerecho;
            }
            return rempla;
        }
        public Nodo minimo(){
            Nodo aux = raiz;
            while(aux.hijoIzquierdo!=null){
                aux = aux.hijoIzquierdo;
            }
            return aux;
        }
    }
       public static void inOrdenA(Nodo r){
            if(r!=null){
                inOrdenA(r.hijoIzquierdo);
                cadenaA.append(r.dato+"");
                inOrdenA(r.hijoDerecho);
            }
        }
        public static void inOrdenB(Nodo r){
            if(r!=null){
                inOrdenB(r.hijoIzquierdo);
                cadenaB.append(r.dato+"");
                inOrdenB(r.hijoDerecho);
            }
        }
    public static boolean contieneAVL(ArbolAVL buscado,ArbolAVL base){
        Deque<Nodo> nodosBuscados = new ArrayDeque<>();
        nodosBuscados.addLast(buscado.raiz);
        while(!nodosBuscados.isEmpty()){
            Nodo subRaiz = nodosBuscados.removeFirst();
            if(subRaiz.hijoIzquierdo!=null)
                nodosBuscados.addLast(subRaiz.hijoIzquierdo);
            if(subRaiz.hijoDerecho!=null)
                nodosBuscados.addLast(subRaiz.hijoDerecho);
            if(compararAVL(base.raiz,subRaiz))
                return true;
        }
        return false;
    }
    public static boolean compararAVL(Nodo rootBase,Nodo rootSearch){
        cadenaA = new StringBuilder();
        cadenaB = new StringBuilder();
        inOrdenA(rootBase);
        inOrdenB(rootSearch);
        if(cadenaA.toString().equals(cadenaB.toString()))
            return true;
        return false;
    }
    public static ArbolAVL unirAVL(ArbolAVL base,ArbolAVL eliminado){
        while(eliminado.raiz != null){
            Nodo elim = eliminado.minimo();
            base.insertarUnir(elim.dato,elim.ocurrencia);
            eliminado.eliminar(elim.dato);
        }
        
        return base;
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int comandos = Integer.parseInt(sc.nextLine());
        ArrayList<ArbolAVL> arboles = new ArrayList<>();
        while((comandos--)>0){
            Scanner splitLine = new Scanner(sc.nextLine());
            boolean flag = false;
            switch(splitLine.next()){
                case "crear":
                    int id = Integer.parseInt(splitLine.next());
                    if(arboles.isEmpty()){
                        for(ArbolAVL c:arboles){
                            if(c.idx == id){
                                flag = true;
                                break;
                            }
                        }
                    }
                    if(!flag){
                        ArbolAVL nuevo = new ArbolAVL();
                        nuevo.idx = id;
                        nuevo.insertar(Integer.parseInt(splitLine.next()));
                        arboles.add(nuevo);
                    }
                    break;
                case "insertar":
                    if(!arboles.isEmpty()){
                        ArbolAVL actual = null;
                        int idIn = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idIn){
                                actual = c;
                                flag = true;
                                break;
                            }
                        }
                        if(flag){
                            actual.insertar(Integer.parseInt(splitLine.next()));
                            //imprimirArbol(actual);
                        }
                    }
                    break;
                case "ocurrencia":
                    if(!arboles.isEmpty()){
                        int idInz = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idInz){
                                Nodo aux = c.buscar(Integer.parseInt(splitLine.next()),c.raiz);
                                if(aux == null){
                                    System.out.println("ocurrencia: "+0);
                                }else{
                                    System.out.println("ocurrencia: "+aux.ocurrencia);
                                }
                                break;
                            }
                        }
                    }
                    break;
                case "contiene":
                    if(!arboles.isEmpty()){
                        ArbolAVL x = null;
                        ArbolAVL y = null;
                        int idInx = Integer.parseInt(splitLine.next());
                        int idIny = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idInx){
                                x = c;
                            }else if(c.idx == idIny){
                                y = c;
                            }
                        }
                        if(x!=null && y != null){
                            if(contieneAVL(x,y))
                                System.out.println("contiene: Yes");
                            else
                                System.out.println("contiene: No");
                        }
                    }
                    break;
                case "unir":
                    if(!arboles.isEmpty()){
                        ArbolAVL x = null;
                        ArbolAVL y = null;
                        int idx = Integer.parseInt(splitLine.next());
                        int idy = Integer.parseInt(splitLine.next());
                        for(ArbolAVL c:arboles){
                            if(c.idx == idx){
                                x = c;
                            }else if(c.idx == idy){
                                y = c;
                            }
                        }
                        if(x!=null && y != null){
                            arboles.remove(x);
                            arboles.remove(y);
                            x = unirAVL(x,y);
                            arboles.add(x);
                            y = null;
                        }
                    }
                    //break;
            }
            //System.out.println("");
        }
    }
    public static void imprimirArbol(ArbolAVL arbol){
        System.out.println("arbol imprimiendose");
        cadenaA = new StringBuilder();
        inOrdenA(arbol.raiz);
        System.out.println(cadenaA.toString());
        System.out.println("");
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_B.B_v01;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            HashMap<Integer,Integer> hash = new HashMap<>();
            Deque<Integer> numbers = new ArrayDeque<>();
            sc.nextLine();
            Scanner linea = new Scanner(sc.nextLine());
            while(linea.hasNextInt()){
                if(!hash.isEmpty()){
                    int next = linea.nextInt();
                    if(hash.containsKey(next)){
						int x = hash.get(next)+1;
						hash.remove(next);
						hash.put(next,x);
					}else{
                       numbers.addLast(next);
                       hash.put(next, 1); 
                    }
                }else{
                    int next = linea.nextInt();
                    numbers.addLast(next);
                    hash.put(next, 1);
                }
            }
            while(!numbers.isEmpty()){
                int output = numbers.removeFirst();
                System.out.println(output+" "+hash.remove(output));
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_A.A_V02;

import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static class Equipo{
        int id;
        int problemasResuletos;
        int tiempoPenalizacion;
        HashMap<Integer,Integer> puntos;
        int acumulador;
        public Equipo(){
            problemasResuletos = 0;
            tiempoPenalizacion = 0;
            acumulador = 0;
            puntos = new HashMap<Integer,Integer>();
        }
        public Equipo(final int id,final int pRes,final int tPe){
            this.id = id;
            problemasResuletos = pRes;
            tiempoPenalizacion = tPe;
        }
        @Override
        public String toString(){
            return id+" "+problemasResuletos+" "+tiempoPenalizacion;
        }
    }
    private static Comparator<Equipo> comp = new Comparator<Equipo>(){

        @Override
        public int compare(Equipo o1, Equipo o2) {
            if(o1.problemasResuletos == o2.problemasResuletos){
                if(o1.tiempoPenalizacion>o2.tiempoPenalizacion)
                    return 1;
                if(o1.tiempoPenalizacion<o2.tiempoPenalizacion)
                    return -1;
                if(o1.tiempoPenalizacion==o2.tiempoPenalizacion){
                    if(o1.id>o2.id)
                        return 1;
                    else
                        return -1;
                }
            }
            if(o1.problemasResuletos>o2.problemasResuletos)
                return -1;
            if(o1.problemasResuletos<o2.problemasResuletos)
                return 1;
            return 0;
        }
        
    };
public static class Hash {
    Equipo[] arreglo;
    Equipo nada;
    int tamanio,contador;
    boolean vacio;
    Hash(final int tam){
        tamanio = tam;
        arreglo = new Equipo[tam];
        nada = new Equipo();
        Arrays.fill(arreglo,nada);
        vacio = true;
    }
    public void put(final int id,final Equipo elemento){
        int indiceArreglo = id % (arreglo.length - 1);
        while (!arreglo[indiceArreglo].equals(nada)) {
            indiceArreglo++;
            indiceArreglo %= tamanio;
        }
        arreglo[indiceArreglo] = elemento;
        vacio = false;
    }
    public void putOne(final int id,final Equipo elemento){
        arreglo[0] = elemento;
        vacio = false;
    }
    public boolean isEmpty(){
        return vacio;
    }
    public Equipo getOne(int elemento){
        if((arreglo[0].id) == elemento)
           return arreglo[0];
        return null;
    }
    //
    public boolean buscarClarve(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return true;
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return false;
    }
    public Equipo get(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return arreglo[indiceArreglo];
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return null;
    }
}
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            Scanner inSplit = new Scanner(sc.nextLine());
            int size = inSplit.nextInt();
            int nLineas = inSplit.nextInt();
            Hash contenedor = new Hash(size);
            System.out.println("Caso #"+(cnt++)+":");
            if(size == 1){
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    Equipo equipo = contenedor.getOne(id);
                    String resuelto = inSplit.next();
                    if (!resuelto.equals("C")) {
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.puntos.put(example, 20);
                        } else {
							int x = equipo.puntos.get(example) + 20;
							equipo.remove(example);
							equipo.put(example,x);
                        }
                    } else {
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.tiempoPenalizacion += tiempo;
                        } else {
                            equipo.tiempoPenalizacion += tiempo + equipo.puntos.get(example);
                        }
                        equipo.problemasResuletos += 1;
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.putOne(id, equipo);
                }
            }  
            }else{
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    if(contenedor.buscarClarve(id)){
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        Equipo equipo = contenedor.get(id);
                        String resuelto = inSplit.next();
                        if(!resuelto.equals("C")){
                            if(!equipo.puntos.containsKey(example))
                                equipo.puntos.put(example,20);
                            else{
                                int x = equipo.puntos.get(example) + 20;
								equipo.remove(example);
								equipo.put(example,x);
							}
                        }else{
                            if(!equipo.puntos.containsKey(example))
                                equipo.tiempoPenalizacion += tiempo;
                            else
                                equipo.tiempoPenalizacion += tiempo+equipo.puntos.get(example);
                            equipo.problemasResuletos +=1;
                        }
                    }else{
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        String resuelto = inSplit.next();
                        Equipo equipo = new Equipo();
                        equipo.id = id;
                        if(!resuelto.equals("C")){
                                equipo.puntos.put(example,20);
                        }else{
                            equipo.tiempoPenalizacion = tiempo;
                            equipo.problemasResuletos = 1;
                        }
                        contenedor.put(id, equipo);
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.put(id, equipo);
                }
            }
            redondear(contenedor,contenedor.arreglo.length);
            Arrays.sort(contenedor.arreglo,comp);
            }
            for(Equipo eq:contenedor.arreglo){
                if(eq.id == 0)
                    continue;
                System.out.println(eq);
            }
        }
    }
    public static void redondear(final Hash contenedor,final int length){
        for(int i = 0;i<length;++i){
            if(contenedor.arreglo[i].problemasResuletos == 0)
                contenedor.arreglo[i].tiempoPenalizacion = 0;     
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_B.B_v01;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            HashMap<Integer,Integer> hash = new HashMap<>();
            Deque<Integer> numbers = new ArrayDeque<>();
            sc.nextLine();
            Scanner linea = new Scanner(sc.nextLine());
            while(linea.hasNextInt()){
                if(!hash.isEmpty()){
                    int next = linea.nextInt();
                    if(hash.containsKey(next)){
						int x = hash.get(next)+1;
						hash.remove(next);
						hash.put(next,x);
					}else{
                       numbers.addLast(next);
                       hash.put(next, 1); 
                    }
                }else{
                    int next = linea.nextInt();
                    numbers.addLast(next);
                    hash.put(next, 1);
                }
            }
            while(!numbers.isEmpty()){
                int output = numbers.removeFirst();
                System.out.println(output+" "+hash.remove(output));
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_A.A_V02;

import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static class Equipo{
        int id;
        int problemasResuletos;
        int tiempoPenalizacion;
        HashMap<Integer,Integer> puntos;
        int acumulador;
        public Equipo(){
            problemasResuletos = 0;
            tiempoPenalizacion = 0;
            acumulador = 0;
            puntos = new HashMap<Integer,Integer>();
        }
        public Equipo(final int id,final int pRes,final int tPe){
            this.id = id;
            problemasResuletos = pRes;
            tiempoPenalizacion = tPe;
        }
        @Override
        public String toString(){
            return id+" "+problemasResuletos+" "+tiempoPenalizacion;
        }
    }
    private static Comparator<Equipo> comp = new Comparator<Equipo>(){

        @Override
        public int compare(Equipo o1, Equipo o2) {
            if(o1.problemasResuletos == o2.problemasResuletos){
                if(o1.tiempoPenalizacion>o2.tiempoPenalizacion)
                    return 1;
                if(o1.tiempoPenalizacion<o2.tiempoPenalizacion)
                    return -1;
                if(o1.tiempoPenalizacion==o2.tiempoPenalizacion){
                    if(o1.id>o2.id)
                        return 1;
                    else
                        return -1;
                }
            }
            if(o1.problemasResuletos>o2.problemasResuletos)
                return -1;
            if(o1.problemasResuletos<o2.problemasResuletos)
                return 1;
            return 0;
        }
        
    };
public static class Hash {
    Equipo[] arreglo;
    Equipo nada;
    int tamanio,contador;
    boolean vacio;
    Hash(final int tam){
        tamanio = tam;
        arreglo = new Equipo[tam];
        nada = new Equipo();
        Arrays.fill(arreglo,nada);
        vacio = true;
    }
    public void put(final int id,final Equipo elemento){
        int indiceArreglo = id % (arreglo.length - 1);
        while (!arreglo[indiceArreglo].equals(nada)) {
            indiceArreglo++;
            indiceArreglo %= tamanio;
        }
        arreglo[indiceArreglo] = elemento;
        vacio = false;
    }
    public void putOne(final int id,final Equipo elemento){
        arreglo[0] = elemento;
        vacio = false;
    }
    public boolean isEmpty(){
        return vacio;
    }
    public Equipo getOne(int elemento){
        if((arreglo[0].id) == elemento)
           return arreglo[0];
        return null;
    }
    //
    public boolean buscarClarve(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return true;
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return false;
    }
    public Equipo get(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return arreglo[indiceArreglo];
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return null;
    }
}
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            Scanner inSplit = new Scanner(sc.nextLine());
            int size = inSplit.nextInt();
            int nLineas = inSplit.nextInt();
            Hash contenedor = new Hash(size);
            System.out.println("Caso #"+(cnt++)+":");
            if(size == 1){
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    Equipo equipo = contenedor.getOne(id);
                    String resuelto = inSplit.next();
                    if (!resuelto.equals("C")) {
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.puntos.put(example, 20);
                        } else {
							int x = equipo.puntos.get(example) + 20;
							equipo.puntos.remove(example);
							equipo.puntos.put(example,x);
                        }
                    } else {
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.tiempoPenalizacion += tiempo;
                        } else {
                            equipo.tiempoPenalizacion += tiempo + equipo.puntos.get(example);
                        }
                        equipo.problemasResuletos += 1;
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.putOne(id, equipo);
                }
            }  
            }else{
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    if(contenedor.buscarClarve(id)){
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        Equipo equipo = contenedor.get(id);
                        String resuelto = inSplit.next();
                        if(!resuelto.equals("C")){
                            if(!equipo.puntos.containsKey(example))
                                equipo.puntos.put(example,20);
                            else{
                                int x = equipo.puntos.get(example) + 20;
								equipo.puntos.remove(example);
								equipo.puntos.put(example,x);
							}
                        }else{
                            if(!equipo.puntos.containsKey(example))
                                equipo.tiempoPenalizacion += tiempo;
                            else
                                equipo.tiempoPenalizacion += tiempo+equipo.puntos.get(example);
                            equipo.problemasResuletos +=1;
                        }
                    }else{
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        String resuelto = inSplit.next();
                        Equipo equipo = new Equipo();
                        equipo.id = id;
                        if(!resuelto.equals("C")){
                                equipo.puntos.put(example,20);
                        }else{
                            equipo.tiempoPenalizacion = tiempo;
                            equipo.problemasResuletos = 1;
                        }
                        contenedor.put(id, equipo);
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.put(id, equipo);
                }
            }
            redondear(contenedor,contenedor.arreglo.length);
            Arrays.sort(contenedor.arreglo,comp);
            }
            for(Equipo eq:contenedor.arreglo){
                if(eq.id == 0)
                    continue;
                System.out.println(eq);
            }
        }
    }
    public static void redondear(final Hash contenedor,final int length){
        for(int i = 0;i<length;++i){
            if(contenedor.arreglo[i].problemasResuletos == 0)
                contenedor.arreglo[i].tiempoPenalizacion = 0;     
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;


public class Main {
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
		sc.nextLine()
        Scanner split = new Scanner(sc.nextLine());
        int cnt = 0;
        Queue<Integer> cola = new PriorityQueue(comp); 
        while(split.hasNextInt()){
            cola.add(split.nextInt());
            if(cnt<2)
                System.out.println(-1);
            else{
                 Queue<Integer> colita = new PriorityQueue<>(cola);
                 System.out.println(colita.poll()*colita.poll()*colita.poll());
            }
            ++cnt;
        }   
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;


public class Main {
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
		sc.nextLine();
        Scanner split = new Scanner(sc.nextLine());
        int cnt = 0;
        Queue<Integer> cola = new PriorityQueue(comp); 
        while(split.hasNextInt()){
            cola.add(split.nextInt());
            if(cnt<2)
                System.out.println(-1);
            else{
                 Queue<Integer> colita = new PriorityQueue<>(cola);
                 System.out.println(colita.poll()*colita.poll()*colita.poll());
            }
            ++cnt;
        }   
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;


public class Main {
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
		sc.nextLine();
        Scanner split = new Scanner(sc.nextLine());
        int cnt = 0;
        Queue<Integer> cola = new PriorityQueue(10,comp); 
        while(split.hasNextInt()){
            cola.add(split.nextInt());
            if(cnt<2)
                System.out.println(-1);
            else{
                 Queue<Integer> colita = new PriorityQueue<>(cola);
                 System.out.println(colita.poll()*colita.poll()*colita.poll());
            }
            ++cnt;
        }   
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package secuenciaaden;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
//ejercicio secuencia A hasta N B de hash

public class Main {
    static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        int cnt = 1;
        while ((casos--) > 0) {
            int amount = sc.nextInt();
            sc.nextLine();
            if (0 < amount && amount < 100000) {

                Map< Integer, Integer> hashT = new HashMap<Integer, Integer>();
                int[] itRefer = new int[amount];
                int indice = 0;
                int aux;
                int nDig;
                String linea = sc.nextLine();
                String[] spliter = linea.split(" ");
                for (int j = 0; j < amount; j++) {
                    nDig = Integer.parseInt(spliter[j]);
                    if (0 <= nDig && nDig <= 100000000) {
                        if (!hashT.containsKey(nDig)) {
                            itRefer[indice] = nDig;
                            hashT.put(nDig, 1);
                            indice++;
                        } else {
                            aux = hashT.get(nDig);
                            aux = aux + 1;
                            hashT.remove(nDig);
                            hashT.put(nDig, aux);
                        }
                    }
                }
                System.out.println("Caso #" + (cnt++) + ":");
                for (int j = 0; j < indice; j++) {
                    if (j == indice - 1) {
                        if ((cnt - 1) == casos - 1) {
                            System.out.print(itRefer[j] + " " + hashT.get(itRefer[j]));
                        } else {
                            System.out.println(itRefer[j] + " " + hashT.get(itRefer[j]));
                        }
                    } else {
                        System.out.println(itRefer[j] + " " + hashT.get(itRefer[j]));
                    }

                }

            }

        }
    }
    public static void main(String[] args) {
        ejecutar();

    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
	static void ejecutar(){
        Scanner sc= new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < casos; i++) {
            
            int cantidad = sc.nextInt();
            sc.nextLine();
            if (0 < cantidad && cantidad < 100000) {
                
                Map< Integer,Integer> repeticiones = new HashMap<Integer, Integer>();
                int [] referencia = new int [cantidad];
                int dijito;
                int index = 0;
                int aux;
                String entradas = sc.nextLine();
                String [] dijitos = entradas.split(" ");
                for (int j = 0; j < cantidad; j++) {
                    
                    dijito = Integer.parseInt(dijitos[j]);
                 if(0 <= dijito && dijito <= 100000000){   
                    if (!repeticiones.containsKey(dijito)) {
                        referencia[index]= dijito;
                        repeticiones.put(dijito, 1);
                        index++;
                    }else {
                        aux = repeticiones.get(dijito);
                        aux = aux +1;
                        repeticiones.remove(dijito);
                        repeticiones.put(dijito, aux);
                    }          
                }
                }
                System.out.println("Caso #"+(i+1)+":");
                for (int j = 0; j < index; j++) {
                    if (j == index-1) {
                        if (i == casos-1) {
                            System.out.print(referencia[j]+" "+repeticiones.get(referencia[j]));
                        }else{
                            System.out.println(referencia[j]+" "+repeticiones.get(referencia[j]));
                        }
                    }else{
                    System.out.println(referencia[j]+" "+repeticiones.get(referencia[j]));
                    }
                    
                }
                
            }
            
        }
	}
    public static void main(String[] args) {
		ejecutar();
        
    }
    
}
























//public static void main(String[] args) {
//        Scanner sc= new Scanner(System.in);
//        int casos = sc.nextInt();
//        sc.nextLine();
//        for (int i = 0; i < casos; i++) {
//            
//            int cantidad = sc.nextInt();
//            sc.nextLine();
//            if (0 < cantidad && cantidad < 100000) {
//                
//                int [] secuencia = new int [cantidad];
//                String referencia = "";
//                String entradas = sc.nextLine();
//                String [] dijitos = entradas.split(" ");
//                int ai;
//                int index =0;
//                for (int j = 0; j < cantidad; j++) {
//                    ai = Integer.parseInt(dijitos[j]);
//                    
//                    if (0<= ai && ai <= 100000000) {
//                        secuencia[ai-1] = secuencia[ai-1] +1;
//                    }
//                }
//                for (int j = 0; j < cantidad; j++) {
//                    if (secuencia[j] != 0) {
//                        System.out.println(j+1+" "+secuencia[j]);
//                    }
//                }
//            }
//            
//        }
//        
//    }
<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
	static void ejecutar(){
        Scanner sc= new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < casos; i++) {
            
            int cantidad = sc.nextInt();
            sc.nextLine();
            if (0 < cantidad && cantidad < 100000) {
                
                Map< Integer,Integer> repeticiones = new HashMap<Integer, Integer>();
                int [] referencia = new int [cantidad];
                int dijito;
                int index = 0;
                int aux;
                String entradas = sc.nextLine();
                String [] dijitos = entradas.split(" ");
                for (int j = 0; j < cantidad; j++) {
                    
                    dijito = Integer.parseInt(dijitos[j]);
                 if(0 <= dijito && dijito <= 100000000){   
                    if (!repeticiones.containsKey(dijito)) {
                        referencia[index]= dijito;
                        repeticiones.put(dijito, 1);
                        index++;
                    }else {
                        aux = repeticiones.get(dijito);
                        aux = aux +1;
                        repeticiones.remove(dijito);
                        repeticiones.put(dijito, aux);
                    }          
                }
                }
                System.out.println("Caso #"+(i+1)+":");
                for (int j = 0; j < index; j++) {
                    if (j == index-1) {
                        if (i == casos-1) {
                            System.out.print(referencia[j]+" "+repeticiones.get(referencia[j]));
                        }else{
                            System.out.println(referencia[j]+" "+repeticiones.get(referencia[j]));
                        }
                    }else{
                    System.out.println(referencia[j]+" "+repeticiones.get(referencia[j]));
                    }
                    
                }
                
            }
            
        }
	}
    public static void main(String[] args) {
		ejecutar();
        
    }
    
}
























//public static void main(String[] args) {
//        Scanner sc= new Scanner(System.in);
//        int casos = sc.nextInt();
//        sc.nextLine();
//        for (int i = 0; i < casos; i++) {
//            
//            int cantidad = sc.nextInt();
//            sc.nextLine();
//            if (0 < cantidad && cantidad < 100000) {
//                
//                int [] secuencia = new int [cantidad];
//                String referencia = "";
//                String entradas = sc.nextLine();
//                String [] dijitos = entradas.split(" ");
//                int ai;
//                int index =0;
//                for (int j = 0; j < cantidad; j++) {
//                    ai = Integer.parseInt(dijitos[j]);
//                    
//                    if (0<= ai && ai <= 100000000) {
//                        secuencia[ai-1] = secuencia[ai-1] +1;
//                    }
//                }
//                for (int j = 0; j < cantidad; j++) {
//                    if (secuencia[j] != 0) {
//                        System.out.println(j+1+" "+secuencia[j]);
//                    }
//                }
//            }
//            
//        }
//        
//    }
<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_A.A_V02;

import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static class Equipo{
        int id;
        int problemasResuletos;
        int tiempoPenalizacion;
        HashMap<Integer,Integer> puntos;
        int acumulador;
        public Equipo(){
            problemasResuletos = 0;
            tiempoPenalizacion = 0;
            acumulador = 0;
            puntos = new HashMap<Integer,Integer>();
        }
        public Equipo(final int id,final int pRes,final int tPe){
            this.id = id;
            problemasResuletos = pRes;
            tiempoPenalizacion = tPe;
        }
        @Override
        public String toString(){
            return id+" "+problemasResuletos+" "+tiempoPenalizacion;
        }
    }
    private static Comparator<Equipo> comp = new Comparator<Equipo>(){

        @Override
        public int compare(Equipo o1, Equipo o2) {
            if(o1.problemasResuletos == o2.problemasResuletos){
                if(o1.tiempoPenalizacion>o2.tiempoPenalizacion)
                    return 1;
                if(o1.tiempoPenalizacion<o2.tiempoPenalizacion)
                    return -1;
                if(o1.tiempoPenalizacion==o2.tiempoPenalizacion){
                    if(o1.id>o2.id)
                        return 1;
                    else
                        return -1;
                }
            }
            if(o1.problemasResuletos>o2.problemasResuletos)
                return -1;
            if(o1.problemasResuletos<o2.problemasResuletos)
                return 1;
            return 0;
        }
        
    };
public static class Hash {
    Equipo[] arreglo;
    Equipo nada;
    int tamanio,contador;
    boolean vacio;
    Hash(final int tam){
        tamanio = tam;
        arreglo = new Equipo[tam];
        nada = new Equipo();
        Arrays.fill(arreglo,nada);
        vacio = true;
    }
    public void put(final int id,final Equipo elemento){
        int indiceArreglo = id % (arreglo.length - 1);
        while (!arreglo[indiceArreglo].equals(nada)) {
            indiceArreglo++;
            indiceArreglo %= tamanio;
        }
        arreglo[indiceArreglo] = elemento;
        vacio = false;
    }
    public void putOne(final int id,final Equipo elemento){
        arreglo[0] = elemento;
        vacio = false;
    }
    public boolean isEmpty(){
        return vacio;
    }
    public Equipo getOne(int elemento){
        if((arreglo[0].id) == elemento)
           return arreglo[0];
        return null;
    }
    //
    public boolean buscarClarve(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return true;
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return false;
    }
    public Equipo get(int elemento){
        int indiceArreglo = elemento%(arreglo.length-1);
        contador = 0;
        while(!(arreglo[indiceArreglo].equals(nada))){
            if((arreglo[indiceArreglo].id) == elemento){
                return arreglo[indiceArreglo];
            }
            indiceArreglo++;
            indiceArreglo %= tamanio;
            contador++;
            if(contador >(arreglo.length-1))
                break;
        }
        return null;
    }
}
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cnt = 1;
        while((casos--)>0){
            Scanner inSplit = new Scanner(sc.nextLine());
            int size = inSplit.nextInt();
            int nLineas = inSplit.nextInt();
            Hash contenedor = new Hash(size);
            System.out.println("Caso #"+(cnt++)+":");
            if(size == 1){
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    Equipo equipo = contenedor.getOne(id);
                    String resuelto = inSplit.next();
                    if (!resuelto.equals("C")) {
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.puntos.put(example, 20);
                        } else {
							int x = equipo.puntos.get(example) + 20;
							equipo.puntos.remove(example);
							equipo.puntos.put(example,x);
                        }
                    } else {
                        if (!equipo.puntos.containsKey(example)) {
                            equipo.tiempoPenalizacion += tiempo;
                        } else {
                            equipo.tiempoPenalizacion += tiempo + equipo.puntos.get(example);
                        }
                        equipo.problemasResuletos += 1;
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.putOne(id, equipo);
                }
            }  
            }else{
            while((nLineas--)>0){
                inSplit = new Scanner(sc.nextLine());
                if(!contenedor.isEmpty()){
                    int id = inSplit.nextInt();
                    if(contenedor.buscarClarve(id)){
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        Equipo equipo = contenedor.get(id);
                        String resuelto = inSplit.next();
                        if(!resuelto.equals("C")){
                            if(!equipo.puntos.containsKey(example))
                                equipo.puntos.put(example,20);
                            else{
                                int x = equipo.puntos.get(example) + 20;
								equipo.puntos.remove(example);
								equipo.puntos.put(example,x);
							}
                        }else{
                            if(!equipo.puntos.containsKey(example))
                                equipo.tiempoPenalizacion += tiempo;
                            else
                                equipo.tiempoPenalizacion += tiempo+equipo.puntos.get(example);
                            equipo.problemasResuletos +=1;
                        }
                    }else{
                        int example = inSplit.nextInt();
                        int tiempo = inSplit.nextInt();
                        String resuelto = inSplit.next();
                        Equipo equipo = new Equipo();
                        equipo.id = id;
                        if(!resuelto.equals("C")){
                                equipo.puntos.put(example,20);
                        }else{
                            equipo.tiempoPenalizacion = tiempo;
                            equipo.problemasResuletos = 1;
                        }
                        contenedor.put(id, equipo);
                    }
                }else{
                    int id = inSplit.nextInt();
                    int example = inSplit.nextInt();
                    int tiempo = inSplit.nextInt();
                    String resuelto = inSplit.next();
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if(!resuelto.equals("C")){
                          equipo.puntos.put(example,20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.put(id, equipo);
                }
            }
            redondear(contenedor,contenedor.arreglo.length);
            Arrays.sort(contenedor.arreglo,comp);
            }
            for(Equipo eq:contenedor.arreglo){
                if(eq.id == 0)
                    continue;
                System.out.println(eq);
            }
        }
    }
    public static void redondear(final Hash contenedor,final int length){
        for(int i = 0;i<length;++i){
            if(contenedor.arreglo[i].problemasResuletos == 0)
                contenedor.arreglo[i].tiempoPenalizacion = 0;     
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicio_C.C_V01;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    private static int cnt;
    private static HashMap<String,Persona> visitados;
    public static class Persona{
        String llave;
        Deque<Persona> amigos;
        //int nAmigos;
        public Persona(final String llave){
            this.llave = llave;
            amigos = new ArrayDeque<>();
        }
    }
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = Integer.parseInt(sc.nextLine());
        int cntX = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cntX++)+":");
            final HashMap<String,Persona> redSocial = new HashMap<>();
            int lineas = Integer.parseInt(sc.nextLine());
            while((lineas--)>0){
                final Scanner split = new Scanner(sc.nextLine());
                Persona A;
                Persona B;
                cnt = 2;
                if(redSocial.isEmpty()){
                    A = new Persona(split.next());
                    B = new Persona(split.next());
                    A.amigos.addLast(B);
                    B.amigos.addLast(A);
                    redSocial.put(A.llave,A);
                    redSocial.put(B.llave, B);
                }else{
                    String llaveA = split.next();
                    String llaveB = split.next();
                    if(!redSocial.containsKey(llaveA) && !redSocial.containsKey(llaveB)){
                        A = new Persona(llaveA);
                        B = new Persona(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                        redSocial.put(llaveA,A);
                        redSocial.put(llaveB, B);
                    }else if(redSocial.containsKey(llaveA) && !redSocial.containsKey(llaveB)){
                        A = redSocial.get(llaveA);
                        B = new Persona(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                        redSocial.put(llaveB, B);
                    }else if(!redSocial.containsKey(llaveA) && redSocial.containsKey(llaveB)){
                        A = new Persona(llaveA);
                        B = redSocial.get(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                        redSocial.put(llaveA,A);
                    }else{
                        A = redSocial.get(llaveA);
                        B = redSocial.get(llaveB);
                        A.amigos.addLast(B);
                        B.amigos.addLast(A);
                    }
                }
                Deque<Persona> a = new ArrayDeque(A.amigos);
                Deque<Persona> b = new ArrayDeque(B.amigos);
                visitados = new HashMap<>();
                visitados.put(A.llave, A);
                visitados.put(B.llave, B);
                contarAmigos(a);
                contarAmigos(b);
                System.out.println(cnt);
            }
        }
    }
    public static void contarAmigos(final Deque<Persona> a){
        while(!a.isEmpty()){
            final Persona amigo = a.removeFirst();
            if(visitados.containsKey(amigo.llave))
                continue;
            final Deque<Persona> per = new ArrayDeque<>(amigo.amigos);
            while(!per.isEmpty()){
                Persona friend = per.removeFirst();
                if(visitados.containsKey(friend.llave))
                    continue;
                a.addLast(friend);
            }
            visitados.put(amigo.llave, amigo);
            ++cnt;
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
public class Main {
    static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int casos = sc.nextInt();
        sc.nextLine();
        while((casos--)>0){
            String linea = sc.nextLine();
            Queue cola = new LinkedList();
            String[] spliter = linea.split(" ");
            int idx = Integer.parseInt(spliter[0]);
            int change = Integer.parseInt(spliter[1]);
            int tiempo = 0;
            String jobs = sc.nextLine();
            String[] prints = jobs.split(" ");
            String[] priority = jobs.split(" ");
            int[] prr = new int[idx];
            for (int j = 0; j < prr.length; j++) 
                prr[j] = Integer.parseInt(priority[j]);
            Arrays.sort(prr);
            for (int j = 0; j < prints.length; j++) {
                prints[j] = prints[j] + " " + j;
                cola.add(prints[j]);
            }
            while (idx > 0) {
                jobs = (String) cola.remove();
                if (jobs.startsWith(String.valueOf(prr[idx - 1]))) {
                    idx--;
                    tiempo++;
                    if (jobs.equals(prints[change])) {
                        if (sc.hasNextLine()) {
                            System.out.println(tiempo);
                        } else {
                            System.out.print(tiempo);
                        }
                        break;
                    }
                } else {
                    cola.add(jobs);
                }
            }
        }  
    }
    public static void main(String[] args) {
        ejecutar();
    }

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;


public class Main {
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
		sc.nextLine();
        Scanner split = new Scanner(sc.nextLine());
        int cnt = 0;
        Queue<Integer> cola = new PriorityQueue<Integer>(10,comp); 
        while(split.hasNextInt()){
            cola.add(split.nextInt());
            if(cnt<2)
                System.out.println(-1);
            else{
                 Queue<Integer> colita = new PriorityQueue<>(cola);
                 System.out.println(colita.poll()*colita.poll()*colita.poll());
            }
            ++cnt;
        }   
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_C.C_v01;

import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int n,k,cnt = 1;
        int casos = Integer.parseInt(sc.nextLine());
        Scanner split;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            split = new Scanner(sc.nextLine());
            int arr[] = new int[split.nextInt()];
            k = split.nextInt();
            n = 0;
            split = new Scanner(sc.nextLine());
            while(n<arr.length)
                arr[n++] = split.nextInt();
            while((k--)>0){
                split = new Scanner(sc.nextLine());
                switch(split.next()){
                    case "cambio":
                        arr[split.nextInt()-1] = split.nextInt();
                        break;
                    case "multiplicar":
                        int a = split.nextInt();
                        n = split.nextInt()-1;
                        int acumm = arr[a-1];
                        if(acumm == 0)
                            System.out.println("0");
                        else{
                            for(int i = a;i<=n;++i){
                                acumm *= arr[i];
                                if(arr[i] == 0){
                                    System.out.println("0");
                                    break;
                                }
                            }
                            if(acumm<0)
                                System.out.println("-");
                            else if(acumm>0)
                                System.out.println("+");
                        }
                        break;
                } 
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_C.C_v01;

import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int k,cnt = 1;
        int casos = sc.nextInt();
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            int arr[] = new int[sc.nextInt()];
            k = sc.nextInt();
            for(int i = 0;i<arr.length;++i)
                arr[i] = sc.nextInt();
            while((k--)>0){
                sc.nextLine();
                switch(sc.next()){
                    case "cambio":
                        arr[sc.nextInt()-1] = sc.nextInt();
                        break;
                    case "multiplicar":
                        int a = sc.nextInt();
                        int n = sc.nextInt()-1;
                        int acumm = arr[a-1];
                        if(acumm == 0)
                            System.out.println("0");
                        else{
                            for(int i = a;i<=n;++i){
                                acumm *= arr[i];
                                if(arr[i] == 0){
                                    System.out.println("0");
                                    break;
                                }
                            }
                            if(acumm<0)
                                System.out.println("-");
                            else if(acumm>0)
                                System.out.println("+");
                        }
                        break;
                } 
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_C.C_v01;

import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int k,cnt = 1;
        int casos = sc.nextInt();
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            int arr[] = new int[sc.nextInt()];
            k = sc.nextInt();
            for(int i = 0;i<arr.length;++i)
                arr[i] = sc.nextInt();
            while((k--)>0){
                sc.nextLine();
                switch(sc.next()){
                    case "cambio":
                        arr[sc.nextInt()-1] = sc.nextInt();
                        break;
                    case "multiplicar":
                        int a = sc.nextInt()-1;
                        int n = sc.nextInt()-1;
                        int acumm = arr[a];
                            for(int i = a;i<=n;++i){
                                acumm *= arr[i];
                                if(arr[i] == 0){
                                    System.out.println("0");
                                    break;
                                }
                            }
                            if(acumm<0)
                                System.out.println("-");
                            else if(acumm>0)
                                System.out.println("+");
                        
                        break;
                } 
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicio_C.C_v01;

import java.util.Scanner;

public class Main {
    public static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int k,cnt = 1;
        int casos = sc.nextInt();
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            int arr[] = new int[sc.nextInt()];
            k = sc.nextInt();
            for(int i = 0;i<arr.length;++i)
                arr[i] = sc.nextInt();
            while((k--)>0){
                sc.nextLine();
                switch(sc.next()){
                    case "cambio":
                        arr[sc.nextInt()-1] = sc.nextInt();
                        break;
                    case "multiplicar":
                        int a = sc.nextInt()-1;
                        int n = sc.nextInt()-1;
                        int acumm = arr[a];
                            for(int i = a;i<=n;++i){
                                acumm *= arr[i];
                                if(arr[i] == 0){
                                    System.out.println("0");
                                    break;
                                }
                            }
                            if(acumm<0)
                                System.out.println("-");
                            else if(acumm>0)
                                System.out.println("+");
                        
                        break;
                } 
            }
        }
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Arrays;
import java.util.Scanner;


public class Main {
    static int mayor1,mayor2,mayor3;
    /*
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };*/
    static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int arr[] = new int[size];
        for(int i = 0;i<size;++i){
            arr[i] = sc.nextInt();
            if(i < 2)
                System.out.println("-1");
            else{
                if(arr[i]> mayor3||arr[i]>mayor2||arr[i]>mayor1){
                    Arrays.sort(arr,0, i);
                    mayor1 = arr[i-2];
                    mayor2 = arr[i-1];
                    mayor3 = arr[i];
                }
                System.out.println(mayor1*mayor2*mayor3);
            }
        }
        
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Arrays;
import java.util.Scanner;


public class Main {
    static int mayor1,mayor2,mayor3;
    /*
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };*/
    static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int arr[] = new int[size];
        for(int i = 0;i<size;++i){
            arr[i] = sc.nextInt();
            if(i < 2)
                System.out.println("-1");
            else{
                if(arr[i]> mayor3||arr[i]>mayor2||arr[i]>mayor1){
                    Arrays.sort(arr,0, i);
                    mayor1 = arr[i-2];
                    mayor2 = arr[i-1];
                    mayor3 = arr[i];
                }
                System.out.println(mayor1*mayor2*mayor3);
            }
        }
        
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Arrays;
import java.util.Scanner;


public class Main {
    static int mayor1,mayor2,mayor3;
    /*
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };*/
    static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int arr[] = new int[size];
        for(int i = 0;i<size;++i){
            arr[i] = sc.nextInt();
            if(i < 2)
                System.out.println("-1");
            else{
                    Arrays.sort(arr,0, i);
                    mayor1 = arr[i-2];
                    mayor2 = arr[i-1];
                    mayor3 = arr[i];
                System.out.println(mayor1*mayor2*mayor3);
            }
        }
        
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios.Ejercicio_A.A_v02;

import java.util.Scanner;


public class Main {
    static int mayor1,mayor2,mayor3;
    /*
    public static Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };*/
    static void ejecutar(){
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        //int arr[] = new int[size];
        for(int i = 0;i<size;++i){
            //arr[i] = sc.nextInt();
            int x = sc.nextInt();
            if(i < 2){
                System.out.println("-1");
                switch(i){
                    case 0:
                        mayor1 = x;
                        break;
                    case 1:
                        if(x > mayor1){
                            mayor2 = mayor1;
                            mayor1 = x;
                        }else
                            mayor2 = x;
                        break;
                    case 2:
                        if(x > mayor1){
                            mayor2 = mayor1;
                            mayor1 = x;
                        }else if(x > mayor2){
                            mayor3 = mayor2;
                            mayor2 = x;
                        }else
                            mayor3 = x;
                        break;
                }
            }else{
                if(x> mayor1){
                    mayor3 = mayor2;
                    mayor2 = mayor1;
                    mayor1 = x;
                }else if(x > mayor2){
                    mayor3 = mayor2;
                    mayor2 = x;
                }else if(x > mayor3)
                    mayor3 = x;
                System.out.println(mayor1*mayor2*mayor3);
            }
        }
        
    }
    public static void main(String[] args) {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios.Ejercicio_A.A_v03;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int arr[] = new int[size];
         if(size>2){
            int mayor1,mayor2,mayor3;
            System.out.println(-1);
            System.out.println(-1);
            arr[0] = sc.nextInt();
            arr[1] = sc.nextInt();
            arr[2] = sc.nextInt();
            Arrays.sort(arr,0,2);
            mayor1 = arr[0];
            mayor2 = arr[1];
            mayor3 = arr[2];
             System.out.println(arr[0]*arr[1]*arr[2]);
            for(int i = 3;i<size;++i){
               arr[i] = sc.nextInt(); 
               if(arr[i] > mayor1){
                   Arrays.sort(arr,0,i);
                   mayor1 = arr[i-2];
                   mayor2 = arr[i-1];
                   mayor3 = arr[i];
               }
                System.out.println(mayor1*mayor2*mayor3);
            }
        }else if(size == 2){
            System.out.println(-1);
            System.out.println(-1);
        }else if(size == 1)
            System.out.println(-1);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios.Ejercicio_A.A_v03;

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int arr[] = new int[size];
         if(size>2){
            int mayor1,mayor2,mayor3;
            System.out.println(-1);
            System.out.println(-1);
            arr[0] = sc.nextInt();
            arr[1] = sc.nextInt();
            arr[2] = sc.nextInt();
            Arrays.sort(arr,0,2);
            mayor1 = arr[0];
            mayor2 = arr[1];
            mayor3 = arr[2];
             System.out.println(arr[0]*arr[1]*arr[2]);
            for(int i = 3;i<size;++i){
               arr[i] = sc.nextInt(); 
               if(arr[i] > mayor1){
                   Arrays.sort(arr,0,i);
                   mayor1 = arr[i-2];
                   mayor2 = arr[i-1];
                   mayor3 = arr[i];
               }
                System.out.println(mayor1*mayor2*mayor3);
            }
        }else if(size == 2){
            System.out.println(-1);
            System.out.println(-1);
        }else if(size == 1)
            System.out.println(-1);
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios_Finales_Arboles_Buffer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

public class MainB {
    public static class Nodo{
        int value;
        int posHijoD;
        int posHijoI;
        public Nodo(final int value){
            this.value = value;
        }
        public Nodo(){}
        @Override
        public String toString() {
            return "" + value +" posHI: "+posHijoI+" posHD: "+posHijoD;
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        while((casos--) > 0){
            System.out.println("Caso #"+(cnt++)+":");
            int tamanoArbol = Integer.parseInt(br.readLine());
            final Nodo arbol[] = new Nodo[tamanoArbol];
            int pivote = 0;
            int indice = 1;
            final Map<Integer,String> items = new HashMap<Integer,String>();
            while((tamanoArbol--) > 0){
                final String linea = br.readLine();
                final String[] particion =  linea.split(" ");
                if(particion.length > 1){ 
                    final Nodo padre = new Nodo();
                    padre.value = Integer.parseInt(particion[0]);
                    if(arbol[0]!=null){
                        if(padre.value == arbol[pivote].value){
                            int indiceInicio = indice;
                            int cuentas = 1;
                            while(cuentas < particion.length){
                                Nodo hijo = new Nodo(Integer.parseInt(particion[cuentas++]));
                                arbol[indice++] = hijo;
                            }
                            padre.posHijoI = indiceInicio;
                            padre.posHijoD = indice-1; 
                            arbol[pivote] = padre;
                            pivote +=1;
                        }else{
                           items.put(padre.value, linea);
                        }
                    }else{
                        int cuentas = 1;
                        while(cuentas < particion.length){
                            Nodo hijo = new Nodo(Integer.parseInt(particion[cuentas++]));
                            arbol[indice++] = hijo;
                        }
                        padre.posHijoI = pivote+1;
                        padre.posHijoD = indice-1; 
                        arbol[pivote] = padre;
                        pivote +=1;
                    }
                }
            }
            if(!items.isEmpty()){
                for(int i = 0;i<arbol.length;++i){
                    if(items.containsKey(arbol[i].value)){
                        String[] cadenaSplit = items.get(arbol[i].value).split(" ");
                        int cuentica = 1;
                        int indiceInicio = indice;
                        while(cuentica < cadenaSplit.length){
                            Nodo hijo = new Nodo(Integer.parseInt(cadenaSplit[cuentica++]));
                            arbol[indice++] = hijo;
                        }
                        arbol[i].posHijoI = indiceInicio;
                        arbol[i].posHijoD = indice - 1;
                    }
                }
            }
            final Deque<Nodo> dequesito = new ArrayDeque<>();
            final Deque<Nodo> colita = new ArrayDeque<>();
            colita.addLast(arbol[0]);
            while(true){
                while(!colita.isEmpty()){
                    final Nodo aux = colita.removeFirst();
                    System.out.print(aux.value+" ");
                    if(aux.posHijoI == 0)
                        continue;
                    for(int i = aux.posHijoI;i<=aux.posHijoD;++i)
                        dequesito.addLast(arbol[i]);
                }
                while(!dequesito.isEmpty()){
                    final Nodo aux = dequesito.removeLast();
                    System.out.print(aux.value+" ");
                    if(aux.posHijoI == 0)
                        continue;
                    for(int i = aux.posHijoD;i>=aux.posHijoI;--i)
                        colita.addFirst(arbol[i]);
                }
                if(colita.isEmpty() && dequesito.isEmpty())
                    break;
            }
            System.out.println();
        }
    }  
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios_Finales_Arboles_Buffer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class MainC {
    static int acumulado,acumulado2,mayor;
    static Nodo raiz;
    public static class Nodo{
        int value;
        int peso;
        Nodo hijoI;
        Nodo hijoD;
        public Nodo(final int value){
            this.value = value;
            hijoD = hijoI = null;
            
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        while((casos--)>0){
            int numNodos = Integer.parseInt(br.readLine());
            int pesos[] = new int[numNodos];
            String[] split = br.readLine().split(" ");
            for(int i = 0;i<numNodos;++i)
                pesos[i] = Integer.parseInt(split[i]);
            --numNodos;
            Map<Integer,Nodo> items = new HashMap<Integer,Nodo>();
            while((numNodos--)>0){
                String[] datosSplit = br.readLine().split(" ");
                final int datoPadre = Integer.parseInt(datosSplit[0]);
                final int datoHijo = Integer.parseInt(datosSplit[1]);
                if(!items.isEmpty()){
                    Nodo padre,hijo;
                    padre = items.get(datoPadre);
                    hijo =  new Nodo(datoHijo);
                    padre.peso = pesos[datoPadre-1];
                    hijo.peso = pesos[datoHijo-1];
                    if(padre.hijoD == null){
                        padre.hijoD = hijo;
                        items.put(datoPadre,padre);
                        items.put(datoHijo,hijo);
                    }else{
                        padre.hijoI = hijo;
                        items.put(datoHijo,hijo);
                    }
                }else{
                    Nodo padre = new Nodo(datoPadre);
                    Nodo hijo = new Nodo(datoHijo);
                    padre.peso = pesos[datoPadre-1];
                    hijo.peso = pesos[datoHijo-1];
                    if(padre.hijoD==null)
                        padre.hijoD = hijo;
                    else
                        padre.hijoI = hijo;
                    items.put(datoPadre, padre);
                    items.put(datoHijo,hijo);
                    raiz = padre;
                }    
            }
            Deque<Nodo> cola = new ArrayDeque<>();
            cola.addLast(raiz);
            mayor = Integer.MAX_VALUE;
            numNodos = 0;
            Nodo hijoD,hijoI;
            while(!cola.isEmpty()){
                Nodo removido = cola.removeFirst();
                if(removido.hijoD!=null){
                    acumulado = 0;
                    acumulado2 = 0;
                    cola.addLast(removido.hijoD);
                    hijoD = removido.hijoD;
                    removido.hijoD = null;
                    inOrderA(raiz);
                    inOrderB(hijoD);
                    numNodos = Math.abs(acumulado2-acumulado);
                    if(numNodos<mayor)
                        mayor = numNodos;
                    removido.hijoD = hijoD;
                }if(removido.hijoI!=null){
                    acumulado = 0;
                    acumulado2 = 0;
                    cola.addLast(removido.hijoI);
                    hijoI = removido.hijoI;
                    removido.hijoI = null;
                    inOrderA(raiz);
                    inOrderB(hijoI);
                    numNodos = Math.abs(acumulado2-acumulado);
                    if(numNodos<mayor)
                        mayor = numNodos;
                    removido.hijoI = hijoI;
                }         
            }
            System.out.println("Caso #"+(cnt++)+":");
            System.out.println(mayor);
        }
    }
    static void inOrderA(final Nodo root){
        if(root!=null){
            inOrderA(root.hijoI);
            acumulado = acumulado+root.peso;
            inOrderA(root.hijoD);
        }
    }
    static void inOrderB(final Nodo root){
        if(root!=null){
            inOrderB(root.hijoI);
            acumulado2 = acumulado2+root.peso;
            inOrderB(root.hijoD);
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Ejercicios_Finales_Arboles_Buffer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class MainD {
    static StringBuilder cadenaA;
    static StringBuilder cadenaB;
    public static class Nodo {
        int dato,fe;
        int ocurrencia;
        Nodo hijoIzquierdo;
        Nodo hijoDerecho;
        public Nodo(final int dato){
            this.dato = dato;
            this.fe = 0;
            ocurrencia = 1;
            this.hijoIzquierdo = this.hijoDerecho = null;
        }
        public Nodo(final int dato,final int ocurrencia){
            this.dato = dato;
            this.fe = 0;
            this.ocurrencia = ocurrencia;
            this.hijoIzquierdo = this.hijoDerecho = null;
        }
    }
    public static class ArbolAVL {
        Nodo raiz;
        public ArbolAVL() {
            this.raiz = null;
        }
        public Nodo getRaiz() {
            return raiz;
        }
        public Nodo buscar(int dato, Nodo r) {
            if (raiz != null) {
                if(r == null)
                    return null;
                if (r.dato == dato) {
                    return r;
                } else if (r.dato < dato) {
                    return buscar(dato, r.hijoDerecho);
                } else {
                    return buscar(dato, r.hijoIzquierdo);
                }
            }else 
                return null;
            
        }
        public int obtenerFE(Nodo x) {
            if (x == null) {
                return -1;
            } else {
                return x.fe;
            }
        }
        public Nodo rotacionIzquierda(Nodo c) {
            Nodo aux = c.hijoIzquierdo;
            c.hijoIzquierdo = aux.hijoDerecho;
            aux.hijoDerecho = c;
            c.fe = Math.max(obtenerFE(c.hijoIzquierdo), obtenerFE(c.hijoDerecho)) + 1;
            aux.fe = Math.max(obtenerFE(aux.hijoIzquierdo), obtenerFE(aux.hijoDerecho)) + 1;
            return aux;
        }
        public Nodo rotacionDerecha(Nodo c) {
            Nodo aux = c.hijoDerecho;
            c.hijoDerecho = aux.hijoIzquierdo;
            aux.hijoIzquierdo = c;
            c.fe = Math.max(obtenerFE(c.hijoIzquierdo), obtenerFE(c.hijoDerecho)) + 1;
            aux.fe = Math.max(obtenerFE(aux.hijoIzquierdo), obtenerFE(aux.hijoDerecho)) + 1;
            return aux;
        }
        public Nodo rotacionDobleIzquierda(Nodo c) {
            Nodo tmp = c;
            c.hijoIzquierdo = rotacionDerecha(c.hijoIzquierdo);
            tmp = rotacionIzquierda(c);
            return tmp;
        }
        public Nodo rotacionDobleDerecha(Nodo c) {
            Nodo tmp = c;
            c.hijoDerecho = rotacionIzquierda(c.hijoDerecho);
            tmp = rotacionDerecha(tmp);
            return tmp;
        }
        public Nodo insertarAVL(Nodo nuevo, Nodo subArbol) {
            Nodo nuevoPadre = subArbol;
            if (nuevo.dato < subArbol.dato) {
                if (subArbol.hijoIzquierdo == null) {
                    subArbol.hijoIzquierdo = nuevo;
                } else {
                    subArbol.hijoIzquierdo = insertarAVL(nuevo, subArbol.hijoIzquierdo);
                    if (obtenerFE(subArbol.hijoIzquierdo) - obtenerFE(subArbol.hijoDerecho) == 2) {
                        if (nuevo.dato < subArbol.hijoIzquierdo.dato) {
                            nuevoPadre = rotacionIzquierda(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleIzquierda(subArbol);
                        }
                    }
                }
            } else if (nuevo.dato > subArbol.dato) {
                if (subArbol.hijoDerecho == null) {
                    subArbol.hijoDerecho = nuevo;
                } else {
                    subArbol.hijoDerecho = insertarAVL(nuevo, subArbol.hijoDerecho);
                    if (obtenerFE(subArbol.hijoDerecho) - obtenerFE(subArbol.hijoIzquierdo) == 2) {
                        if (nuevo.dato > subArbol.hijoDerecho.dato) {
                            nuevoPadre = rotacionDerecha(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleDerecha(subArbol);
                        }
                    }
                }
            } else {
                    subArbol.ocurrencia = ++subArbol.ocurrencia;             
            }
            if (subArbol.hijoIzquierdo == null && subArbol.hijoDerecho != null) {
                subArbol.fe = subArbol.hijoDerecho.fe + 1;
            } else if (subArbol.hijoDerecho == null && subArbol.hijoIzquierdo != null) {
                subArbol.fe = subArbol.hijoIzquierdo.fe + 1;
            } else {
                subArbol.fe = Math.max(obtenerFE(subArbol.hijoIzquierdo), obtenerFE(subArbol.hijoDerecho)) + 1;
            }
            return nuevoPadre;
        }
        public Nodo insertarAVLUnir(Nodo nuevo, Nodo subArbol,final int ocurr) {
            Nodo nuevoPadre = subArbol;
            if (nuevo.dato < subArbol.dato) {
                if (subArbol.hijoIzquierdo == null) {
                    subArbol.hijoIzquierdo = nuevo;
                } else {
                    subArbol.hijoIzquierdo = insertarAVLUnir(nuevo, subArbol.hijoIzquierdo,ocurr);
                    if (obtenerFE(subArbol.hijoIzquierdo) - obtenerFE(subArbol.hijoDerecho) == 2) {
                        if (nuevo.dato < subArbol.hijoIzquierdo.dato) {
                            nuevoPadre = rotacionIzquierda(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleIzquierda(subArbol);
                        }
                    }
                }
            } else if (nuevo.dato > subArbol.dato) {
                if (subArbol.hijoDerecho == null) {
                    subArbol.hijoDerecho = nuevo;
                } else {
                    subArbol.hijoDerecho = insertarAVLUnir(nuevo, subArbol.hijoDerecho,ocurr);
                    if (obtenerFE(subArbol.hijoDerecho) - obtenerFE(subArbol.hijoIzquierdo) == 2) {
                        if (nuevo.dato > subArbol.hijoDerecho.dato) {
                            nuevoPadre = rotacionDerecha(subArbol);
                        } else {
                            nuevoPadre = rotacionDobleDerecha(subArbol);
                        }
                    }
                }
            } else {
                    subArbol.ocurrencia = subArbol.ocurrencia+ocurr;             
            }
            if (subArbol.hijoIzquierdo == null && subArbol.hijoDerecho != null) {
                subArbol.fe = subArbol.hijoDerecho.fe + 1;
            } else if (subArbol.hijoDerecho == null && subArbol.hijoIzquierdo != null) {
                subArbol.fe = subArbol.hijoIzquierdo.fe + 1;
            } else {
                subArbol.fe = Math.max(obtenerFE(subArbol.hijoIzquierdo), obtenerFE(subArbol.hijoDerecho)) + 1;
            }
            return nuevoPadre;
        }
        public void insertar(int d) {
            Nodo nuevo = new Nodo(d);
            if (raiz != null) {
                raiz = insertarAVL(nuevo, raiz);
            } else {
                raiz = nuevo;  
            }
        }
        public void insertarUnir(final int d,final int ocurr) {
            Nodo nuevo = new Nodo(d,ocurr);
            if (raiz == null) {
                raiz = nuevo;
            } else {
                raiz = insertarAVLUnir(nuevo, raiz,ocurr);
            }
        }
        public Nodo obtenerNodo(Nodo remplazo){
            Nodo remPadre = remplazo;
            Nodo rempla = remplazo;
            Nodo auxiliar = remplazo.hijoDerecho;
            while(auxiliar!=null){
                remPadre = rempla;
                rempla = auxiliar;
                auxiliar = auxiliar.hijoIzquierdo;
            }
            if(rempla!=remplazo.hijoDerecho){
                remPadre.hijoIzquierdo = rempla.hijoDerecho;
                rempla.hijoDerecho = remplazo.hijoDerecho;
            }
            return rempla;
        }
        public void unirAVL(ArbolAVL arbol,Nodo raiz){
            if(raiz != null){
                unirAVL(arbol,raiz.hijoIzquierdo);
                arbol.insertarUnir(raiz.dato, raiz.ocurrencia);
                unirAVL(arbol,raiz.hijoDerecho);
            }
        }
    }
       public static void inOrdenA(Nodo r){
            if(r!=null){
                inOrdenA(r.hijoIzquierdo);
                cadenaA.append(r.dato);
                cadenaA.append(" ");
                inOrdenA(r.hijoDerecho);
            }
        }
        public static void inOrdenB(Nodo r){
            if(r!=null){
                inOrdenB(r.hijoIzquierdo);
                cadenaB.append(r.dato);
                cadenaB.append(" ");
                inOrdenB(r.hijoDerecho);
            }
        }
    static void compararArboles(ArbolAVL contenedor,ArbolAVL base){
        cadenaA = new StringBuilder();
        cadenaB = new StringBuilder();
        inOrdenA(contenedor.raiz);
        inOrdenB(base.raiz);
        String mostaza = cadenaA.toString();
        if(mostaza.contains(cadenaB.toString()))
            System.out.println("contiene: Yes");
        else
            System.out.println("contiene: No");
    }
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int comandos = Integer.parseInt(br.readLine());
        final Map<Integer,ArbolAVL> arboles = new HashMap<Integer,ArbolAVL>();
         while((comandos--)>0){
             final String line = br.readLine();
             final String[] comando = line.split(" ");
             int reutilizable;
             switch(line.charAt(2)){
                 case 's':
                     reutilizable = Integer.parseInt(comando[1]);
                     if(arboles.containsKey(reutilizable)){
                         ArbolAVL current = arboles.get(reutilizable);
                         current.insertar(Integer.parseInt(comando[2]));
                         arboles.remove(reutilizable);
                         arboles.put(reutilizable, current);
                     }
                     break;
                 case 'i':
                     reutilizable = Integer.parseInt(comando[1]);
                     ArbolAVL inicio = arboles.get(reutilizable);
                     reutilizable = Integer.parseInt(comando[2]);
                     ArbolAVL fin = arboles.get(reutilizable);
                     if(inicio !=null && fin!=null){
                        inicio.unirAVL(inicio, fin.raiz);
                        fin = null;
                        arboles.remove(reutilizable);
                     }
                     break;
                 case 'n':
                     reutilizable = Integer.parseInt(comando[1]);
                     ArbolAVL contenedor = arboles.get(reutilizable);
                     reutilizable = Integer.parseInt(comando[2]);
                     ArbolAVL base = arboles.get(reutilizable);
                     if(contenedor !=null && base!=null){
                        compararArboles(contenedor,base);
                     }
                     break;
                 case 'u':
                     reutilizable = Integer.parseInt(comando[1]);
                     if(arboles.containsKey(reutilizable)){
                         ArbolAVL arbor = arboles.get(reutilizable);
                         Nodo x = arbor.buscar(Integer.parseInt(comando[2]),arbor.raiz);
                         if(x!=null)
                             System.out.println("ocurrencia: "+x.ocurrencia);
                         else
                             System.out.println("ocurrencia: "+0);
                     }
                     break;
                 case 'e':
                     if(!arboles.isEmpty()){
                         reutilizable = Integer.parseInt(comando[1]);
                         if(!arboles.containsKey(reutilizable)){
                            ArbolAVL arbolito = new ArbolAVL();
                            arbolito.insertar(Integer.parseInt(comando[2]));
                            arboles.put(reutilizable, arbolito);
                         }
                     }else{
                        ArbolAVL arbolito = new ArbolAVL();
                        reutilizable = Integer.parseInt(comando[1]);
                        arbolito.insertar(Integer.parseInt(comando[2]));
                        arboles.put(reutilizable, arbolito); 
                     }
                     break;
             }
         }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package EjercicioA_C_buff.final_A;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

public class Main {
    public static class Equipo{
        int id;
        int problemasResuletos;
        int tiempoPenalizacion;
        HashMap<Integer,Integer> puntos;
        int acumulador;
        public Equipo(){
            problemasResuletos = 0;
            tiempoPenalizacion = 0;
            acumulador = 0;
            puntos = new HashMap<Integer,Integer>();
        }
        public Equipo(final int id,final int pRes,final int tPe){
            this.id = id;
            problemasResuletos = pRes;
            tiempoPenalizacion = tPe;
        }
        @Override
        public String toString(){
            return id+" "+problemasResuletos+" "+tiempoPenalizacion;
        }
    }
    private static Comparator<Equipo> comp = new Comparator<Equipo>(){

        @Override
        public int compare(Equipo o1, Equipo o2) {
            if(o1.problemasResuletos == o2.problemasResuletos){
                if(o1.tiempoPenalizacion>o2.tiempoPenalizacion)
                    return 1;
                if(o1.tiempoPenalizacion<o2.tiempoPenalizacion)
                    return -1;
                if(o1.tiempoPenalizacion==o2.tiempoPenalizacion){
                    if(o1.id>o2.id)
                        return 1;
                    else
                        return -1;
                }
            }
            if(o1.problemasResuletos>o2.problemasResuletos)
                return -1;
            if(o1.problemasResuletos<o2.problemasResuletos)
                return 1;
            return 0;
        }
        
    };
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine()); 
        int cnt = 1;
        while((casos--)>0){
            String[] split = br.readLine().split(" ");
            int size = Integer.parseInt(split[0]);
            int nLineas = Integer.parseInt(split[1]);
            final Map<Integer,Equipo> contenedor = new HashMap<Integer,Equipo>();
            while((nLineas--)>0){
                split = br.readLine().split(" ");
                int id = Integer.parseInt(split[0]);
                if(contenedor.containsKey(id)){
                        int example = Integer.parseInt(split[1]);
                        int tiempo = Integer.parseInt(split[2]);
                        Equipo equipo = contenedor.get(id);
                        String resuelto = split[3];
                        if(!resuelto.equals("C")){
                            if(!equipo.puntos.containsKey(example))
                                equipo.puntos.put(example,20);
                            else{
                                int value = equipo.puntos.get(example)+20;
                                equipo.puntos.remove(example);
                                equipo.puntos.put(example, value);
                            }
                        }else{
                            if(!equipo.puntos.containsKey(example))
                                equipo.tiempoPenalizacion += tiempo;
                            else
                                equipo.tiempoPenalizacion += tiempo+equipo.puntos.get(example);
                            equipo.problemasResuletos +=1;
                        }
                }else{
                    int example = Integer.parseInt(split[1]);
                    int tiempo = Integer.parseInt(split[2]);
                    String resuelto = split[3];
                    Equipo equipo = new Equipo();
                    equipo.id = id;
                    if (!resuelto.equals("C")) {
                        equipo.puntos.put(example, 20);
                    } else {
                        equipo.tiempoPenalizacion = tiempo;
                        equipo.problemasResuletos = 1;
                    }
                    contenedor.put(id, equipo);
                }
            }
            System.out.println("Caso #"+(cnt++)+":");
            for (int i = 0; i < contenedor.size(); ++i) {
                Equipo aux = contenedor.get(i);
                if (aux != null) {
                    if (aux.problemasResuletos == 0) {
                        aux.tiempoPenalizacion = 0;
                        contenedor.remove(aux.id);
                        contenedor.put(aux.id, aux);
                    }
                }
            }
            Equipo[] arreglo = new Equipo[size];
            Equipo nada = new Equipo();
            Arrays.fill(arreglo,nada);
            for(int i = 1;i<=arreglo.length;++i){
                nada = contenedor.get(i);
                if(nada!=null)
                    arreglo[i-1] = nada;
                
            }
            Arrays.sort(arreglo,comp);
            for(int i = 0;i<arreglo.length;++i){
                if(arreglo[i].id == 0)
                    continue;
                System.out.println(arreglo[i]);
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package EjercicioA_C_buff.final_C;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;

public class Main {
    private static int cnt;
    private static HashMap<String,Persona> visitados;
    public static class Persona{
        final String llave;
        final Deque<Persona> amigos;
        public Persona(final String llave){
            this.llave = llave;
            amigos = new ArrayDeque<>();
        }
    }
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cntX = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cntX++)+":");
            final HashMap<String,Persona> redSocial = new HashMap<>();
            int lineas = Integer.parseInt(br.readLine());
            while((lineas--)>0){
                final String[] split = br.readLine().split(" ");
                final Persona A;
                final Persona B;
                cnt = 2;
                if (!redSocial.containsKey(split[0]) && !redSocial.containsKey(split[1])) {
                    A = new Persona(split[0]);
                    B = new Persona(split[1]);
                    A.amigos.addLast(B);
                    B.amigos.addLast(A);
                    redSocial.put(split[0], A);
                    redSocial.put(split[1], B);
                } else if (redSocial.containsKey(split[0]) && !redSocial.containsKey(split[1])) {
                    A = redSocial.get(split[0]);
                    B = new Persona(split[1]);
                    A.amigos.addLast(B);
                    B.amigos.addLast(A);
                    redSocial.put(split[1], B);
                } else if (!redSocial.containsKey(split[0]) && redSocial.containsKey(split[1])) {
                    A = new Persona(split[0]);
                    B = redSocial.get(split[1]);
                    A.amigos.addLast(B);
                    B.amigos.addLast(A);
                    redSocial.put(split[0], A);
                } else {
                    A = redSocial.get(split[0]);
                    B = redSocial.get(split[1]);
                    A.amigos.addLast(B);
                    B.amigos.addLast(A);
                }
                Deque<Persona> a = new ArrayDeque(A.amigos);
                Deque<Persona> b = new ArrayDeque(B.amigos);
                visitados = new HashMap<>();
                visitados.put(A.llave, A);
                visitados.put(B.llave, B);
                contarAmigos(a);
                contarAmigos(b);
                System.out.println(cnt);
            }
        }  
    }
    public static void contarAmigos(final Deque<Persona> a){
        while(!a.isEmpty()){
            final Persona amigo = a.removeFirst();
            if(visitados.containsKey(amigo.llave))
                continue;
            final Deque<Persona> per = new ArrayDeque<>(amigo.amigos);
            while(!per.isEmpty()){
                final Persona friend = per.removeFirst();
                if(visitados.containsKey(friend.llave))
                    continue;
                a.addLast(friend);
            }
            visitados.put(amigo.llave, amigo);
            ++cnt;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Heaps_A.first_v02;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
public class Main {
    
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int size = Integer.parseInt(br.readLine());
        int cnt = 0;
        final String[] line = br.readLine().split(" ");
        final int mayores[] = new int[3];
        while((size--)>0){
            if(cnt>2){
                int aux = Integer.parseInt(line[cnt]);
                if(aux>mayores[0]){
                    mayores[0] = mayores[1];
                    mayores[1] = mayores[2];
                    mayores[2] = aux;
                    Arrays.sort(mayores);
                }
                System.out.println(mayores[0]*mayores[1]*mayores[2]);
            }else{
                mayores[cnt] = Integer.parseInt(line[cnt]);
                if(cnt == 2)
                    System.out.println(mayores[0]*mayores[1]*mayores[2]);
                else
                    System.out.println(-1);
            }  
            ++cnt;
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Heaps_A.first_Buff;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;

public class Main {
    public static final Comparator<Integer> comp = new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            if(o1<o2)
                return 1;
            else
                return -1;
        }
    
    };
    public static void ejecutar() throws IOException{
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int size = Integer.parseInt(br.readLine());
        int cnt = 0;
        final Queue<Integer> cola; 
        cola = new PriorityQueue<>(size,comp); 
        final String[] line = br.readLine().split(" ");
        while((size--)>0){
            cola.add(Integer.parseInt(line[cnt]));
            if(cnt<2)
                System.out.println(-1);
            else{
                 Queue<Integer> colita = new PriorityQueue<>(cola);
                 System.out.println(colita.poll()*colita.poll()*colita.poll());
            }
            ++cnt;
        }   
    }
    public static void main(String[] args) throws IOException {
        ejecutar();
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Del_Otro_Proyecto;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.TreeSet;

public class MainBuff {
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            int carreras = Integer.parseInt(br.readLine());
            final Deque<String> lineas = new ArrayDeque<>();
            while((carreras--)>0){
                final String[] split = br.readLine().split(" ");
                for(int i = 0;i<split.length;++i)
                    lineas.addLast(split[i]);
            }
            final Double[] arr = new Double[lineas.size()];
            for(int i = 0;i<arr.length;++i)
                arr[i] = Double.parseDouble(lineas.removeFirst());
            carreras = Integer.parseInt(br.readLine());
            while((carreras--)>0){
                String[] split = br.readLine().split(" ");
                switch(split[0].charAt(1)){
                    case 'o':
                        int ind = Integer.parseInt(split[1]);
                        int doub = Integer.parseInt(split[2]);
                        final TreeSet<Double> arbol = new TreeSet<>();
                        for(;ind<=doub;++ind)
                            arbol.add(arr[ind]);
                        String last = String.valueOf(arbol.last());
                        String first = String.valueOf(arbol.first());
                        if(last.endsWith("0"))
                            last = last.substring(0, last.length()-2);
                        if(first.endsWith("0"))
                            first = first.substring(0,first.length()-2);
                        System.out.println(last+" "+first);
                        break;
                    case 'a':
                        int indice = Integer.parseInt(split[1]);
                        double dou = Double.parseDouble(split[2]);
                        arr[indice] = dou;
                        break;
                }
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Heaps_C.buff;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;

public class Main {
    
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            String[] split = br.readLine().split(" ");
            int size = Integer.parseInt(split[0]);
            int rondas = Integer.parseInt(split[1]);
            final int arr[] = new int[size];
            split = br.readLine().split(" ");
            for(int i = 0;i<size;++i)
                arr[i] = Integer.parseInt(split[i]);
            while((rondas--)>0){ 
                split = br.readLine().split(" ");
                switch(split[0].charAt(0)){
                    case 'm':
                        size = Integer.parseInt(split[1])-1;
                        int limite = Integer.parseInt(split[2])-1;
                        BigInteger acumm = new BigInteger("1");
                        for(;size<=limite;++size){
                            BigInteger aux = new BigInteger(String.valueOf(arr[size]));
                            acumm = acumm.multiply(aux);
                        }
                        if(acumm.longValue()<0)
                            System.out.println("-");
                        else if(acumm.longValue()>0)
                            System.out.println("+");
                        else
                            System.out.println(0);
                        break;
                    case 'c':
                        arr[Integer.parseInt(split[1])-1] = Integer.parseInt(split[2]);
                        break;
                }
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Heaps_C.buff;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;

public class Main {
    
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            String[] split = br.readLine().split(" ");
            int size = Integer.parseInt(split[0]);
            int rondas = Integer.parseInt(split[1]);
            final int arr[] = new int[size];
            split = br.readLine().split(" ");
            for(int i = 0;i<size;++i)
                arr[i] = Integer.parseInt(split[i]);
            while((rondas--)>0){ 
                split = br.readLine().split(" ");
                switch(split[0].charAt(0)){
                    case 'm':
                        size = Integer.parseInt(split[1])-1;
                        int limite = Integer.parseInt(split[2])-1;
                        BigInteger acumm = new BigInteger("1");
                        for(;size<=limite;++size){
                            BigInteger aux = new BigInteger(String.valueOf(arr[size]));
                            acumm = acumm.multiply(aux);
                        }
                        if(acumm.doubleValue()<0)
                            System.out.println("-");
                        else if(acumm.doubleValue()>0)
                            System.out.println("+");
                        else
                            System.out.println(0);
                        break;
                    case 'c':
                        arr[Integer.parseInt(split[1])-1] = Integer.parseInt(split[2]);
                        break;
                }
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Heaps_C.buff;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;

public class Main {
    
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        System.out.println("");
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            String[] split = br.readLine().split(" ");
            int size = Integer.parseInt(split[0]);
            int rondas = Integer.parseInt(split[1]);
            final int arr[] = new int[size];
            split = br.readLine().split(" ");
            for(int i = 0;i<size;++i)
                arr[i] = Integer.parseInt(split[i]);
            while((rondas--)>0){ 
                split = br.readLine().split(" ");
                switch(split[0].charAt(0)){
                    case 'm':
                        size = Integer.parseInt(split[1])-1;
                        int limite = Integer.parseInt(split[2])-1;
                        BigInteger acumm = new BigInteger("1");
                        for(;size<=limite;++size){
                            BigInteger aux = new BigInteger(String.valueOf(arr[size]));
                            acumm = acumm.multiply(aux);
                        }
                        if(acumm.doubleValue()<0)
                            System.out.println("-");
                        else if(acumm.doubleValue()>0)
                            System.out.println("+");
                        else
                            System.out.println(0);
                        break;
                    case 'c':
                        arr[Integer.parseInt(split[1])-1] = Integer.parseInt(split[2]);
                        break;
                }
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package Heap_D;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.TreeSet;

public class MainBuff {
    public static void main(String[] args) throws IOException {
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        while((casos--)>0){
            System.out.println("Caso #"+(cnt++)+":");
            int carreras = Integer.parseInt(br.readLine());
            final Deque<String> lineas = new ArrayDeque<>();
            while((carreras--)>0){
                final String[] split = br.readLine().split(" ");
                for(int i = 0;i<split.length;++i)
                    lineas.addLast(split[i]);
            }
            final Double[] arr = new Double[lineas.size()];
            for(int i = 0;i<arr.length;++i)
                arr[i] = Double.parseDouble(lineas.removeFirst());
            carreras = Integer.parseInt(br.readLine());
            while((carreras--)>0){
                String[] split = br.readLine().split(" ");
                switch(split[0].charAt(1)){
                    case 'o':
                        int ind = Integer.parseInt(split[1]);
                        int doub = Integer.parseInt(split[2]);
                        final TreeSet<Double> arbol = new TreeSet<>();
                        for(;ind<=doub;++ind)
                            arbol.add(arr[ind]);
                        String last = String.valueOf(arbol.last());
                        String first = String.valueOf(arbol.first());
                        if(last.endsWith("0"))
                            last = last.substring(0, last.length()-2);
                        if(first.endsWith("0"))
                            first = first.substring(0,first.length()-2);
                        System.out.println(last+" "+first);
                        break;
                    case 'a':
                        int indice = Integer.parseInt(split[1]);
                        double dou = Double.parseDouble(split[2]);
                        arr[indice] = dou;
                        break;
                }
            }
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>

package Ejercicios_Finales_Arboles_Buffer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class MainC {
    static int acumulado,acumulado2,mayor;
    static Nodo raiz;
    public static class Nodo{
        int value;
        int peso;
        Nodo hijoI;
        Nodo hijoD;
        public Nodo(final int value){
            this.value = value;
            hijoD = hijoI = null;
            
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int casos = Integer.parseInt(br.readLine());
        int cnt = 1;
        while((casos--)>0){
            int numNodos = Integer.parseInt(br.readLine());
            int pesos[] = new int[numNodos];
            String[] split = br.readLine().split(" ");
            for(int i = 0;i<numNodos;++i)
                pesos[i] = Integer.parseInt(split[i]);
            --numNodos;
            Map<Integer,Nodo> items = new HashMap<Integer,Nodo>();
            while((numNodos--)>0){
                String[] datosSplit = br.readLine().split(" ");
                final int datoPadre = Integer.parseInt(datosSplit[0]);
                final int datoHijo = Integer.parseInt(datosSplit[1]);
                if(!items.isEmpty()){
                    Nodo padre,hijo;
                    padre = items.get(datoPadre);
                    hijo =  new Nodo(datoHijo);
                    padre.peso = pesos[datoPadre-1];
                    hijo.peso = pesos[datoHijo-1];
                    if(padre.hijoD == null){
                        padre.hijoD = hijo;
                        items.put(datoPadre,padre);
                        items.put(datoHijo,hijo);
                    }else{
                        padre.hijoI = hijo;
                        items.put(datoHijo,hijo);
                    }
                }else{
                    Nodo padre = new Nodo(datoPadre);
                    Nodo hijo = new Nodo(datoHijo);
                    padre.peso = pesos[datoPadre-1];
                    hijo.peso = pesos[datoHijo-1];
                    if(padre.hijoD==null)
                        padre.hijoD = hijo;
                    else
                        padre.hijoI = hijo;
                    items.put(datoPadre, padre);
                    items.put(datoHijo,hijo);
                    raiz = padre;
                }    
            }
            Deque<Nodo> cola = new ArrayDeque<>();
            cola.addLast(raiz);
            mayor = Integer.MAX_VALUE;
            numNodos = 0;
            Nodo hijoD,hijoI;
            while(!cola.isEmpty()){
                Nodo removido = cola.removeFirst();
                if(removido.hijoD!=null){
                    acumulado = 0;
                    acumulado2 = 0;
                    cola.addLast(removido.hijoD);
                    hijoD = removido.hijoD;
                    removido.hijoD = null;
                    inOrderA(raiz);
                    inOrderB(hijoD);
                    numNodos = Math.abs(acumulado2-acumulado);
                    if(numNodos<mayor)
                        mayor = numNodos;
                    removido.hijoD = hijoD;
                }if(removido.hijoI!=null){
                    acumulado = 0;
                    acumulado2 = 0;
                    cola.addLast(removido.hijoI);
                    hijoI = removido.hijoI;
                    removido.hijoI = null;
                    inOrderA(raiz);
                    inOrderB(hijoI);
                    numNodos = Math.abs(acumulado2-acumulado);
                    if(numNodos<mayor)
                        mayor = numNodos;
                    removido.hijoI = hijoI;
                }         
            }
            System.out.println("Caso #"+(cnt++)+":");
            System.out.println(mayor);
        }
    }
    static void inOrderA(final Nodo root){
        if(root!=null){
            inOrderA(root.hijoI);
            acumulado = acumulado+root.peso;
            inOrderA(root.hijoD);
        }
    }
    static void inOrderB(final Nodo root){
        if(root!=null){
            inOrderB(root.hijoI);
            acumulado2 = acumulado2+root.peso;
            inOrderB(root.hijoD);
        }
    }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
