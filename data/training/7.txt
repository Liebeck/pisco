import java.util.Scanner;

public class operadores {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner in= new Scanner(System.in);
		byte n= in.nextByte();
		
		
		
		for (byte a=0; a<n;a++ ){
			Scanner nu= new Scanner(System.in);
			
			byte num=nu.nextByte();  //numero de caracteres
			
			int[] let= new int[num]; //arreglo de numeros: donde estaran los numeros digitados
				Scanner car=new Scanner(System.in); //assignar los numeros
			    byte b=0;
			       for(byte c=0;b<let.length;c++){
				
				      let[b]=car.nextInt();
			          b++;
			        }
			
		byte e=0;
		byte f=0;
		byte g=0;
		for(byte x=0;x<let.length;x++){
			for(byte y=0;y<let.length;y++){
				if(x!=y){
					
					
					if(let[x]>let[y]){
						e=(byte) (e+1);
					}
					
					if(let[x]<let[y]){
						f=(byte)(f+1);
					}
					
					if(let[x]==let[y]){
						g=(byte)(g+1);
					}
				}
			}
		}
		System.out.println("Case #"+(a+1)+":");
		System.out.println(e);
		System.out.println(f);
		System.out.println(g);
			
		}
		
		

	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package ejercicio2;
import java.util.Scanner;

public class winners {
	public static void main(String[] args) {
		Scanner n= new Scanner(System.in);
		byte z=0;
		//for(byte z=0;z<3;z++){
        while(n.hasNextLine()){
        	
		
		byte N=n.nextByte();
		
		byte[][] tablero= new byte[N][N];
		Scanner value= new Scanner(System.in);
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				
				byte val=value.nextByte();
				tablero[i][j]=val;
				
			}
			
		}
		
	
		
		int e=0;
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				int c=0;
				int d=0;
				
				c=c+tablero[i][j];
				d=d+tablero[i][j];
				
				 for(byte a=0;a<tablero.length; a++){
				if(a!=i || a!=j){
				c=c+tablero[i][a];
				d=d+tablero[a][j];
				
				
				}
			 }
				if(c<d){
					e=e+1;
				}
			
			}
			
		}
		System.out.println("Case #"+(z+1)+":");
		System.out.println(e);
		
		z=(byte)(z+1);
	}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;

public class winners {
	public static void main(String[] args) {
		Scanner n= new Scanner(System.in);
		byte z=0;
		//for(byte z=0;z<3;z++){
        while(n.hasNextLine()){
        	
		
		byte N=n.nextByte();
		
		byte[][] tablero= new byte[N][N];
		Scanner value= new Scanner(System.in);
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				
				byte val=value.nextByte();
				tablero[i][j]=val;
				
			}
			
		}
		
	
		
		int e=0;
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				int c=0;
				int d=0;
				
				c=c+tablero[i][j];
				d=d+tablero[i][j];
				
				 for(byte a=0;a<tablero.length; a++){
				if(a!=i || a!=j){
				c=c+tablero[i][a];
				d=d+tablero[a][j];
				
				
				}
			 }
				if(c<d){
					e=e+1;
				}
			
			}
			
		}
		System.out.println("Case #"+(z+1)+":");
		System.out.println(e);
		
		z=(byte)(z+1);
	}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package ej4;

import java.util.Scanner;

public class equipos {
	public static void main(String[] args) {
		
		
		Scanner c=new Scanner(System.in);
		byte ca=c.nextByte();
		
		for(byte a=0; a<ca;a++){
			
		 Scanner e=new Scanner(System.in);
		 byte eq=e.nextByte();
		 byte j=0;
		 byte[][] col= new byte[eq][2];
	       if (eq>1 && eq<100){
	    	   
	    	   Scanner colorLoc=new Scanner(System.in);
	    	   for(byte b=0; b<eq;b++){
	    		
	    		   for(byte r=0; r<2;r++){
	    			  
	    				   col[b][r]=colorLoc.nextByte();
	    				   
	    			  
	    		   }
	    	   }
	    		   
	    		   
				   for(byte g=0; g<col.length;g++){
					   for(byte h=0; h<col.length;h++){
						   if(col[g][0]==col[h][1]){
							   j++;
						   }
					   }
				   }
				   System.out.println("Case #"+(a+1)+":");
					 System.out.println(j);
	    	   
	    	   
	       }
	       
		}
		}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;

public class winners {
	public static void main(String[] args) {
		Scanner n= new Scanner(System.in);
		byte z=0;
		//for(byte z=0;z<3;z++){
       if(n.hasNextLine()){
        	
		
		byte N=n.nextByte();
		
		byte[][] tablero= new byte[N][N];
		Scanner value= new Scanner(System.in);
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				
				byte val=value.nextByte();
				tablero[i][j]=val;
				
			}
			
		}
		
	
		
		int e=0;
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				int c=0;
				int d=0;
				
				c=c+tablero[i][j];
				d=d+tablero[i][j];
				
				 for(byte a=0;a<tablero.length; a++){
				if(a!=i || a!=j){
				c=c+tablero[i][a];
				d=d+tablero[a][j];
				
				
				}
			 }
				if(c<d){
					e=e+1;
				}
			
			}
			
		}
		System.out.println("Case #"+(z+1)+":");
		System.out.println(e);
		
		z=(byte)(z+1);
	}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;
public class colors {

	public static void main(String[] args) {

		Scanner n= new Scanner(System.in);
		byte N=n.nextByte();
		Scanner cant= new Scanner(System.in);
		for(byte a=0; a<N;a++){  // numero de casos

			byte c=cant.nextByte();

			char[] letras= new char[c];
			Scanner car=new Scanner(System.in);
			byte x=c;
			int r=letras.length;



			for(byte b=0; b<letras.length;b++){ //insertar datos
				letras[b]=car.next().charAt(0);
				//System.out.print(letras[b]+" ");


			}
			//System.out.println();
			System.out.println("Case #"+(a+1)+":");
			String[] lets=new String[c];
			String word=String.valueOf(letras);

			/*for(byte q=0;q<lets.length;q++){
				String qw=String.valueOf(q);
				lets[q]=qw;
			}*/
			//for(byte s=0; s<lets.length;s++){
				//lets[s]=letras[s];
			//}

			//orden(lets, "",x,r);
			conteo(word,c);
			//ordInscNameAlfa(permutation(word,c));
		}
	}
	public static void conteo(String word,byte w) {
	    conteo("", word,w);
	}

	private static void conteo(String cont, String word, byte w) {
	    byte n = (byte) word.length();
	    String[] y= new String[w];
	    if (n == 0){
	    	/*for(byte f=0; f<y.length;f++){
	    		byte t=0;
	    	for(byte d=0; d<=t;d++){

	    		while(prefix!=y[d]){*/
	    	System.out.println(cont);

	    	/*y[d]=prefix;
	    	t++;
	    		}
	    	}
	    	}**/
	    }else {

	    	//if(cont.contains(cont)){


	        for (byte i = 0; i < n; i++)
	            conteo(cont + word.charAt(i), word.substring(0, i) + word.substring(i+1, n),w);
	    //}
	    }
	}

	/*public static void ordInscNameAlfa(String[] arreglo) {
        int in;

        for (int i = 1 ; i < arreglo.length ; i++) {
            String aux = arreglo[i];
            in = i;    //inicia el desplazamiento en i

            while (in > 0 && arreglo[in - 1].compareTo(aux) > 0) {
                arreglo[in] = arreglo[in - 1];    //desplaza el elemento hacia la derecha
                --in;
            }

            arreglo[in] = aux;    //inserta elemento
        }
    }*/

	/*private static void orden(String[] let, String act, byte x, int r){
		if( x==0){
			System.out.println(act);
		}else{
			for(byte i=0; i<r; i++){
				if(!act.contains(let[i])){
					orden(let, act+let[i]+",",(byte) (x-1),r);
				}
			}
		}


	}*/
}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;

public class operadores {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner in= new Scanner(System.in);
		byte n= in.nextByte();
		
		
		for (byte a=0; a<n;a++ ){
			
		
			
			
			byte num=in.nextByte();  //numero de caracteres
			
			int[] let= new int[num]; //arreglo de numeros: donde estaran los numeros digitados
				
			    byte b=0;
			       for(byte c=0;b<let.length;c++){
				
				      let[b]=in.nextInt();
			          b++;
			        }
			
		byte e=0;
		byte f=0;
		byte g=0;
		for(byte x=0;x<let.length;x++){
			for(byte y=0;y<let.length;y++){
				if(x!=y){
					
					
					if(let[x]>let[y]){
						e=(byte) (e+1);
					}
					
					if(let[x]<let[y]){
						f=(byte)(f+1);
					}
					
					if(let[x]==let[y]){
						g=(byte)(g+1);
					}
				}
			}
		}
		System.out.println("Case #"+(a+1)+":");
		System.out.println(e);
		System.out.println(f);
		System.out.println(g);
			
		}
		
		

	}
	}




<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;

public class winners {
	public static void main(String[] args) {
		Scanner n= new Scanner(System.in);
		byte z=0;
		//for(byte z=0;z<3;z++){
       while(n.hasNextLine()){
        	
		
		byte N=n.nextByte();
		
		byte[][] tablero= new byte[N][N];
		
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				
				byte val=n.nextByte();
				tablero[i][j]=val;
				
			}
			
		}
		
	
		
		int e=0;
		for(byte i=0;i<tablero.length;i++){
			for(byte j=0;j<tablero.length;j++){
				int c=0;
				int d=0;
				
				c=c+tablero[i][j];
				d=d+tablero[i][j];
				
				 for(byte a=0;a<tablero.length; a++){
				if(a!=i || a!=j){
				c=c+tablero[i][a];
				d=d+tablero[a][j];
				
				
				}
			 }
				if(c<d){
					e=e+1;
				}
			
			}
			
		}
		System.out.println("Case #"+(z+1)+":");
		System.out.println(e);
		
		z=(byte)(z+1);
	}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;
public class colors {

	public static void main(String[] args) {

		Scanner n= new Scanner(System.in);
		byte N=n.nextByte();
		Scanner cant= new Scanner(System.in);
		for(byte a=0; a<N;a++){  // numero de casos

			byte c=cant.nextByte();

			char[] letras= new char[c];
			Scanner car=new Scanner(System.in);
			byte x=c;
			int r=letras.length;



			for(byte b=0; b<letras.length;b++){ //insertar datos
				letras[b]=car.next().charAt(0);
				//System.out.print(letras[b]+" ");


			}
			//System.out.println();
			System.out.println("Case #"+(a+1)+":");
			String[] lets=new String[c];
			String word=String.valueOf(letras);

			/*for(byte q=0;q<lets.length;q++){
				String qw=String.valueOf(q);
				lets[q]=qw;
			}*/
			//for(byte s=0; s<lets.length;s++){
				//lets[s]=letras[s];
			//}

			//orden(lets, "",x,r);
			conteo(word,c);
			//ordInscNameAlfa(permutation(word,c));
		}
	}
	public static void conteo(String word,byte w) {
	    conteo("", word,w);
	}

	private static void conteo(String cont, String word, byte w) {
	    byte n = (byte) word.length();
	    String[] y= new String[w];
	    if (n == 0){
	    	/*for(byte f=0; f<y.length;f++){
	    		byte t=0;
	    	for(byte d=0; d<=t;d++){

	    		while(prefix!=y[d]){*/
	    	System.out.println(cont);

	    	/*y[d]=prefix;
	    	t++;
	    		}
	    	}
	    	}**/
	    }else {

	    	//if(cont.contains(cont)){


	        for (byte i = 0; i < n; i++)
	            conteo(cont + word.charAt(i), word.substring(0, i) + word.substring(i+1, n),w);
	    //}
	    }
	}

	/*public static void ordInscNameAlfa(String[] arreglo) {
        int in;

        for (int i = 1 ; i < arreglo.length ; i++) {
            String aux = arreglo[i];
            in = i;    //inicia el desplazamiento en i

            while (in > 0 && arreglo[in - 1].compareTo(aux) > 0) {
                arreglo[in] = arreglo[in - 1];    //desplaza el elemento hacia la derecha
                --in;
            }

            arreglo[in] = aux;    //inserta elemento
        }
    }*/

	/*private static void orden(String[] let, String act, byte x, int r){
		if( x==0){
			System.out.println(act);
		}else{
			for(byte i=0; i<r; i++){
				if(!act.contains(let[i])){
					orden(let, act+let[i]+",",(byte) (x-1),r);
				}
			}
		}


	}*/
}


<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package ej4;

import java.util.Scanner;

public class equipos {
	public static void main(String[] args) {
		
		
		Scanner c=new Scanner(System.in);
		byte ca=c.nextByte();
		
		for(byte a=0; a<ca;a++){
			
		 
		 byte eq=c.nextByte();
		 byte j=0;
		 byte[][] col= new byte[eq][2];
	       if (eq>1 && eq<100){
	    	   
	    	   
	    	   for(byte b=0; b<eq;b++){
	    		
	    		   for(byte r=0; r<2;r++){
	    			  
	    				   col[b][r]=c.nextByte();
	    				   
	    			  
	    		   }
	    	   }
	    		   
	    		   
				   for(byte g=0; g<col.length;g++){
					   for(byte h=0; h<col.length;h++){
						   if(col[g][0]==col[h][1]){
							   j++;
						   }
					   }
				   }
				   System.out.println("Case #"+(a+1)+":");
					 System.out.println(j);
	    	   
	    	   
	       }
	       
		}
		}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.util.Scanner;
import java.util.Random;

public class unos {
	public static void main(String[] args) {
        Scanner N= new Scanner(System.in);
        Random  m= new Random();
        byte caseNumber= N.nextByte();
        
        for(byte a=0; a<caseNumber; a++){
        	byte cant=N.nextByte();
        	byte[] number= new byte[cant];
        	for(byte b=0; b<cant;b++){
        		number[b]=N.nextByte();
        	}
        byte i=(byte)(m.nextDouble()*cant+0);
        byte j=(byte)(m.nextDouble()*cant+0);
        
        byte k=0;
        for(byte c=0; c<cant; c++){
        	if(i<j){
        		if(c<=j && c>=i){
        			number[c]=(byte)( 1 - number[c]);
        		}
        	}
        	
        	if(j<i){
        		if(c<=i && c>=j){
        			number[c]=(byte)( 1 - number[c]);
        		}
        	}
        	
        	if(number[c]==1){
        		k++;
        	}
        }
        
        System.out.println(k);
        }
        
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

//BinaryHeap class
//
//CONSTRUCTION: with optional capacity (that defaults to 100)
//            or an array containing initial items
//
//******************PUBLIC OPERATIONS*********************
//void insert( x )       --> Insert x
//Comparable deleteMin( )--> Return and remove smallest item
//Comparable findMin( )  --> Return smallest item
//boolean isEmpty( )     --> Return true if empty; else false
//void makeEmpty( )      --> Remove all items
//******************ERRORS********************************
//Throws UnderflowException as appropriate

/**
 * Implements a binary heap. Note that all "matching" is based on the compareTo
 * method.
 * 
 * @param <AnyType>
 */
class BinaryHeap<AnyType extends Comparable<? super AnyType>> {
	/**
	 * Construct the binary heap.
	 */
	public BinaryHeap() {
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Construct the binary heap.
	 * 
	 * @param capacity
	 *            the capacity of the binary heap.
	 */
	public BinaryHeap(int capacity) {
		currentSize = 0;
		array = (AnyType[]) new Comparable[capacity + 1];
	}

	/**
	 * Construct the binary heap given an array of items.
	 * 
	 * @param items
	 */
	public BinaryHeap(AnyType[] items) {
		currentSize = items.length;
		array = (AnyType[]) new Comparable[(currentSize + 2) * 11 / 10];

		int i = 1;
		for (AnyType item : items)
			array[i++] = item;
		buildHeap();
	}

	/**
	 * Insert into the priority queue, maintaining heap order. Duplicates are
	 * allowed.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		if (currentSize == array.length - 1)
			enlargeArray(array.length * 2 + 1);

		// Percolate up
		int hole = ++currentSize;
		for (array[0] = x; x.compareTo(array[hole / 2]) < 0; hole /= 2)
			array[hole] = array[hole / 2];
		array[hole] = x;
	}

	private void enlargeArray(int newSize) {
		AnyType[] old = array;
		array = (AnyType[]) new Comparable[newSize];
		for (int i = 0; i < old.length; i++)
			array[i] = old[i];
	}

	/**
	 * Find the smallest item in the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType findMin() throws Exception {
		if (isEmpty())
			throw new Exception();
		return array[1];
	}

	/**
	 * Remove the smallest item from the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType deleteMin() throws Exception {
		if (isEmpty())
			throw new Exception();

		AnyType minItem = findMin();
		array[1] = array[currentSize--];
		percolateDown(1);

		return minItem;
	}

	/**
	 * Establish heap order property from an arbitrary arrangement of items.
	 * Runs in linear time.
	 */
	private void buildHeap() {
		for (int i = currentSize / 2; i > 0; i--)
			percolateDown(i);
	}

	/**
	 * Test if the priority queue is logically empty.
	 * 
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty() {
		return currentSize == 0;
	}

	/**
	 * Make the priority queue logically empty.
	 */
	public void makeEmpty() {
		currentSize = 0;
	}

	private static final int DEFAULT_CAPACITY = 10;

	private int currentSize; // Number of elements in heap
	private AnyType[] array; // The heap array

	/**
	 * Internal method to percolate down in the heap.
	 * 
	 * @param hole
	 *            the index at which the percolate begins.
	 */
	private void percolateDown(int hole) {
		int child;
		AnyType tmp = array[hole];

		for (; hole * 2 <= currentSize; hole = child) {
			child = hole * 2;
			if (child != currentSize
					&& array[child + 1].compareTo(array[child]) < 0)
				child++;
			if (array[child].compareTo(tmp) < 0)
				array[hole] = array[child];
			else
				break;
		}
		array[hole] = tmp;
	}

	// Test program
	public static void main(String[] args) throws Exception {
		int numItems = 10000;
		BinaryHeap<Integer> h = new BinaryHeap<>();
		int i = 37;

		for (i = 37; i != 0; i = (i + 37) % numItems)
			h.insert(i);
		for (i = 1; i < numItems; i++)
			if (h.deleteMin() != i)
				System.out.println("Oops! " + i);
	}
}

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x ) --> Insert x
// void remove( x ) --> Remove x
// boolean contains( x ) --> Return true if x is present
// void makeEmpty( ) --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */
class SeparateChainingHashTable<AnyType> {
	/**
	 * Construct the hash table.
	 */

	class selec implements Comparable<selec> {
		int menor;
		int pos;

		public selec(int men, int p) {

			this.menor = men;
			this.pos = p;

		}

		// @override

		public int compareTo(selec x) {
			if (menor < x.menor) {
				return -1;
			} else if (menor > x.menor) {
				return 1;
			} else

				return 0;
		}
	}

	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[size];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
		colisiones = 0;

	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		// if (!whichList.contains(x)) {
		whichList.add(x);
		if (whichList.size() > 1) {
			colisiones++;
		}
	}

	// Rehash; see Section 5.5
	/*
	 * if (++currentSize > theLists.length) rehash(); }
	 */
	// }

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			int w = whichList.size();
			whichList.remove(x);
			currentSize--;

			/*
			 * if(whichList.size()==w-1 && w>1){ colisiones--; }
			 */
		}
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
		colisiones = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	public int colision() {
		int r = 0;

		for (int c = 0; c < theLists.length; c++) {
			if (theLists[c].size() > r) {
				r = theLists[c].size();
			}
		}

		return r;
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		colisiones = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	@SuppressWarnings("unchecked")
	public void ordenar() {
		for (int q = 0; q < theLists.length; q++) {
			Collections.sort((List<Integer>) theLists[q]);
		}
	}

	public void imprimir() throws Exception {
		BinaryHeap<selec> elegidos = new BinaryHeap<selec>();
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				selec nuevo = new selec((int) theLists[q].get(0), q);
				elegidos.insert(nuevo);
			}
		}

		while (!elegidos.isEmpty()) {
			selec tmp = elegidos.deleteMin();

			for (int d = 0; d < theLists[tmp.pos].size(); d++) {
				if (d == theLists[tmp.pos].size() - 1) {
					System.out.print(theLists[tmp.pos].get(d));
				} else {
					System.out.print(theLists[tmp.pos].get(d) + " ");
				}
			}

			System.out.println();
		}
	}

	public void colisionados() {
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				for (int d = 0; d < theLists[q].size(); d++) {
					System.out.print(theLists[q].get(d) + " ");
				}
				System.out.println();
			}
		}
	}

	public int tamano() {
		return theLists.length;
	}

	private int myhash(AnyType x) {
		// int hashVal = (int) x;

		int hashVal = (int) x % theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;
	public static int colisiones;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

	static class Nodo {
		int K;
		int colisiones;

		public Nodo(int k, int colision) {
			this.K = k;
			this.colisiones = colision;
		}

	}

	public static void main(String[] args) throws Exception {
		Scanner scan;
		File file = new File("A_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");

			int N = scan.nextInt();
			int M = scan.nextInt();

			int[] No = new int[N];
			int[] Mo = new int[M];

			for (int i = 0; i < No.length; i++) {
				No[i] = scan.nextInt();
			}
			for (int i = 0; i < Mo.length; i++) {
				Mo[i] = scan.nextInt();
			}
			Nodo menor = new Nodo(100000000, 100000000);
			// aqui empieza ese for
			for (int i = 0; i < M; i++) {

				int tm = Mo[i];

				SeparateChainingHashTable<Integer> intern = new SeparateChainingHashTable<Integer>(
						tm);
				for (int j = 0; j < N; j++) {
					intern.insert(No[j]);
				}

				// System.out.println(intern.tamano());
				int large = intern.colisiones;
				intern.colisiones = 0;
				if (large < menor.colisiones) {
					menor.colisiones = large;
					menor.K = Mo[i];
				} else if (large == menor.colisiones) {
					if (Mo[i] < menor.K) {
						menor.K = Mo[i];
					}
				}

			}

			// aqui termina ese for
			System.out.println(menor.K);
			System.out.println(menor.colisiones);

			SeparateChainingHashTable<Integer> fin = new SeparateChainingHashTable<Integer>(
					menor.K);
			for (int j = 0; j < No.length; j++) {
				fin.insert(No[j]);
			}
			// 13-nov-15 comente el if de contains en insert, permitiendo
			// insertar datos duplicados.
			// System.out.println(fin.colisiones);
			fin.ordenar();
			// fin.colisionados();
			fin.imprimir();

		}

	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
//package p2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// boolean contains( x )  --> Return true if x is present
// void makeEmpty( )      --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */
class SeparateChainingHashTable<AnyType> {
	/**
	 * Construct the hash table.
	 */
	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[nextPrime(size)];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		//if (!whichList.contains(x)) {
			whichList.add(x);

			// Rehash; see Section 5.5
			if (++currentSize > theLists.length)
				rehash();
		}
	//}

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			whichList.remove(x);
			currentSize--;
		}
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	private int myhash(AnyType x) {
		int hashVal = x.hashCode();

		hashVal %= theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

}

public class EjercicioB {
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("B_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			int estanques= scan.nextInt();
			int llevar=0;
			SeparateChainingHashTable<Integer> pokemon= new SeparateChainingHashTable<Integer>();
			for(int i=0; i<estanques; i++ ){
				int food=scan.nextInt();
				int poke=scan.nextInt();
				
				pokemon.insert(food);
				
				if(!pokemon.contains(poke)){
					llevar++;
				}else{
					pokemon.remove(poke);
				}
			}
			
			System.out.println(llevar);
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
// package p2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;

class MyArrayList<AnyType> implements Iterable<AnyType> {
	/**
	 * Construct an empty ArrayList.
	 */
	public MyArrayList() {
		doClear();
	}

	/**
	 * Returns the number of items in this collection.
	 * 
	 * @return the number of items in this collection.
	 */
	public int size() {
		return theSize;
	}

	/**
	 * Returns true if this collection is empty.
	 * 
	 * @return true if this collection is empty.
	 */
	public boolean isEmpty() {
		return size() == 0;
	}

	/**
	 * Returns the item at position idx.
	 * 
	 * @param idx
	 *            the index to search in.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType get(int idx) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		return theItems[idx];
	}

	/**
	 * Changes the item at position idx.
	 * 
	 * @param idx
	 *            the index to change.
	 * @param newVal
	 *            the new value.
	 * @return the old value.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType set(int idx, AnyType newVal) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		AnyType old = theItems[idx];
		theItems[idx] = newVal;

		return old;
	}

	@SuppressWarnings("unchecked")
	public void ensureCapacity(int newCapacity) {
		if (newCapacity < theSize)
			return;

		AnyType[] old = theItems;
		theItems = (AnyType[]) new Object[newCapacity];
		for (int i = 0; i < size(); i++)
			theItems[i] = old[i];
	}

	public boolean contains(AnyType x) {
		for (int i = 0; i < size(); i++) {
			if (theItems[i].equals(x)) {
				return true;
			}
		}

		return false;
	}

	public void enqueue(AnyType x) {
		if (size() < theItems.length) {
			theItems[++back] = x;
			theSize++;
			return;
		}
		if (size() == theItems.length) {

		}
	}

	/**
	 * Adds an item to this collection, at the end.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public boolean add(AnyType x) {
		add(size(), x);
		return true;
	}

	/**
	 * Adds an item to this collection, at the specified index.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public void add(int idx, AnyType x) {
		if (theItems.length == size())
			ensureCapacity(size() * 2 + 1);

		for (int i = theSize; i > idx; i--)
			theItems[i] = theItems[i - 1];

		theItems[idx] = x;
		theSize++;
	}

	/**
	 * Removes an item from this collection.
	 * 
	 * @param idx
	 *            the index of the object.
	 * @return the item was removed from the collection.
	 */
	public AnyType remove(int idx) {
		AnyType removedItem = theItems[idx];

		for (int i = idx; i < size() - 1; i++)
			theItems[i] = theItems[i + 1];
		theSize--;

		return removedItem;
	}

	/**
	 * Change the size of this collection to zero.
	 */
	public void clear() {
		doClear();
	}

	private void doClear() {
		theSize = 0;
		front = 0;
		back = -1;
		removedFromFront = 0;
		ensureCapacity(DEFAULT_CAPACITY);
	}

	/**
	 * Obtains an Iterator object used to traverse the collection.
	 * 
	 * @return an iterator positioned prior to the first element.
	 */
	public java.util.Iterator<AnyType> iterator() {
		return new ArrayListIterator();
	}

	/**
	 * Returns a String representation of this collection.
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();

		for (AnyType x : this)
			sb.append(x + " ");
		// sb.append( "]" );

		return new String(sb);
	}
	
	public void intercambio(){
		 
        //Usamos un bucle anidado
        for(int i=0;i<(size()-1);i++){
            for(int j=i+1;j<size();j++){
                if((Integer)theItems[i]>(Integer)theItems[j]){
                    //Intercambiamos valores
                    AnyType variableauxiliar= theItems[i];
                    theItems[i]=theItems[j];
                    theItems[j]=variableauxiliar;
 
                }
            }
        }
    }

	/**
	 * This is the implementation of the ArrayListIterator. It maintains a
	 * notion of a current position and of course the implicit reference to the
	 * MyArrayList.
	 */
	private class ArrayListIterator implements java.util.Iterator<AnyType> {
		private int current = 0;
		private boolean okToRemove = false;

		public boolean hasNext() {
			return current < size();
		}

		public AnyType next() {
			if (!hasNext())
				throw new java.util.NoSuchElementException();

			okToRemove = true;
			return theItems[current++];
		}

		public void remove() {
			if (!okToRemove)
				throw new IllegalStateException();

			MyArrayList.this.remove(--current);
			okToRemove = false;
		}
	}

	private static final int DEFAULT_CAPACITY = 10;

	private AnyType[] theItems;
	private int theSize;

	private int front;
	private int back;
	private int removedFromFront;
	public int index(Integer p) {
		// TODO Auto-generated method stub
		for(int i=0; i<size(); i++){
			if(theItems[i].equals(p)){
				return i;
			}
		}
		return 0;
	}
}

public class EjercicioC {
	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			HashMap<String, MyArrayList<Integer>> retos = new HashMap<String, MyArrayList<Integer>>();
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();
			
			

			MyArrayList<Integer> removed = new MyArrayList<Integer>();

			 MyArrayList<Integer> normilla =  new MyArrayList<Integer>();
			 MyArrayList<Integer> marios =  new MyArrayList<Integer>();
			 MyArrayList<Integer> pipelin =  new MyArrayList<Integer>();

//			List normilla = new ArrayList();
//			List marios = new ArrayList();
//			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					removed.add(p);
					marios.remove(marios.index(p));
					
				} else if (pipelin.contains(p)){
					removed.add(p);
					pipelin.remove(pipelin.index(p));
					
				} else if (!removed.contains(p)) {
					normilla.add(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					removed.add(p);
					normilla.remove(normilla.index(p));
					
				} else if (pipelin.contains(p)){
					removed.add(p);
					pipelin.remove(pipelin.index(p));
					
				} else if (!removed.contains(p)) {
					marios.add(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					removed.add(p);
					marios.remove(marios.index(p));
					
				} else if (normilla.contains(p)){
					removed.add(p);
					normilla.remove(normilla.index(p));
					
				} else if (!removed.contains(p)) {
					pipelin.add(p);
				}

			}

			normilla.intercambio();
			retos.put("Norma", normilla);

			marios.intercambio();
			retos.put("Mario", marios);
			pipelin.intercambio();
			retos.put("Pipe", pipelin);

			// System.out.println(retos.get("Norma").size());

			// Cuando los tres son iguales
			if (retos.get("Norma").size() == retos.get("Mario").size()
					&& retos.get("Norma").size() == retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				System.out.println();

				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
				System.out.println();
				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			// Cuando solo uno es el ganador
			if (retos.get("Norma").size() > retos.get("Mario").size()
					&& retos.get("Norma").size() > retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
			}else

			if (retos.get("Mario").size() > retos.get("Norma").size()
					&& retos.get("Mario").size() > retos.get("Pipe").size()) {
				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
			}else

			if (retos.get("Pipe").size() > retos.get("Norma").size()
					&& retos.get("Pipe").size() > retos.get("Mario").size()) {
				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			// Cuando dos son iguales

			if (retos.get("Norma").size() == retos.get("Pipe").size()
					&& retos.get("Pipe").size() > retos.get("Mario").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				
				System.out.println();

				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			if (retos.get("Norma").size() == retos.get("Mario").size()
					&& retos.get("Mario").size() > retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				
				System.out.println();

				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
			}else

			if (retos.get("Pipe").size() == retos.get("Mario").size()
					&& retos.get("Mario").size() > retos.get("Norma").size()) {
				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
				System.out.println();

				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;
import java.util.StringTokenizer;

class MyArrayList<AnyType> implements Iterable<AnyType> {
	/**
	 * Construct an empty ArrayList.
	 */
	public MyArrayList() {
		doClear();
	}

	/**
	 * Returns the number of items in this collection.
	 * 
	 * @return the number of items in this collection.
	 */
	public int size() {
		return theSize;
	}

	public void intercambioPalabras() {

		// Usamos un bucle anidado
		for (int i = 0; i < (size() - 1); i++) {
			for (int j = i + 1; j < size(); j++) {
				if (((String) theItems[i])
						.compareToIgnoreCase((String) theItems[j]) > 0) {
					// Intercambiamos valores
					String variableauxiliar = (String) theItems[i];
					theItems[i] = theItems[j];
					theItems[j] = (AnyType) variableauxiliar;

				}
			}
		}
	}

	/**
	 * Returns true if this collection is empty.
	 * 
	 * @return true if this collection is empty.
	 */
	public boolean isEmpty() {
		return size() == 0;
	}

	/**
	 * Returns the item at position idx.
	 * 
	 * @param idx
	 *            the index to search in.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType get(int idx) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		return theItems[idx];
	}

	/**
	 * Changes the item at position idx.
	 * 
	 * @param idx
	 *            the index to change.
	 * @param newVal
	 *            the new value.
	 * @return the old value.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType set(int idx, AnyType newVal) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		AnyType old = theItems[idx];
		theItems[idx] = newVal;

		return old;
	}

	@SuppressWarnings("unchecked")
	public void ensureCapacity(int newCapacity) {
		if (newCapacity < theSize)
			return;

		AnyType[] old = theItems;
		theItems = (AnyType[]) new Object[newCapacity];
		for (int i = 0; i < size(); i++)
			theItems[i] = old[i];
	}

	public void enqueue(AnyType x) {
		if (size() < theItems.length) {
			theItems[++back] = x;
			theSize++;
			return;
		}
		if (size() == theItems.length) {

		}
	}

	/**
	 * Adds an item to this collection, at the end.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public boolean add(AnyType x) {
		add(size(), x);
		return true;
	}

	/**
	 * Adds an item to this collection, at the specified index.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public void add(int idx, AnyType x) {
		if (theItems.length == size())
			ensureCapacity(size() * 2 + 1);

		for (int i = theSize; i > idx; i--)
			theItems[i] = theItems[i - 1];

		theItems[idx] = x;
		theSize++;
	}

	/**
	 * Removes an item from this collection.
	 * 
	 * @param idx
	 *            the index of the object.
	 * @return the item was removed from the collection.
	 */

	public void imprimir() {
		for (int i = 0; i < size(); i++) {
			System.out.println(theItems[i]);
		}
	}

	public AnyType remove(int idx) {
		AnyType removedItem = theItems[idx];

		for (int i = idx; i < size() - 1; i++)
			theItems[i] = theItems[i + 1];
		theSize--;

		return removedItem;
	}

	/**
	 * Change the size of this collection to zero.
	 */
	public void clear() {
		doClear();
	}

	private void doClear() {
		theSize = 0;
		front = 0;
		back = -1;
		removedFromFront = 0;
		ensureCapacity(DEFAULT_CAPACITY);
	}

	/**
	 * Obtains an Iterator object used to traverse the collection.
	 * 
	 * @return an iterator positioned prior to the first element.
	 */
	public java.util.Iterator<AnyType> iterator() {
		return new ArrayListIterator();
	}

	/**
	 * Returns a String representation of this collection.
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();

		for (AnyType x : this)
			sb.append(x + " ");
		// sb.append( "]" );

		return new String(sb);
	}

	/**
	 * This is the implementation of the ArrayListIterator. It maintains a
	 * notion of a current position and of course the implicit reference to the
	 * MyArrayList.
	 */
	private class ArrayListIterator implements java.util.Iterator<AnyType> {
		private int current = 0;
		private boolean okToRemove = false;

		public boolean hasNext() {
			return current < size();
		}

		public AnyType next() {
			if (!hasNext())
				throw new java.util.NoSuchElementException();

			okToRemove = true;
			return theItems[current++];
		}

		public void remove() {
			if (!okToRemove)
				throw new IllegalStateException();

			MyArrayList.this.remove(--current);
			okToRemove = false;
		}
	}

	private static final int DEFAULT_CAPACITY = 10;

	private AnyType[] theItems;
	private int theSize;

	private int front;
	private int back;
	private int removedFromFront;
}

public class EjercicioD {
	static class Nodo {
		String partido;
		int votos = 0;

		public Nodo(String v) {
			this.partido = v;
		}

		public String getPartido() {
			return partido;
		}

		public void setPartido(String partido) {
			this.partido = partido;
		}

		public int getVotos() {
			return votos;
		}

		public void setVotos(int votos) {
			this.votos = votos;
		}

	}

	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan;
		File file = new File("D_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");
			HashMap<String, Nodo> politica = new HashMap<String, Nodo>();
			MyArrayList<String> winners = new MyArrayList<String>();
			Nodo ganador = new Nodo("NN");

			int cand = Integer.parseInt(scan.nextLine());
			
			for (int i = 0; i < cand; i++) {
				Nodo nuevo = new Nodo("NN");
				String lines[] = scan.nextLine().split(" ");
				// String a=st.nextToken();
				politica.put(lines[0], nuevo);

				politica.get(lines[0]).setPartido(lines[1]);

			}

			int vot = Integer.parseInt(scan.nextLine());
			for (int i = 0; i < vot; i++) {
				String lines[] = scan.nextLine().split(" ");
				if (politica.get(lines[0]) != null) {
					politica.get(lines[0]).votos = politica.get(lines[0]).votos + 1;
				}

				if (politica.get(lines[0]).votos > ganador.votos) {
					ganador.setVotos(politica.get(lines[0]).votos);
					winners.clear();
					winners.add(politica.get(lines[0]).partido);
				} else if (politica.get(lines[0]).votos == ganador.votos) {
					winners.add(politica.get(lines[0]).partido);
				}
			}

			winners.intercambioPalabras();
			winners.imprimir();

		}
	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
//package p3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// boolean contains( x )  --> Return true if x is present
// void makeEmpty( )      --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */

class MyArrayList<AnyType> implements Iterable<AnyType> {
	/**
	 * Construct an empty ArrayList.
	 */
	public MyArrayList() {
		doClear();
	}

	/**
	 * Returns the number of items in this collection.
	 * 
	 * @return the number of items in this collection.
	 */
	public int size() {
		return theSize;
	}

	/**
	 * Returns true if this collection is empty.
	 * 
	 * @return true if this collection is empty.
	 */
	public boolean isEmpty() {
		return size() == 0;
	}

	/**
	 * Returns the item at position idx.
	 * 
	 * @param idx
	 *            the index to search in.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType get(int idx) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		return theItems[idx];
	}

	/**
	 * Changes the item at position idx.
	 * 
	 * @param idx
	 *            the index to change.
	 * @param newVal
	 *            the new value.
	 * @return the old value.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType set(int idx, AnyType newVal) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		AnyType old = theItems[idx];
		theItems[idx] = newVal;

		return old;
	}

	@SuppressWarnings("unchecked")
	public void ensureCapacity(int newCapacity) {
		if (newCapacity < theSize)
			return;

		AnyType[] old = theItems;
		theItems = (AnyType[]) new Object[newCapacity];
		for (int i = 0; i < size(); i++)
			theItems[i] = old[i];
	}

	public void enqueue(AnyType x) {
		if (size() < theItems.length) {
			theItems[++back] = x;
			theSize++;
			return;
		}
		if (size() == theItems.length) {

		}
	}

	/**
	 * Adds an item to this collection, at the end.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public boolean add(AnyType x) {
		add(size(), x);
		return true;
	}

	/**
	 * Adds an item to this collection, at the specified index.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public void add(int idx, AnyType x) {
		if (theItems.length == size())
			ensureCapacity(size() * 2 + 1);

		for (int i = theSize; i > idx; i--)
			theItems[i] = theItems[i - 1];

		theItems[idx] = x;
		theSize++;
	}

	/**
	 * Removes an item from this collection.
	 * 
	 * @param idx
	 *            the index of the object.
	 * @return the item was removed from the collection.
	 */
	public AnyType remove(int idx) {
		AnyType removedItem = theItems[idx];

		for (int i = idx; i < size() - 1; i++)
			theItems[i] = theItems[i + 1];
		theSize--;

		return removedItem;
	}

	/**
	 * Change the size of this collection to zero.
	 */
	public void clear() {
		doClear();
	}

	private void doClear() {
		theSize = 0;
		front = 0;
		back = -1;
		removedFromFront = 0;
		ensureCapacity(DEFAULT_CAPACITY);
	}

	/**
	 * Obtains an Iterator object used to traverse the collection.
	 * 
	 * @return an iterator positioned prior to the first element.
	 */
	public java.util.Iterator<AnyType> iterator() {
		return new ArrayListIterator();
	}

	/**
	 * Returns a String representation of this collection.
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();

		for (AnyType x : this)
			sb.append(x + " ");
		// sb.append( "]" );

		return new String(sb);
	}

	/**
	 * This is the implementation of the ArrayListIterator. It maintains a
	 * notion of a current position and of course the implicit reference to the
	 * MyArrayList.
	 */
	private class ArrayListIterator implements java.util.Iterator<AnyType> {
		private int current = 0;
		private boolean okToRemove = false;

		public boolean hasNext() {
			return current < size();
		}

		public AnyType next() {
			if (!hasNext())
				throw new java.util.NoSuchElementException();

			okToRemove = true;
			return theItems[current++];
		}

		public void remove() {
			if (!okToRemove)
				throw new IllegalStateException();

			MyArrayList.this.remove(--current);
			okToRemove = false;
		}
	}

	private static final int DEFAULT_CAPACITY = 10;

	private AnyType[] theItems;
	private int theSize;

	private int front;
	private int back;
	private int removedFromFront;

	public boolean contains(Integer v) {
		// TODO Auto-generated method stub
		for (int i = 0; i < size(); i++) {
			if (theItems[i] == v) {
				return true;
			}
		}

		return false;
	}
}

class SeparateChainingHashTable<AnyType> {
	/**
	 * Construct the hash table.
	 */
	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[nextPrime(size)];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (!whichList.contains(x)) {
			whichList.add(x);

			// Rehash; see Section 5.5
			if (++currentSize > theLists.length)
				rehash();
		}
	}

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			whichList.remove(x);
			currentSize--;
		}
	}

	public int nelem() {
		return currentSize;
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	public void impresion(Integer[] x) {
		int a = 0;
		for (int i = 0; i < theLists.length; i++) {
			if (!theLists[i].isEmpty()) {
				// Collections.sort((List<Integer>) theLists[i]);
				for (int j = 0; j < theLists[i].size(); j++) {
					x[a] = (Integer) theLists[i].get(j);
					a++;
				}

			}
		}
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	private int myhash(AnyType x) {
		int hashVal = x.hashCode();

		hashVal %= theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

}

public class EjercicioC2 {
	
	public static int index(int[] s, int j){
		for(int i=0; i<s.length; i++){
			if(s[i]==j){
				return i;
			}
		}
		
		return -1;
	}
	
	public static void eli(int[] s, int j){
		//int[] nue= new int[s.length-1];
		int p= index(s,j);
		for(int i=p; i<s.length-1
				; i++){
			s[i]=s[i+1];
		}
		
	}

	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan;
		File file = new File("C_1.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");
			int n = scan.nextInt();
			int m = scan.nextInt();
			int p = scan.nextInt();

			SeparateChainingHashTable<Integer> norma = new SeparateChainingHashTable<Integer>();
			SeparateChainingHashTable<Integer> mario = new SeparateChainingHashTable<Integer>();
			SeparateChainingHashTable<Integer> pipe = new SeparateChainingHashTable<Integer>();

			MyArrayList<Integer> removed = new MyArrayList<Integer>();
			int[] pi = new int[p];
			int[] ma = new int[m];
			int[] no = new int[n];
			int nor = 0;
			int mar = 0;
			int pip = 0;

			for (int i = 0; i < n; i++) {
				int v = scan.nextInt();
				if (pipe.contains(v)) {
					removed.add(v);
					pipe.remove(v);
					//eli(pi,v);
				} else if (mario.contains(v)) {
					removed.add(v);
					mario.remove(v);
					//eli(ma,v);
				} else if (!removed.contains(v)) {

					norma.insert(v);
					no[nor] = v;
					nor++;
				}
			}

			for (int i = 0; i < m; i++) {
				int v = scan.nextInt();
				if (norma.contains(v)) {
					removed.add(v);
					norma.remove(v);
					//eli(no,v);
				} else if (pipe.contains(v)) {
					removed.add(v);
					pipe.remove(v);
					//eli(pi,v);
				} else if (!removed.contains(v)) {

					mario.insert(v);
					ma[mar] = v;
					mar++;
				}
			}

			for (int i = 0; i < p; i++) {
				int v = scan.nextInt();
				if (norma.contains(v)) {
					removed.add(v);
					norma.remove(v);
					//eli(no,v);
				} else if (mario.contains(v)) {
					removed.add(v);
					mario.remove(v);
					//eli(ma,v);
				} else if (!removed.contains(v)) {

					pipe.insert(v);
					pi[pip] = v;
					pip++;
				}
			}

			Arrays.sort(no);
			Arrays.sort(pi);
			Arrays.sort(ma);

			// Cuando los tres son iguales
			if (nor == mar && nor == pip) {
				System.out.print("Norma ");
				for (int i = 0; i < nor; i++) {
					System.out.print(no[i] + " ");
				}
				System.out.println();

				System.out.print("Mario ");
				for (int i = 0; i < mar; i++) {
					System.out.print(ma[i] + " ");
				}
				System.out.println();
				System.out.print("Pipe ");
				for (int i = 0; i < pip; i++) {
					System.out.print(pi[i] + " ");
				}
			} else

			// Cuando solo uno es el ganador
			if (nor > mar && nor > pip) {
				System.out.print("Norma ");
				for (int i = 0; i < nor; i++) {
					System.out.print(no[i] + " ");
				}
			} else

			if (mar > nor && mar > pip) {
				System.out.print("Mario ");
				for (int i = 0; i < mar; i++) {
					System.out.print(ma[i] + " ");
				}
			} else

			if (pip > nor && pip > mar) {
				System.out.print("Pipe ");
				for (int i = 0; i < pip; i++) {
					System.out.print(pi[i] + " ");
				}
			} else

			// Cuando dos son iguales

			if (nor == pip && pip > mar) {
				System.out.print("Norma ");
				for (int i = 0; i < nor; i++) {
					System.out.print(no[i] + " ");
				}

				System.out.print("Pipe ");
				for (int i = 0; i < pip; i++) {
					System.out.print(pi[i] + " ");
				}
			} else

			if (nor == mar && mar > pip) {
				System.out.print("Norma ");
				for (int i = 0; i < nor; i++) {
					System.out.print(no[i] + " ");
				}

				System.out.print("Mario ");
				for (int i = 0; i < mar; i++) {
					System.out.print(ma[i] + " ");
				}
			} else

			if (pip == mar && mar > nor) {
				System.out.print("Mario ");
				for (int i = 0; i < mar; i++) {
					System.out.print(ma[i] + " ");
				}

				System.out.print("Pipe ");
				for (int i = 0; i < pip; i++) {
					System.out.print(pi[i] + " ");
				}
			}

			System.out.println();
		}
	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

//BinaryHeap class
//
//CONSTRUCTION: with optional capacity (that defaults to 100)
//            or an array containing initial items
//
//******************PUBLIC OPERATIONS*********************
//void insert( x )       --> Insert x
//Comparable deleteMin( )--> Return and remove smallest item
//Comparable findMin( )  --> Return smallest item
//boolean isEmpty( )     --> Return true if empty; else false
//void makeEmpty( )      --> Remove all items
//******************ERRORS********************************
//Throws UnderflowException as appropriate

/**
 * Implements a binary heap. Note that all "matching" is based on the compareTo
 * method.
 * 
 * @param <AnyType>
 */
class BinaryHeap<AnyType extends Comparable<? super AnyType>> {
	/**
	 * Construct the binary heap.
	 */
	public BinaryHeap() {
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Construct the binary heap.
	 * 
	 * @param capacity
	 *            the capacity of the binary heap.
	 */
	public BinaryHeap(int capacity) {
		currentSize = 0;
		array = (AnyType[]) new Comparable[capacity + 1];
	}

	/**
	 * Construct the binary heap given an array of items.
	 * 
	 * @param items
	 */
	public BinaryHeap(AnyType[] items) {
		currentSize = items.length;
		array = (AnyType[]) new Comparable[(currentSize + 2) * 11 / 10];

		int i = 1;
		for (AnyType item : items)
			array[i++] = item;
		buildHeap();
	}

	/**
	 * Insert into the priority queue, maintaining heap order. Duplicates are
	 * allowed.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		if (currentSize == array.length - 1)
			enlargeArray(array.length * 2 + 1);

		// Percolate up
		int hole = ++currentSize;
		for (array[0] = x; x.compareTo(array[hole / 2]) < 0; hole /= 2)
			array[hole] = array[hole / 2];
		array[hole] = x;
	}

	private void enlargeArray(int newSize) {
		AnyType[] old = array;
		array = (AnyType[]) new Comparable[newSize];
		for (int i = 0; i < old.length; i++)
			array[i] = old[i];
	}

	/**
	 * Find the smallest item in the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType findMin() throws Exception {
		if (isEmpty())
			throw new Exception();
		return array[1];
	}

	/**
	 * Remove the smallest item from the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType deleteMin() throws Exception {
		if (isEmpty())
			throw new Exception();

		AnyType minItem = findMin();
		array[1] = array[currentSize--];
		percolateDown(1);

		return minItem;
	}

	/**
	 * Establish heap order property from an arbitrary arrangement of items.
	 * Runs in linear time.
	 */
	private void buildHeap() {
		for (int i = currentSize / 2; i > 0; i--)
			percolateDown(i);
	}

	/**
	 * Test if the priority queue is logically empty.
	 * 
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty() {
		return currentSize == 0;
	}

	/**
	 * Make the priority queue logically empty.
	 */
	public void makeEmpty() {
		currentSize = 0;
	}

	private static final int DEFAULT_CAPACITY = 10;

	private int currentSize; // Number of elements in heap
	private AnyType[] array; // The heap array

	/**
	 * Internal method to percolate down in the heap.
	 * 
	 * @param hole
	 *            the index at which the percolate begins.
	 */
	private void percolateDown(int hole) {
		int child;
		AnyType tmp = array[hole];

		for (; hole * 2 <= currentSize; hole = child) {
			child = hole * 2;
			if (child != currentSize
					&& array[child + 1].compareTo(array[child]) < 0)
				child++;
			if (array[child].compareTo(tmp) < 0)
				array[hole] = array[child];
			else
				break;
		}
		array[hole] = tmp;
	}

	// Test program
	public static void main(String[] args) throws Exception {
		int numItems = 10000;
		BinaryHeap<Integer> h = new BinaryHeap<>();
		int i = 37;

		for (i = 37; i != 0; i = (i + 37) % numItems)
			h.insert(i);
		for (i = 1; i < numItems; i++)
			if (h.deleteMin() != i)
				System.out.println("Oops! " + i);
	}
}

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x ) --> Insert x
// void remove( x ) --> Remove x
// boolean contains( x ) --> Return true if x is present
// void makeEmpty( ) --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */
class SeparateChainingHashTable<AnyType> {
	/**
	 * Construct the hash table.
	 */

	class selec implements Comparable<selec> {
		int menor;
		int pos;

		public selec(int men, int p) {

			this.menor = men;
			this.pos = p;

		}

		// @override

		public int compareTo(selec x) {
			if (menor < x.menor) {
				return -1;
			} else if (menor > x.menor) {
				return 1;
			} else

				return 0;
		}
	}

	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[size];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
		colisiones = 0;

	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		// if (!whichList.contains(x)) {
		whichList.add(x);
		if (whichList.size() > 1) {
			colisiones++;
		}
	}

	// Rehash; see Section 5.5
	/*
	 * if (++currentSize > theLists.length) rehash(); }
	 */
	// }

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			int w = whichList.size();
			whichList.remove(x);
			currentSize--;

			/*
			 * if(whichList.size()==w-1 && w>1){ colisiones--; }
			 */
		}
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
		colisiones = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	public int colision() {
		int r = 0;

		for (int c = 0; c < theLists.length; c++) {
			if (theLists[c].size() > r) {
				r = theLists[c].size();
			}
		}

		return r;
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		colisiones = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	@SuppressWarnings("unchecked")
	public void ordenar() {
		for (int q = 0; q < theLists.length; q++) {
			Collections.sort((List<Integer>) theLists[q]);
		}
	}

	public void imprimir() throws Exception {
		BinaryHeap<selec> elegidos = new BinaryHeap<selec>();
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				selec nuevo = new selec((int) theLists[q].get(0), q);
				elegidos.insert(nuevo);
			}
		}

		while (!elegidos.isEmpty()) {
			selec tmp = elegidos.deleteMin();

			for (int d = 0; d < theLists[tmp.pos].size(); d++) {
				if (d == theLists[tmp.pos].size() - 1) {
					System.out.print(theLists[tmp.pos].get(d));
				} else {
					System.out.print(theLists[tmp.pos].get(d) + " ");
				}
			}

			System.out.println();
		}
	}

	public void colisionados() {
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				for (int d = 0; d < theLists[q].size(); d++) {
					System.out.print(theLists[q].get(d) + " ");
				}
				System.out.println();
			}
		}
	}

	public int tamano() {
		return theLists.length;
	}

	private int myhash(AnyType x) {
		// int hashVal = (int) x;

		int hashVal = (Integer) x % theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;
	public static int colisiones;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

	static class Nodo {
		int K;
		int colisiones;

		public Nodo(int k, int colision) {
			this.K = k;
			this.colisiones = colision;
		}

	}

	public static void main(String[] args) throws Exception {
		Scanner scan;
		File file = new File("A_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");

			int N = scan.nextInt();
			int M = scan.nextInt();

			int[] No = new int[N];
			int[] Mo = new int[M];

			for (int i = 0; i < No.length; i++) {
				No[i] = scan.nextInt();
			}
			for (int i = 0; i < Mo.length; i++) {
				Mo[i] = scan.nextInt();
			}
			Nodo menor = new Nodo(100000000, 100000000);
			// aqui empieza ese for
			for (int i = 0; i < M; i++) {

				int tm = Mo[i];

				SeparateChainingHashTable<Integer> intern = new SeparateChainingHashTable<Integer>(
						tm);
				for (int j = 0; j < N; j++) {
					intern.insert(No[j]);
				}

				// System.out.println(intern.tamano());
				int large = intern.colisiones;
				intern.colisiones = 0;
				if (large < menor.colisiones) {
					menor.colisiones = large;
					menor.K = Mo[i];
				} else if (large == menor.colisiones) {
					if (Mo[i] < menor.K) {
						menor.K = Mo[i];
					}
				}

			}

			// aqui termina ese for
			System.out.println(menor.K);
			System.out.println(menor.colisiones);

			SeparateChainingHashTable<Integer> fin = new SeparateChainingHashTable<Integer>(
					menor.K);
			for (int j = 0; j < No.length; j++) {
				fin.insert(No[j]);
			}
			// 13-nov-15 comente el if de contains en insert, permitiendo
			// insertar datos duplicados.
			// System.out.println(fin.colisiones);
			fin.ordenar();
			// fin.colisionados();
			fin.imprimir();

		}

	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
// package p2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;

class MyArrayList<AnyType> implements Iterable<AnyType> {
	/**
	 * Construct an empty ArrayList.
	 */
	public MyArrayList() {
		doClear();
	}

	/**
	 * Returns the number of items in this collection.
	 * 
	 * @return the number of items in this collection.
	 */
	public int size() {
		return theSize;
	}

	/**
	 * Returns true if this collection is empty.
	 * 
	 * @return true if this collection is empty.
	 */
	public boolean isEmpty() {
		return size() == 0;
	}

	/**
	 * Returns the item at position idx.
	 * 
	 * @param idx
	 *            the index to search in.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType get(int idx) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		return theItems[idx];
	}

	/**
	 * Changes the item at position idx.
	 * 
	 * @param idx
	 *            the index to change.
	 * @param newVal
	 *            the new value.
	 * @return the old value.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType set(int idx, AnyType newVal) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		AnyType old = theItems[idx];
		theItems[idx] = newVal;

		return old;
	}

	@SuppressWarnings("unchecked")
	public void ensureCapacity(int newCapacity) {
		if (newCapacity < theSize)
			return;

		AnyType[] old = theItems;
		theItems = (AnyType[]) new Object[newCapacity];
		for (int i = 0; i < size(); i++)
			theItems[i] = old[i];
	}

	public boolean contains(AnyType x) {
		for (int i = 0; i < size(); i++) {
			if (theItems[i].equals(x)) {
				return true;
			}
		}

		return false;
	}

	public void enqueue(AnyType x) {
		if (size() < theItems.length) {
			theItems[++back] = x;
			theSize++;
			return;
		}
		if (size() == theItems.length) {

		}
	}

	/**
	 * Adds an item to this collection, at the end.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public boolean add(AnyType x) {
		add(size(), x);
		return true;
	}

	/**
	 * Adds an item to this collection, at the specified index.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public void add(int idx, AnyType x) {
		if (theItems.length == size())
			ensureCapacity(size() * 2 + 1);

		for (int i = theSize; i > idx; i--)
			theItems[i] = theItems[i - 1];

		theItems[idx] = x;
		theSize++;
	}

	/**
	 * Removes an item from this collection.
	 * 
	 * @param idx
	 *            the index of the object.
	 * @return the item was removed from the collection.
	 */
	public AnyType remove(int idx) {
		AnyType removedItem = theItems[idx];

		for (int i = idx; i < size() - 1; i++)
			theItems[i] = theItems[i + 1];
		theSize--;

		return removedItem;
	}

	/**
	 * Change the size of this collection to zero.
	 */
	public void clear() {
		doClear();
	}

	private void doClear() {
		theSize = 0;
		front = 0;
		back = -1;
		removedFromFront = 0;
		ensureCapacity(DEFAULT_CAPACITY);
	}

	/**
	 * Obtains an Iterator object used to traverse the collection.
	 * 
	 * @return an iterator positioned prior to the first element.
	 */
	public java.util.Iterator<AnyType> iterator() {
		return new ArrayListIterator();
	}

	/**
	 * Returns a String representation of this collection.
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();

		for (AnyType x : this)
			sb.append(x + " ");
		// sb.append( "]" );

		return new String(sb);
	}

	/**
	 * This is the implementation of the ArrayListIterator. It maintains a
	 * notion of a current position and of course the implicit reference to the
	 * MyArrayList.
	 */
	private class ArrayListIterator implements java.util.Iterator<AnyType> {
		private int current = 0;
		private boolean okToRemove = false;

		public boolean hasNext() {
			return current < size();
		}

		public AnyType next() {
			if (!hasNext())
				throw new java.util.NoSuchElementException();

			okToRemove = true;
			return theItems[current++];
		}

		public void remove() {
			if (!okToRemove)
				throw new IllegalStateException();

			MyArrayList.this.remove(--current);
			okToRemove = false;
		}
	}

	private static final int DEFAULT_CAPACITY = 10;

	private AnyType[] theItems;
	private int theSize;

	private int front;
	private int back;
	private int removedFromFront;
}

public class EjercicioC {
	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	public static <T, E> Set<T> getKeysByValue(HashMap<String, List> retos, Integer p) {
	    Set<T> keys = new HashSet<T>();
	    for (Entry<String, List> entry : retos.entrySet()) {
	        if (p.equals(entry.getValue())) {
	            keys.add((T) entry.getKey());
	        }
	    }
	    return keys;
	}
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			HashMap<String, List> retos = new HashMap<String, List>();
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();

			MyArrayList<Integer> removed = new MyArrayList<Integer>();

			// List normilla = (List<Integer>) new MyArrayList<Integer>();
			// List marios = (List) new MyArrayList<Integer>();
			// List pipelin = (List) new MyArrayList<Integer>();

			List normilla = new ArrayList();
			List marios = new ArrayList();
			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					removed.add(p);
					marios.remove(marios.indexOf(p));
					
				} else if (pipelin.contains(p)){
					removed.add(p);
					pipelin.remove(pipelin.indexOf(p));
					
				} else if (!removed.contains(p)) {
					normilla.add(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					removed.add(p);
					normilla.remove(normilla.indexOf(p));
					
				} else if (pipelin.contains(p)){
					removed.add(p);
					pipelin.remove(pipelin.indexOf(p));
					
				} else if (!removed.contains(p)) {
					marios.add(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					removed.add(p);
					marios.remove(marios.indexOf(p));
					
				} else if (normilla.contains(p)){
					removed.add(p);
					normilla.remove(normilla.indexOf(p));
					
				} else if (!removed.contains(p)) {
					pipelin.add(p);
				}

			}

			Collections.sort(normilla);
			retos.put("Norma", normilla);

			Collections.sort(marios);
			retos.put("Mario", marios);
			Collections.sort(pipelin);
			retos.put("Pipe", pipelin);

			// System.out.println(retos.get("Norma").size());

			// Cuando los tres son iguales
			if (retos.get("Norma").size() == retos.get("Mario").size()
					&& retos.get("Norma").size() == retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				System.out.println();

				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
				System.out.println();
				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			// Cuando solo uno es el ganador
			if (retos.get("Norma").size() > retos.get("Mario").size()
					&& retos.get("Norma").size() > retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
			}else

			if (retos.get("Mario").size() > retos.get("Norma").size()
					&& retos.get("Mario").size() > retos.get("Pipe").size()) {
				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
			}else

			if (retos.get("Pipe").size() > retos.get("Norma").size()
					&& retos.get("Pipe").size() > retos.get("Mario").size()) {
				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			// Cuando dos son iguales

			if (retos.get("Norma").size() == retos.get("Pipe").size()
					&& retos.get("Pipe").size() > retos.get("Mario").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				
				System.out.println();

				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			if (retos.get("Norma").size() == retos.get("Mario").size()
					&& retos.get("Mario").size() > retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				
				System.out.println();

				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
			}else

			if (retos.get("Pipe").size() == retos.get("Mario").size()
					&& retos.get("Mario").size() > retos.get("Norma").size()) {
				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
				System.out.println();

				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
// package p2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;

class MyArrayList<AnyType> implements Iterable<AnyType> {
	/**
	 * Construct an empty ArrayList.
	 */
	public MyArrayList() {
		doClear();
	}

	/**
	 * Returns the number of items in this collection.
	 * 
	 * @return the number of items in this collection.
	 */
	public int size() {
		return theSize;
	}

	/**
	 * Returns true if this collection is empty.
	 * 
	 * @return true if this collection is empty.
	 */
	public boolean isEmpty() {
		return size() == 0;
	}

	/**
	 * Returns the item at position idx.
	 * 
	 * @param idx
	 *            the index to search in.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType get(int idx) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		return theItems[idx];
	}

	/**
	 * Changes the item at position idx.
	 * 
	 * @param idx
	 *            the index to change.
	 * @param newVal
	 *            the new value.
	 * @return the old value.
	 * @throws ArrayIndexOutOfBoundsException
	 *             if index is out of range.
	 */
	public AnyType set(int idx, AnyType newVal) {
		if (idx < 0 || idx >= size())
			throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size "
					+ size());
		AnyType old = theItems[idx];
		theItems[idx] = newVal;

		return old;
	}

	@SuppressWarnings("unchecked")
	public void ensureCapacity(int newCapacity) {
		if (newCapacity < theSize)
			return;

		AnyType[] old = theItems;
		theItems = (AnyType[]) new Object[newCapacity];
		for (int i = 0; i < size(); i++)
			theItems[i] = old[i];
	}

	public boolean contains(AnyType x) {
		for (int i = 0; i < size(); i++) {
			if (theItems[i].equals(x)) {
				return true;
			}
		}

		return false;
	}

	public void enqueue(AnyType x) {
		if (size() < theItems.length) {
			theItems[++back] = x;
			theSize++;
			return;
		}
		if (size() == theItems.length) {

		}
	}

	/**
	 * Adds an item to this collection, at the end.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public boolean add(AnyType x) {
		add(size(), x);
		return true;
	}

	/**
	 * Adds an item to this collection, at the specified index.
	 * 
	 * @param x
	 *            any object.
	 * @return true.
	 */
	public void add(int idx, AnyType x) {
		if (theItems.length == size())
			ensureCapacity(size() * 2 + 1);

		for (int i = theSize; i > idx; i--)
			theItems[i] = theItems[i - 1];

		theItems[idx] = x;
		theSize++;
	}

	/**
	 * Removes an item from this collection.
	 * 
	 * @param idx
	 *            the index of the object.
	 * @return the item was removed from the collection.
	 */
	public AnyType remove(int idx) {
		AnyType removedItem = theItems[idx];

		for (int i = idx; i < size() - 1; i++)
			theItems[i] = theItems[i + 1];
		theSize--;

		return removedItem;
	}

	/**
	 * Change the size of this collection to zero.
	 */
	public void clear() {
		doClear();
	}

	private void doClear() {
		theSize = 0;
		front = 0;
		back = -1;
		removedFromFront = 0;
		ensureCapacity(DEFAULT_CAPACITY);
	}

	/**
	 * Obtains an Iterator object used to traverse the collection.
	 * 
	 * @return an iterator positioned prior to the first element.
	 */
	public java.util.Iterator<AnyType> iterator() {
		return new ArrayListIterator();
	}

	/**
	 * Returns a String representation of this collection.
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();

		for (AnyType x : this)
			sb.append(x + " ");
		// sb.append( "]" );

		return new String(sb);
	}
	
	public void intercambio(){
		 
        //Usamos un bucle anidado
        for(int i=0;i<(size()-1);i++){
            for(int j=i+1;j<size();j++){
                if((Integer)theItems[i]>(Integer)theItems[j]){
                    //Intercambiamos valores
                    AnyType variableauxiliar= theItems[i];
                    theItems[i]=theItems[j];
                    theItems[j]=variableauxiliar;
 
                }
            }
        }
    }

	/**
	 * This is the implementation of the ArrayListIterator. It maintains a
	 * notion of a current position and of course the implicit reference to the
	 * MyArrayList.
	 */
	private class ArrayListIterator implements java.util.Iterator<AnyType> {
		private int current = 0;
		private boolean okToRemove = false;

		public boolean hasNext() {
			return current < size();
		}

		public AnyType next() {
			if (!hasNext())
				throw new java.util.NoSuchElementException();

			okToRemove = true;
			return theItems[current++];
		}

		public void remove() {
			if (!okToRemove)
				throw new IllegalStateException();

			MyArrayList.this.remove(--current);
			okToRemove = false;
		}
	}

	private static final int DEFAULT_CAPACITY = 10;

	private AnyType[] theItems;
	private int theSize;

	private int front;
	private int back;
	private int removedFromFront;
	public int index(Integer p) {
		// TODO Auto-generated method stub
		for(int i=0; i<size(); i++){
			if(theItems[i].equals(p)){
				return i;
			}
		}
		return 0;
	}
}

public class EjercicioC {
	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			HashMap<String, MyArrayList<Integer>> retos = new HashMap<String, MyArrayList<Integer>>();
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();
			
			

			MyArrayList<Integer> removed = new MyArrayList<Integer>();

			 MyArrayList<Integer> normilla =  new MyArrayList<Integer>();
			 MyArrayList<Integer> marios =  new MyArrayList<Integer>();
			 MyArrayList<Integer> pipelin =  new MyArrayList<Integer>();

//			List normilla = new ArrayList();
//			List marios = new ArrayList();
//			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					removed.add(p);
					marios.remove(marios.index(p));
					
				} else if (pipelin.contains(p)){
					removed.add(p);
					pipelin.remove(pipelin.index(p));
					
				} else if (!removed.contains(p)) {
					normilla.add(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					removed.add(p);
					normilla.remove(normilla.index(p));
					
				} else if (pipelin.contains(p)){
					removed.add(p);
					pipelin.remove(pipelin.index(p));
					
				} else if (!removed.contains(p)) {
					marios.add(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					removed.add(p);
					marios.remove(marios.index(p));
					
				} else if (normilla.contains(p)){
					removed.add(p);
					normilla.remove(normilla.index(p));
					
				} else if (!removed.contains(p)) {
					pipelin.add(p);
				}

			}

			normilla.intercambio();
			retos.put("Norma", normilla);

			marios.intercambio();
			retos.put("Mario", marios);
			pipelin.intercambio();
			retos.put("Pipe", pipelin);

			// System.out.println(retos.get("Norma").size());

			// Cuando los tres son iguales
			if (retos.get("Norma").size() == retos.get("Mario").size()
					&& retos.get("Norma").size() == retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				System.out.println();

				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
				System.out.println();
				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			// Cuando solo uno es el ganador
			if (retos.get("Norma").size() > retos.get("Mario").size()
					&& retos.get("Norma").size() > retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
			}else

			if (retos.get("Mario").size() > retos.get("Norma").size()
					&& retos.get("Mario").size() > retos.get("Pipe").size()) {
				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
			}else

			if (retos.get("Pipe").size() > retos.get("Norma").size()
					&& retos.get("Pipe").size() > retos.get("Mario").size()) {
				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			// Cuando dos son iguales

			if (retos.get("Norma").size() == retos.get("Pipe").size()
					&& retos.get("Pipe").size() > retos.get("Mario").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				
				System.out.println();

				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}else

			if (retos.get("Norma").size() == retos.get("Mario").size()
					&& retos.get("Mario").size() > retos.get("Pipe").size()) {
				System.out.print("Norma "+retos.get("Norma").size()+" ");
				for (int i = 0; i < retos.get("Norma").size(); i++) {
					System.out.print(retos.get("Norma").get(i)+" ");
				}
				
				System.out.println();

				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
			}else

			if (retos.get("Pipe").size() == retos.get("Mario").size()
					&& retos.get("Mario").size() > retos.get("Norma").size()) {
				System.out.print("Mario "+retos.get("Mario").size()+" ");
				for (int i = 0; i < retos.get("Mario").size(); i++) {
					System.out.print(retos.get("Mario").get(i)+" ");
				}
				System.out.println();

				System.out.print("Pipe "+retos.get("Pipe").size()+" ");
				for (int i = 0; i < retos.get("Pipe").size(); i++) {
					System.out.print(retos.get("Pipe").get(i)+" ");
				}
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

//BinaryHeap class
//
//CONSTRUCTION: with optional capacity (that defaults to 100)
//            or an array containing initial items
//
//******************PUBLIC OPERATIONS*********************
//void insert( x )       --> Insert x
//Comparable deleteMin( )--> Return and remove smallest item
//Comparable findMin( )  --> Return smallest item
//boolean isEmpty( )     --> Return true if empty; else false
//void makeEmpty( )      --> Remove all items
//******************ERRORS********************************
//Throws UnderflowException as appropriate

/**
 * Implements a binary heap. Note that all "matching" is based on the compareTo
 * method.
 * 
 * @param <AnyType>
 */
class BinaryHeap<AnyType extends Comparable<? super AnyType>> {
	/**
	 * Construct the binary heap.
	 */
	public BinaryHeap() {
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Construct the binary heap.
	 * 
	 * @param capacity
	 *            the capacity of the binary heap.
	 */
	public BinaryHeap(int capacity) {
		currentSize = 0;
		array = (AnyType[]) new Comparable[capacity + 1];
	}

	/**
	 * Construct the binary heap given an array of items.
	 * 
	 * @param items
	 */
	public BinaryHeap(AnyType[] items) {
		currentSize = items.length;
		array = (AnyType[]) new Comparable[(currentSize + 2) * 11 / 10];

		int i = 1;
		for (AnyType item : items)
			array[i++] = item;
		buildHeap();
	}

	/**
	 * Insert into the priority queue, maintaining heap order. Duplicates are
	 * allowed.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		if (currentSize == array.length - 1)
			enlargeArray(array.length * 2 + 1);

		// Percolate up
		int hole = ++currentSize;
		for (array[0] = x; x.compareTo(array[hole / 2]) < 0; hole /= 2)
			array[hole] = array[hole / 2];
		array[hole] = x;
	}

	private void enlargeArray(int newSize) {
		AnyType[] old = array;
		array = (AnyType[]) new Comparable[newSize];
		for (int i = 0; i < old.length; i++)
			array[i] = old[i];
	}

	/**
	 * Find the smallest item in the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType findMin() throws Exception {
		if (isEmpty())
			throw new Exception();
		return array[1];
	}

	/**
	 * Remove the smallest item from the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType deleteMin() throws Exception {
		if (isEmpty())
			throw new Exception();

		AnyType minItem = findMin();
		array[1] = array[currentSize--];
		percolateDown(1);

		return minItem;
	}

	/**
	 * Establish heap order property from an arbitrary arrangement of items.
	 * Runs in linear time.
	 */
	private void buildHeap() {
		for (int i = currentSize / 2; i > 0; i--)
			percolateDown(i);
	}

	/**
	 * Test if the priority queue is logically empty.
	 * 
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty() {
		return currentSize == 0;
	}

	/**
	 * Make the priority queue logically empty.
	 */
	public void makeEmpty() {
		currentSize = 0;
	}

	private static final int DEFAULT_CAPACITY = 10;

	private int currentSize; // Number of elements in heap
	private AnyType[] array; // The heap array

	/**
	 * Internal method to percolate down in the heap.
	 * 
	 * @param hole
	 *            the index at which the percolate begins.
	 */
	private void percolateDown(int hole) {
		int child;
		AnyType tmp = array[hole];

		for (; hole * 2 <= currentSize; hole = child) {
			child = hole * 2;
			if (child != currentSize
					&& array[child + 1].compareTo(array[child]) < 0)
				child++;
			if (array[child].compareTo(tmp) < 0)
				array[hole] = array[child];
			else
				break;
		}
		array[hole] = tmp;
	}

	// Test program
	public static void main(String[] args) throws Exception {
		int numItems = 10000;
		BinaryHeap<Integer> h = new BinaryHeap<>();
		int i = 37;

		for (i = 37; i != 0; i = (i + 37) % numItems)
			h.insert(i);
		for (i = 1; i < numItems; i++)
			if (h.deleteMin() != i)
				System.out.println("Oops! " + i);
	}
}

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x ) --> Insert x
// void remove( x ) --> Remove x
// boolean contains( x ) --> Return true if x is present
// void makeEmpty( ) --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */
class SeparateChainingHashTable<AnyType> {
	/**
	 * Construct the hash table.
	 */

	class selec implements Comparable<selec> {
		int menor;
		int pos;

		public selec(int men, int p) {

			this.menor = men;
			this.pos = p;

		}

		// @override

		public int compareTo(selec x) {
			if (menor < x.menor) {
				return -1;
			} else if (menor > x.menor) {
				return 1;
			} else

				return 0;
		}
	}

	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[size];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
		colisiones = 0;

	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		// if (!whichList.contains(x)) {
		whichList.add(x);
		if (whichList.size() > 1) {
			colisiones++;
		}
	}

	// Rehash; see Section 5.5
	/*
	 * if (++currentSize > theLists.length) rehash(); }
	 */
	// }

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			int w = whichList.size();
			whichList.remove(x);
			currentSize--;

			/*
			 * if(whichList.size()==w-1 && w>1){ colisiones--; }
			 */
		}
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
		colisiones = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	public int colision() {
		int r = 0;

		for (int c = 0; c < theLists.length; c++) {
			if (theLists[c].size() > r) {
				r = theLists[c].size();
			}
		}

		return r;
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		colisiones = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	@SuppressWarnings("unchecked")
	public void ordenar() {
		for (int q = 0; q < theLists.length; q++) {
			Collections.sort((List<Integer>) theLists[q]);
		}
	}

	public void imprimir() throws Exception {
		BinaryHeap<selec> elegidos = new BinaryHeap<selec>();
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				selec nuevo = new selec((Integer) theLists[q].get(0), q);
				elegidos.insert(nuevo);
			}
		}

		while (!elegidos.isEmpty()) {
			selec tmp = elegidos.deleteMin();

			for (int d = 0; d < theLists[tmp.pos].size(); d++) {
				if (d == theLists[tmp.pos].size() - 1) {
					System.out.print(theLists[tmp.pos].get(d));
				} else {
					System.out.print(theLists[tmp.pos].get(d) + " ");
				}
			}

			System.out.println();
		}
	}

	public void colisionados() {
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				for (int d = 0; d < theLists[q].size(); d++) {
					System.out.print(theLists[q].get(d) + " ");
				}
				System.out.println();
			}
		}
	}

	public int tamano() {
		return theLists.length;
	}

	private int myhash(AnyType x) {
		// int hashVal = (int) x;

		int hashVal = (Integer) x % theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;
	public static int colisiones;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

	static class Nodo {
		int K;
		int colisiones;

		public Nodo(int k, int colision) {
			this.K = k;
			this.colisiones = colision;
		}

	}

	public static void main(String[] args) throws Exception {
		Scanner scan;
		File file = new File("A_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");

			int N = scan.nextInt();
			int M = scan.nextInt();

			int[] No = new int[N];
			int[] Mo = new int[M];

			for (int i = 0; i < No.length; i++) {
				No[i] = scan.nextInt();
			}
			for (int i = 0; i < Mo.length; i++) {
				Mo[i] = scan.nextInt();
			}
			Nodo menor = new Nodo(100000000, 100000000);
			// aqui empieza ese for
			for (int i = 0; i < M; i++) {

				int tm = Mo[i];

				SeparateChainingHashTable<Integer> intern = new SeparateChainingHashTable<Integer>(
						tm);
				for (int j = 0; j < N; j++) {
					intern.insert(No[j]);
				}

				// System.out.println(intern.tamano());
				int large = intern.colisiones;
				intern.colisiones = 0;
				if (large < menor.colisiones) {
					menor.colisiones = large;
					menor.K = Mo[i];
				} else if (large == menor.colisiones) {
					if (Mo[i] < menor.K) {
						menor.K = Mo[i];
					}
				}

			}

			// aqui termina ese for
			System.out.println(menor.K);
			System.out.println(menor.colisiones);

			SeparateChainingHashTable<Integer> fin = new SeparateChainingHashTable<Integer>(
					menor.K);
			for (int j = 0; j < No.length; j++) {
				fin.insert(No[j]);
			}
			// 13-nov-15 comente el if de contains en insert, permitiendo
			// insertar datos duplicados.
			// System.out.println(fin.colisiones);
			fin.ordenar();
			// fin.colisionados();
			fin.imprimir();

		}

	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

/
class SeparateChainingHashTable<AnyType> {

/BinaryHeap class
//
//CONSTRUCTION: with optional capacity (that defaults to 100)
//            or an array containing initial items
//
//******************PUBLIC OPERATIONS*********************
//void insert( x )       --> Insert x
//Comparable deleteMin( )--> Return and remove smallest item
//Comparable findMin( )  --> Return smallest item
//boolean isEmpty( )     --> Return true if empty; else false
//void makeEmpty( )      --> Remove all items
//******************ERRORS********************************
//Throws UnderflowException as appropriate

/**
 * Implements a binary heap. Note that all "matching" is based on the compareTo
 * method.
 * 
 * @param <AnyType>
 */
class BinaryHeap<AnyType extends Comparable<? super AnyType>> {
	/**
	 * Construct the binary heap.
	 */
	public BinaryHeap() {
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Construct the binary heap.
	 * 
	 * @param capacity
	 *            the capacity of the binary heap.
	 */
	public BinaryHeap(int capacity) {
		currentSize = 0;
		array = (AnyType[]) new Comparable[capacity + 1];
	}

	/**
	 * Construct the binary heap given an array of items.
	 * 
	 * @param items
	 */
	public BinaryHeap(AnyType[] items) {
		currentSize = items.length;
		array = (AnyType[]) new Comparable[(currentSize + 2) * 11 / 10];

		int i = 1;
		for (AnyType item : items)
			array[i++] = item;
		buildHeap();
	}

	/**
	 * Insert into the priority queue, maintaining heap order. Duplicates are
	 * allowed.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		if (currentSize == array.length - 1)
			enlargeArray(array.length * 2 + 1);

		// Percolate up
		int hole = ++currentSize;
		for (array[0] = x; x.compareTo(array[hole / 2]) < 0; hole /= 2)
			array[hole] = array[hole / 2];
		array[hole] = x;
	}

	private void enlargeArray(int newSize) {
		AnyType[] old = array;
		array = (AnyType[]) new Comparable[newSize];
		for (int i = 0; i < old.length; i++)
			array[i] = old[i];
	}

	/**
	 * Find the smallest item in the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType findMin() throws Exception {
		if (isEmpty())
			throw new Exception();
		return array[1];
	}

	/**
	 * Remove the smallest item from the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType deleteMin() throws Exception {
		if (isEmpty())
			throw new Exception();

		AnyType minItem = findMin();
		array[1] = array[currentSize--];
		percolateDown(1);

		return minItem;
	}

	/**
	 * Establish heap order property from an arbitrary arrangement of items.
	 * Runs in linear time.
	 */
	private void buildHeap() {
		for (int i = currentSize / 2; i > 0; i--)
			percolateDown(i);
	}

	/**
	 * Test if the priority queue is logically empty.
	 * 
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty() {
		return currentSize == 0;
	}

	/**
	 * Make the priority queue logically empty.
	 */
	public void makeEmpty() {
		currentSize = 0;
	}

	private static final int DEFAULT_CAPACITY = 10;

	private int currentSize; // Number of elements in heap
	private AnyType[] array; // The heap array

	/**
	 * Internal method to percolate down in the heap.
	 * 
	 * @param hole
	 *            the index at which the percolate begins.
	 */
	private void percolateDown(int hole) {
		int child;
		AnyType tmp = array[hole];

		for (; hole * 2 <= currentSize; hole = child) {
			child = hole * 2;
			if (child != currentSize
					&& array[child + 1].compareTo(array[child]) < 0)
				child++;
			if (array[child].compareTo(tmp) < 0)
				array[hole] = array[child];
			else
				break;
		}
		array[hole] = tmp;
	}

	// Test program
	public static void main(String[] args) throws Exception {
		int numItems = 10000;
		BinaryHeap<Integer> h = new BinaryHeap<>();
		int i = 37;

		for (i = 37; i != 0; i = (i + 37) % numItems)
			h.insert(i);
		for (i = 1; i < numItems; i++)
			if (h.deleteMin() != i)
				System.out.println("Oops! " + i);
	}
}

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x ) --> Insert x
// void remove( x ) --> Remove x
// boolean contains( x ) --> Return true if x is present
// void makeEmpty( ) --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */
	/**
	 * Construct the hash table.
	 */

	class selec implements Comparable<selec> {
		int menor;
		int pos;

		public selec(int men, int p) {

			this.menor = men;
			this.pos = p;

		}

		// @override

		public int compareTo(selec x) {
			if (menor < x.menor) {
				return -1;
			} else if (menor > x.menor) {
				return 1;
			} else

				return 0;
		}
	}

	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[size];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
		colisiones = 0;

	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		// if (!whichList.contains(x)) {
		whichList.add(x);
		if (whichList.size() > 1) {
			colisiones++;
		}
	}

	// Rehash; see Section 5.5
	/*
	 * if (++currentSize > theLists.length) rehash(); }
	 */
	// }

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			int w = whichList.size();
			whichList.remove(x);
			currentSize--;

			/*
			 * if(whichList.size()==w-1 && w>1){ colisiones--; }
			 */
		}
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
		colisiones = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	public int colision() {
		int r = 0;

		for (int c = 0; c < theLists.length; c++) {
			if (theLists[c].size() > r) {
				r = theLists[c].size();
			}
		}

		return r;
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		colisiones = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	@SuppressWarnings("unchecked")
	public void ordenar() {
		for (int q = 0; q < theLists.length; q++) {
			Collections.sort((List<Integer>) theLists[q]);
		}
	}

	public void imprimir() throws Exception {
		BinaryHeap<selec> elegidos = new BinaryHeap<selec>();
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				selec nuevo = new selec((Integer) theLists[q].get(0), q);
				elegidos.insert(nuevo);
			}
		}

		while (!elegidos.isEmpty()) {
			selec tmp = elegidos.deleteMin();

			for (int d = 0; d < theLists[tmp.pos].size(); d++) {
				if (d == theLists[tmp.pos].size() - 1) {
					System.out.print(theLists[tmp.pos].get(d));
				} else {
					System.out.print(theLists[tmp.pos].get(d) + " ");
				}
			}

			System.out.println();
		}
	}

	public void colisionados() {
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				for (int d = 0; d < theLists[q].size(); d++) {
					System.out.print(theLists[q].get(d) + " ");
				}
				System.out.println();
			}
		}
	}

	public int tamano() {
		return theLists.length;
	}

	private int myhash(AnyType x) {
		// int hashVal = (int) x;

		int hashVal = (Integer) x % theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;
	public static int colisiones;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

	static class Nodo {
		int K;
		int colisiones;

		public Nodo(int k, int colision) {
			this.K = k;
			this.colisiones = colision;
		}

	}

	public static void main(String[] args) throws Exception {
		Scanner scan;
		File file = new File("A_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");

			int N = scan.nextInt();
			int M = scan.nextInt();

			int[] No = new int[N];
			int[] Mo = new int[M];

			for (int i = 0; i < No.length; i++) {
				No[i] = scan.nextInt();
			}
			for (int i = 0; i < Mo.length; i++) {
				Mo[i] = scan.nextInt();
			}
			Nodo menor = new Nodo(100000000, 100000000);
			// aqui empieza ese for
			for (int i = 0; i < M; i++) {

				int tm = Mo[i];

				SeparateChainingHashTable<Integer> intern = new SeparateChainingHashTable<Integer>(
						tm);
				for (int j = 0; j < N; j++) {
					intern.insert(No[j]);
				}

				// System.out.println(intern.tamano());
				int large = intern.colisiones;
				intern.colisiones = 0;
				if (large < menor.colisiones) {
					menor.colisiones = large;
					menor.K = Mo[i];
				} else if (large == menor.colisiones) {
					if (Mo[i] < menor.K) {
						menor.K = Mo[i];
					}
				}

			}

			// aqui termina ese for
			System.out.println(menor.K);
			System.out.println(menor.colisiones);

			SeparateChainingHashTable<Integer> fin = new SeparateChainingHashTable<Integer>(
					menor.K);
			for (int j = 0; j < No.length; j++) {
				fin.insert(No[j]);
			}
			// 13-nov-15 comente el if de contains en insert, permitiendo
			// insertar datos duplicados.
			// System.out.println(fin.colisiones);
			fin.ordenar();
			// fin.colisionados();
			fin.imprimir();

		}

	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

/
class SeparateChainingHashTable<AnyType> {

/BinaryHeap class
//
//CONSTRUCTION: with optional capacity (that defaults to 100)
//            or an array containing initial items
//
//******************PUBLIC OPERATIONS*********************
//void insert( x )       --> Insert x
//Comparable deleteMin( )--> Return and remove smallest item
//Comparable findMin( )  --> Return smallest item
//boolean isEmpty( )     --> Return true if empty; else false
//void makeEmpty( )      --> Remove all items
//******************ERRORS********************************
//Throws UnderflowException as appropriate

/**
 * Implements a binary heap. Note that all "matching" is based on the compareTo
 * method.
 * 
 * @param <AnyType>
 */
static class BinaryHeap<AnyType extends Comparable<? super AnyType>> {
	/**
	 * Construct the binary heap.
	 */
	public BinaryHeap() {
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Construct the binary heap.
	 * 
	 * @param capacity
	 *            the capacity of the binary heap.
	 */
	public BinaryHeap(int capacity) {
		currentSize = 0;
		array = (AnyType[]) new Comparable[capacity + 1];
	}

	/**
	 * Construct the binary heap given an array of items.
	 * 
	 * @param items
	 */
	public BinaryHeap(AnyType[] items) {
		currentSize = items.length;
		array = (AnyType[]) new Comparable[(currentSize + 2) * 11 / 10];

		int i = 1;
		for (AnyType item : items)
			array[i++] = item;
		buildHeap();
	}

	/**
	 * Insert into the priority queue, maintaining heap order. Duplicates are
	 * allowed.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		if (currentSize == array.length - 1)
			enlargeArray(array.length * 2 + 1);

		// Percolate up
		int hole = ++currentSize;
		for (array[0] = x; x.compareTo(array[hole / 2]) < 0; hole /= 2)
			array[hole] = array[hole / 2];
		array[hole] = x;
	}

	private void enlargeArray(int newSize) {
		AnyType[] old = array;
		array = (AnyType[]) new Comparable[newSize];
		for (int i = 0; i < old.length; i++)
			array[i] = old[i];
	}

	/**
	 * Find the smallest item in the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType findMin() throws Exception {
		if (isEmpty())
			throw new Exception();
		return array[1];
	}

	/**
	 * Remove the smallest item from the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType deleteMin() throws Exception {
		if (isEmpty())
			throw new Exception();

		AnyType minItem = findMin();
		array[1] = array[currentSize--];
		percolateDown(1);

		return minItem;
	}

	/**
	 * Establish heap order property from an arbitrary arrangement of items.
	 * Runs in linear time.
	 */
	private void buildHeap() {
		for (int i = currentSize / 2; i > 0; i--)
			percolateDown(i);
	}

	/**
	 * Test if the priority queue is logically empty.
	 * 
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty() {
		return currentSize == 0;
	}

	/**
	 * Make the priority queue logically empty.
	 */
	public void makeEmpty() {
		currentSize = 0;
	}

	private static final int DEFAULT_CAPACITY = 10;

	private int currentSize; // Number of elements in heap
	private AnyType[] array; // The heap array

	/**
	 * Internal method to percolate down in the heap.
	 * 
	 * @param hole
	 *            the index at which the percolate begins.
	 */
	private void percolateDown(int hole) {
		int child;
		AnyType tmp = array[hole];

		for (; hole * 2 <= currentSize; hole = child) {
			child = hole * 2;
			if (child != currentSize
					&& array[child + 1].compareTo(array[child]) < 0)
				child++;
			if (array[child].compareTo(tmp) < 0)
				array[hole] = array[child];
			else
				break;
		}
		array[hole] = tmp;
	}

	// Test program
	public static void main(String[] args) throws Exception {
		int numItems = 10000;
		BinaryHeap<Integer> h = new BinaryHeap<>();
		int i = 37;

		for (i = 37; i != 0; i = (i + 37) % numItems)
			h.insert(i);
		for (i = 1; i < numItems; i++)
			if (h.deleteMin() != i)
				System.out.println("Oops! " + i);
	}
}

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x ) --> Insert x
// void remove( x ) --> Remove x
// boolean contains( x ) --> Return true if x is present
// void makeEmpty( ) --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */
	/**
	 * Construct the hash table.
	 */

	class selec implements Comparable<selec> {
		int menor;
		int pos;

		public selec(int men, int p) {

			this.menor = men;
			this.pos = p;

		}

		// @override

		public int compareTo(selec x) {
			if (menor < x.menor) {
				return -1;
			} else if (menor > x.menor) {
				return 1;
			} else

				return 0;
		}
	}

	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[size];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
		colisiones = 0;

	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		// if (!whichList.contains(x)) {
		whichList.add(x);
		if (whichList.size() > 1) {
			colisiones++;
		}
	}

	// Rehash; see Section 5.5
	/*
	 * if (++currentSize > theLists.length) rehash(); }
	 */
	// }

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			int w = whichList.size();
			whichList.remove(x);
			currentSize--;

			/*
			 * if(whichList.size()==w-1 && w>1){ colisiones--; }
			 */
		}
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
		colisiones = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	public int colision() {
		int r = 0;

		for (int c = 0; c < theLists.length; c++) {
			if (theLists[c].size() > r) {
				r = theLists[c].size();
			}
		}

		return r;
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		colisiones = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	@SuppressWarnings("unchecked")
	public void ordenar() {
		for (int q = 0; q < theLists.length; q++) {
			Collections.sort((List<Integer>) theLists[q]);
		}
	}

	public void imprimir() throws Exception {
		BinaryHeap<selec> elegidos = new BinaryHeap<selec>();
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				selec nuevo = new selec((Integer) theLists[q].get(0), q);
				elegidos.insert(nuevo);
			}
		}

		while (!elegidos.isEmpty()) {
			selec tmp = elegidos.deleteMin();

			for (int d = 0; d < theLists[tmp.pos].size(); d++) {
				if (d == theLists[tmp.pos].size() - 1) {
					System.out.print(theLists[tmp.pos].get(d));
				} else {
					System.out.print(theLists[tmp.pos].get(d) + " ");
				}
			}

			System.out.println();
		}
	}

	public void colisionados() {
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				for (int d = 0; d < theLists[q].size(); d++) {
					System.out.print(theLists[q].get(d) + " ");
				}
				System.out.println();
			}
		}
	}

	public int tamano() {
		return theLists.length;
	}

	private int myhash(AnyType x) {
		// int hashVal = (int) x;

		int hashVal = (Integer) x % theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;
	public static int colisiones;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

	static class Nodo {
		int K;
		int colisiones;

		public Nodo(int k, int colision) {
			this.K = k;
			this.colisiones = colision;
		}

	}

	public static void main(String[] args) throws Exception {
		Scanner scan;
		File file = new File("A_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");

			int N = scan.nextInt();
			int M = scan.nextInt();

			int[] No = new int[N];
			int[] Mo = new int[M];

			for (int i = 0; i < No.length; i++) {
				No[i] = scan.nextInt();
			}
			for (int i = 0; i < Mo.length; i++) {
				Mo[i] = scan.nextInt();
			}
			Nodo menor = new Nodo(100000000, 100000000);
			// aqui empieza ese for
			for (int i = 0; i < M; i++) {

				int tm = Mo[i];

				SeparateChainingHashTable<Integer> intern = new SeparateChainingHashTable<Integer>(
						tm);
				for (int j = 0; j < N; j++) {
					intern.insert(No[j]);
				}

				// System.out.println(intern.tamano());
				int large = intern.colisiones;
				intern.colisiones = 0;
				if (large < menor.colisiones) {
					menor.colisiones = large;
					menor.K = Mo[i];
				} else if (large == menor.colisiones) {
					if (Mo[i] < menor.K) {
						menor.K = Mo[i];
					}
				}

			}

			// aqui termina ese for
			System.out.println(menor.K);
			System.out.println(menor.colisiones);

			SeparateChainingHashTable<Integer> fin = new SeparateChainingHashTable<Integer>(
					menor.K);
			for (int j = 0; j < No.length; j++) {
				fin.insert(No[j]);
			}
			// 13-nov-15 comente el if de contains en insert, permitiendo
			// insertar datos duplicados.
			// System.out.println(fin.colisiones);
			fin.ordenar();
			// fin.colisionados();
			fin.imprimir();

		}

	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

/
class SeparateChainingHashTable<AnyType> {

/BinaryHeap class
//
//CONSTRUCTION: with optional capacity (that defaults to 100)
//            or an array containing initial items
//
//******************PUBLIC OPERATIONS*********************
//void insert( x )       --> Insert x
//Comparable deleteMin( )--> Return and remove smallest item
//Comparable findMin( )  --> Return smallest item
//boolean isEmpty( )     --> Return true if empty; else false
//void makeEmpty( )      --> Remove all items
//******************ERRORS********************************
//Throws UnderflowException as appropriate

/**
 * Implements a binary heap. Note that all "matching" is based on the compareTo
 * method.
 * 
 * @param <AnyType>
 */
public static class BinaryHeap<AnyType extends Comparable<? super AnyType>> {
	/**
	 * Construct the binary heap.
	 */
	public BinaryHeap() {
		this(DEFAULT_CAPACITY);
	}

	/**
	 * Construct the binary heap.
	 * 
	 * @param capacity
	 *            the capacity of the binary heap.
	 */
	public BinaryHeap(int capacity) {
		currentSize = 0;
		array = (AnyType[]) new Comparable[capacity + 1];
	}

	/**
	 * Construct the binary heap given an array of items.
	 * 
	 * @param items
	 */
	public BinaryHeap(AnyType[] items) {
		currentSize = items.length;
		array = (AnyType[]) new Comparable[(currentSize + 2) * 11 / 10];

		int i = 1;
		for (AnyType item : items)
			array[i++] = item;
		buildHeap();
	}

	/**
	 * Insert into the priority queue, maintaining heap order. Duplicates are
	 * allowed.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		if (currentSize == array.length - 1)
			enlargeArray(array.length * 2 + 1);

		// Percolate up
		int hole = ++currentSize;
		for (array[0] = x; x.compareTo(array[hole / 2]) < 0; hole /= 2)
			array[hole] = array[hole / 2];
		array[hole] = x;
	}

	private void enlargeArray(int newSize) {
		AnyType[] old = array;
		array = (AnyType[]) new Comparable[newSize];
		for (int i = 0; i < old.length; i++)
			array[i] = old[i];
	}

	/**
	 * Find the smallest item in the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType findMin() throws Exception {
		if (isEmpty())
			throw new Exception();
		return array[1];
	}

	/**
	 * Remove the smallest item from the priority queue.
	 * 
	 * @return the smallest item, or throw an UnderflowException if empty.
	 * @throws java.lang.Exception
	 */
	public AnyType deleteMin() throws Exception {
		if (isEmpty())
			throw new Exception();

		AnyType minItem = findMin();
		array[1] = array[currentSize--];
		percolateDown(1);

		return minItem;
	}

	/**
	 * Establish heap order property from an arbitrary arrangement of items.
	 * Runs in linear time.
	 */
	private void buildHeap() {
		for (int i = currentSize / 2; i > 0; i--)
			percolateDown(i);
	}

	/**
	 * Test if the priority queue is logically empty.
	 * 
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty() {
		return currentSize == 0;
	}

	/**
	 * Make the priority queue logically empty.
	 */
	public void makeEmpty() {
		currentSize = 0;
	}

	private static final int DEFAULT_CAPACITY = 10;

	private int currentSize; // Number of elements in heap
	private AnyType[] array; // The heap array

	/**
	 * Internal method to percolate down in the heap.
	 * 
	 * @param hole
	 *            the index at which the percolate begins.
	 */
	private void percolateDown(int hole) {
		int child;
		AnyType tmp = array[hole];

		for (; hole * 2 <= currentSize; hole = child) {
			child = hole * 2;
			if (child != currentSize
					&& array[child + 1].compareTo(array[child]) < 0)
				child++;
			if (array[child].compareTo(tmp) < 0)
				array[hole] = array[child];
			else
				break;
		}
		array[hole] = tmp;
	}

}

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x ) --> Insert x
// void remove( x ) --> Remove x
// boolean contains( x ) --> Return true if x is present
// void makeEmpty( ) --> Remove all items

/**
 * Separate chaining table implementation of hash tables. Note that all
 * "matching" is based on the equals method.
 * 
 * @param <AnyType>
 */
	/**
	 * Construct the hash table.
	 */

public static class selec implements Comparable<selec> {
		int menor;
		int pos;

		public selec(int men, int p) {

			this.menor = men;
			this.pos = p;

		}

		// @override

		public int compareTo(selec x) {
			if (menor < x.menor) {
				return -1;
			} else if (menor > x.menor) {
				return 1;
			} else

				return 0;
		}
}

	public SeparateChainingHashTable() {
		this(DEFAULT_TABLE_SIZE);
	}

	/**
	 * Construct the hash table.
	 * 
	 * @param size
	 *            approximate table size.
	 */
	public SeparateChainingHashTable(int size) {
		theLists = new LinkedList[size];
		for (int i = 0; i < theLists.length; i++)
			theLists[i] = new LinkedList<>();
		colisiones = 0;

	}

	/**
	 * Insert into the hash table. If the item is already present, then do
	 * nothing.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		// if (!whichList.contains(x)) {
		whichList.add(x);
		if (whichList.size() > 1) {
			colisiones++;
		}
	}

	// Rehash; see Section 5.5
	/*
	 * if (++currentSize > theLists.length) rehash(); }
	 */
	// }

	/**
	 * Remove from the hash table.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		if (whichList.contains(x)) {
			int w = whichList.size();
			whichList.remove(x);
			currentSize--;

			/*
			 * if(whichList.size()==w-1 && w>1){ colisiones--; }
			 */
		}
	}

	/**
	 * Find an item in the hash table.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return true if x is found.
	 */
	public boolean contains(AnyType x) {
		List<AnyType> whichList = theLists[myhash(x)];
		return whichList.contains(x);
	}

	/**
	 * Make the hash table logically empty.
	 */
	public void makeEmpty() {
		for (int i = 0; i < theLists.length; i++)
			theLists[i].clear();
		currentSize = 0;
		colisiones = 0;
	}

	/**
	 * A hash routine for String objects.
	 * 
	 * @param key
	 *            the String to hash.
	 * @param tableSize
	 *            the size of the hash table.
	 * @return the hash value.
	 */
	public static int hash(String key, int tableSize) {
		int hashVal = 0;

		for (int i = 0; i < key.length(); i++)
			hashVal = 37 * hashVal + key.charAt(i);

		hashVal %= tableSize;
		if (hashVal < 0)
			hashVal += tableSize;

		return hashVal;
	}

	public int colision() {
		int r = 0;

		for (int c = 0; c < theLists.length; c++) {
			if (theLists[c].size() > r) {
				r = theLists[c].size();
			}
		}

		return r;
	}

	private void rehash() {
		List<AnyType>[] oldLists = theLists;

		// Create new double-sized, empty table
		theLists = new List[nextPrime(2 * theLists.length)];
		for (int j = 0; j < theLists.length; j++)
			theLists[j] = new LinkedList<>();

		// Copy table over
		currentSize = 0;
		colisiones = 0;
		for (List<AnyType> list : oldLists)
			for (AnyType item : list)
				insert(item);
	}

	@SuppressWarnings("unchecked")
	public void ordenar() {
		for (int q = 0; q < theLists.length; q++) {
			Collections.sort((List<Integer>) theLists[q]);
		}
	}

	public void imprimir() throws Exception {
		BinaryHeap<selec> elegidos = new BinaryHeap<selec>();
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				selec nuevo = new selec((Integer) theLists[q].get(0), q);
				elegidos.insert(nuevo);
			}
		}

		while (!elegidos.isEmpty()) {
			selec tmp = elegidos.deleteMin();

			for (int d = 0; d < theLists[tmp.pos].size(); d++) {
				if (d == theLists[tmp.pos].size() - 1) {
					System.out.print(theLists[tmp.pos].get(d));
				} else {
					System.out.print(theLists[tmp.pos].get(d) + " ");
				}
			}

			System.out.println();
		}
	}

	public void colisionados() {
		for (int q = 0; q < theLists.length; q++) {
			if (theLists[q].size() > 1) {
				for (int d = 0; d < theLists[q].size(); d++) {
					System.out.print(theLists[q].get(d) + " ");
				}
				System.out.println();
			}
		}
	}

	public int tamano() {
		return theLists.length;
	}

	private int myhash(AnyType x) {
		// int hashVal = (int) x;

		int hashVal = (Integer) x % theLists.length;
		if (hashVal < 0)
			hashVal += theLists.length;

		return hashVal;
	}

	private static final int DEFAULT_TABLE_SIZE = 101;

	/** The array of Lists. */
	private List<AnyType>[] theLists;
	private int currentSize;
	public static int colisiones;

	/**
	 * Internal method to find a prime number at least as large as n.
	 * 
	 * @param n
	 *            the starting number (must be positive).
	 * @return a prime number larger than or equal to n.
	 */
	@SuppressWarnings("empty-statement")
	private static int nextPrime(int n) {
		if (n % 2 == 0)
			n++;

		for (; !isPrime(n); n += 2)
			;

		return n;
	}

	/**
	 * Internal method to test if a number is prime. Not an efficient algorithm.
	 * 
	 * @param n
	 *            the number to test.
	 * @return the result of the test.
	 */
	private static boolean isPrime(int n) {
		if (n == 2 || n == 3)
			return true;

		if (n == 1 || n % 2 == 0)
			return false;

		for (int i = 3; i * i <= n; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

	// Simple main

	static class Nodo {
		int K;
		int colisiones;

		public Nodo(int k, int colision) {
			this.K = k;
			this.colisiones = colision;
		}

	}

	public static void main(String[] args) throws Exception {
		Scanner scan;
		File file = new File("A_2.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");

			int N = scan.nextInt();
			int M = scan.nextInt();

			int[] No = new int[N];
			int[] Mo = new int[M];

			for (int i = 0; i < No.length; i++) {
				No[i] = scan.nextInt();
			}
			for (int i = 0; i < Mo.length; i++) {
				Mo[i] = scan.nextInt();
			}
			Nodo menor = new Nodo(100000000, 100000000);
			// aqui empieza ese for
			for (int i = 0; i < M; i++) {

				int tm = Mo[i];

				SeparateChainingHashTable<Integer> intern = new SeparateChainingHashTable<Integer>(
						tm);
				for (int j = 0; j < N; j++) {
					intern.insert(No[j]);
				}

				// System.out.println(intern.tamano());
				int large = intern.colisiones;
				intern.colisiones = 0;
				if (large < menor.colisiones) {
					menor.colisiones = large;
					menor.K = Mo[i];
				} else if (large == menor.colisiones) {
					if (Mo[i] < menor.K) {
						menor.K = Mo[i];
					}
				}

			}

			// aqui termina ese for
			System.out.println(menor.K);
			System.out.println(menor.colisiones);

			SeparateChainingHashTable<Integer> fin = new SeparateChainingHashTable<Integer>(
					menor.K);
			for (int j = 0; j < No.length; j++) {
				fin.insert(No[j]);
			}
			// 13-nov-15 comente el if de contains en insert, permitiendo
			// insertar datos duplicados.
			// System.out.println(fin.colisiones);
			fin.ordenar();
			// fin.colisionados();
			fin.imprimir();

		}

	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
 package p2;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;



import java.util.LinkedList;
import java.util.List;

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// boolean contains( x )  --> Return true if x is present
// void makeEmpty( )      --> Remove all items

/**
 * Separate chaining table implementation of hash tables.
 * Note that all "matching" is based on the equals method.
 * @param <AnyType>
 */
public class SeparateChainingHashTable<AnyType>
{
    /**
     * Construct the hash table.
     */
    public SeparateChainingHashTable( )
    {
        this( DEFAULT_TABLE_SIZE );
    }

    /**
     * Construct the hash table.
     * @param size approximate table size.
     */
    public SeparateChainingHashTable( int size )
    {
        theLists = new LinkedList[( size ) ];
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ] = new LinkedList<>( );
    }

    /**
     * Insert into the hash table. If the item is
     * already present, then do nothing.
     * @param x the item to insert.
     */
    public void insert( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( !whichList.contains( x ) )
        {
            whichList.add( x );

                // Rehash; see Section 5.5
            if( ++currentSize > theLists.length )
                rehash( );
        }
    }

    /**
     * Remove from the hash table.
     * @param x the item to remove.
     */
    public void remove( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( whichList.contains( x ) )
    {
        whichList.remove( x );
            currentSize--;
    }
    }
    
    public void intercambio(){
    	for(int i=0; i<theLists.length; i++){
    		Collections.sort((List<Integer>) theLists[i]);
    	}
    }

    /**
     * Find an item in the hash table.
     * @param x the item to search for.
     * @return true if x is found.
     */
    public boolean contains( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        return whichList.contains( x );
    }

    /**
     * Make the hash table logically empty.
     */
    public void makeEmpty( )
    {
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ].clear( );
        currentSize = 0;  
    }

    /**
     * A hash routine for String objects.
     * @param key the String to hash.
     * @param tableSize the size of the hash table.
     * @return the hash value.
     */
    public static int hash( String key, int tableSize )
    {
        int hashVal = 0;

        for( int i = 0; i < key.length( ); i++ )
            hashVal = 37 * hashVal + key.charAt( i );

        hashVal %= tableSize;
        if( hashVal < 0 )
            hashVal += tableSize;

        return hashVal;
    }

    private void rehash( )
    {
        List<AnyType> [ ]  oldLists = theLists;

            // Create new double-sized, empty table
        theLists = new List[ nextPrime( 2 * theLists.length ) ];
        for( int j = 0; j < theLists.length; j++ )
            theLists[ j ] = new LinkedList<>( );

            // Copy table over
        currentSize = 0;
        for( List<AnyType> list : oldLists )
            for( AnyType item : list )
                insert( item );
    }
    public int size(){
    	return currentSize;
    }

    private int myhash( AnyType x )
    {
        int hashVal = x.hashCode( );

        hashVal %= theLists.length;
        if( hashVal < 0 )
            hashVal += theLists.length;

        return hashVal;
    }
    
    private static final int DEFAULT_TABLE_SIZE = 101;

        /** The array of Lists. */
    private List<AnyType> [ ] theLists; 
    private int currentSize;

    /**
     * Internal method to find a prime number at least as large as n.
     * @param n the starting number (must be positive).
     * @return a prime number larger than or equal to n.
     */
    @SuppressWarnings("empty-statement")
    private static int nextPrime( int n )
    {
        if( n % 2 == 0 )
            n++;

        for( ; !isPrime( n ); n += 2 )
            ;

        return n;
    }

    /**
     * Internal method to test if a number is prime.
     * Not an efficient algorithm.
     * @param n the number to test.
     * @return the result of the test.
     */
    private static boolean isPrime( int n )
    {
        if( n == 2 || n == 3 )
            return true;

        if( n == 1 || n % 2 == 0 )
            return false;

        for( int i = 3; i * i <= n; i += 2 )
            if( n % i == 0 )
                return false;

        return true;
    }
    
    public void imprimir(){
    	int a=0;
    	int[] winner= new int[currentSize];
    	for(int i=0; i<theLists.length; i++){
    		if (theLists[i].size() > 0) {
    			for(int w=0; w<theLists[i].size();w++){
    				winner[a]=(int) theLists[i].get(w);
    				a++;
    			}
    		}
    	}
    	
    	Arrays.sort(winner);
    	
    	for(int q=0; q<winner.length; q++){
    		System.out.println(winner[q]);
    	}
    }


        // Simple main
    public static void main( String [ ] args )
    {
        SeparateChainingHashTable<Integer> H = new SeparateChainingHashTable<>( );

        long startTime = System.currentTimeMillis( );
        
        final int NUMS = 2000000;
        final int GAP  =   37;

        System.out.println( "Checking... (no more output means success)" );

        for( int i = GAP; i != 0; i = ( i + GAP ) % NUMS )
            H.insert( i );
        for( int i = 1; i < NUMS; i+= 2 )
            H.remove( i );

        for( int i = 2; i < NUMS; i+=2 )
            if( !H.contains( i ) )
                System.out.println( "Find fails " + i );

        for( int i = 1; i < NUMS; i+=2 )
        {
            if( H.contains( i ) )
                System.out.println( "OOPS!!! " +  i  );
        }
        
        long endTime = System.currentTimeMillis( );
        
        System.out.println( "Elapsed time: " + (endTime - startTime) );
    }

}





public class EjercicioC {
	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_1.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			
			
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();
			
			SeparateChainingHashTable<Integer> normilla= new SeparateChainingHashTable<Integer>(par[0]);
			SeparateChainingHashTable<Integer> marios= new SeparateChainingHashTable<Integer>(par[1]);
			SeparateChainingHashTable<Integer> pipelin= new SeparateChainingHashTable<Integer>(par[2]);
			

			/*MyLinkedList<Integer> removed = new MyLinkedList<Integer>();

			 MyLinkedList<Integer> normilla =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> marios =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> pipelin =  new MyLinkedList<Integer>();*/

//			List normilla = new ArrayList();
//			List marios = new ArrayList();
//			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					
					marios.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					normilla.insert(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					normilla.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					marios.insert(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					marios.remove(p);
					
				} else if (normilla.contains(p)){
					normilla.remove(p);
					
				} else  {
					pipelin.insert(p);
				}

			}

			normilla.intercambio();

			marios.intercambio();
			pipelin.intercambio();
			// System.out.println(normilla.size());

			// Cuando los tres son iguales
			if (normilla.size() == marios.size()
					&& normilla.size() == pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
				System.out.println();
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando solo uno es el ganador
			if (normilla.size() > marios.size()
					&& normilla.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
			}else

			if (marios.size() > normilla.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() > normilla.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando dos son iguales

			if (normilla.size() == pipelin.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			if (normilla.size() == marios.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() == marios.size()
					&& marios.size() > normilla.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
					
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
// package p2;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;



import java.util.LinkedList;
import java.util.List;

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// boolean contains( x )  --> Return true if x is present
// void makeEmpty( )      --> Remove all items

/**
 * Separate chaining table implementation of hash tables.
 * Note that all "matching" is based on the equals method.
 * @param <AnyType>
 */
public class SeparateChainingHashTable<AnyType>
{
    /**
     * Construct the hash table.
     */
    public SeparateChainingHashTable( )
    {
        this( DEFAULT_TABLE_SIZE );
    }

    /**
     * Construct the hash table.
     * @param size approximate table size.
     */
    public SeparateChainingHashTable( int size )
    {
        theLists = new LinkedList[( size ) ];
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ] = new LinkedList<>( );
    }

    /**
     * Insert into the hash table. If the item is
     * already present, then do nothing.
     * @param x the item to insert.
     */
    public void insert( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( !whichList.contains( x ) )
        {
            whichList.add( x );

                // Rehash; see Section 5.5
            if( ++currentSize > theLists.length )
                rehash( );
        }
    }

    /**
     * Remove from the hash table.
     * @param x the item to remove.
     */
    public void remove( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( whichList.contains( x ) )
    {
        whichList.remove( x );
            currentSize--;
    }
    }
    
    public void intercambio(){
    	for(int i=0; i<theLists.length; i++){
    		Collections.sort((List<Integer>) theLists[i]);
    	}
    }

    /**
     * Find an item in the hash table.
     * @param x the item to search for.
     * @return true if x is found.
     */
    public boolean contains( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        return whichList.contains( x );
    }

    /**
     * Make the hash table logically empty.
     */
    public void makeEmpty( )
    {
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ].clear( );
        currentSize = 0;  
    }

    /**
     * A hash routine for String objects.
     * @param key the String to hash.
     * @param tableSize the size of the hash table.
     * @return the hash value.
     */
    public static int hash( String key, int tableSize )
    {
        int hashVal = 0;

        for( int i = 0; i < key.length( ); i++ )
            hashVal = 37 * hashVal + key.charAt( i );

        hashVal %= tableSize;
        if( hashVal < 0 )
            hashVal += tableSize;

        return hashVal;
    }

    private void rehash( )
    {
        List<AnyType> [ ]  oldLists = theLists;

            // Create new double-sized, empty table
        theLists = new List[ nextPrime( 2 * theLists.length ) ];
        for( int j = 0; j < theLists.length; j++ )
            theLists[ j ] = new LinkedList<>( );

            // Copy table over
        currentSize = 0;
        for( List<AnyType> list : oldLists )
            for( AnyType item : list )
                insert( item );
    }
    public int size(){
    	return currentSize;
    }

    private int myhash( AnyType x )
    {
        int hashVal = x.hashCode( );

        hashVal %= theLists.length;
        if( hashVal < 0 )
            hashVal += theLists.length;

        return hashVal;
    }
    
    private static final int DEFAULT_TABLE_SIZE = 101;

        /** The array of Lists. */
    private List<AnyType> [ ] theLists; 
    private int currentSize;

    /**
     * Internal method to find a prime number at least as large as n.
     * @param n the starting number (must be positive).
     * @return a prime number larger than or equal to n.
     */
    @SuppressWarnings("empty-statement")
    private static int nextPrime( int n )
    {
        if( n % 2 == 0 )
            n++;

        for( ; !isPrime( n ); n += 2 )
            ;

        return n;
    }

    /**
     * Internal method to test if a number is prime.
     * Not an efficient algorithm.
     * @param n the number to test.
     * @return the result of the test.
     */
    private static boolean isPrime( int n )
    {
        if( n == 2 || n == 3 )
            return true;

        if( n == 1 || n % 2 == 0 )
            return false;

        for( int i = 3; i * i <= n; i += 2 )
            if( n % i == 0 )
                return false;

        return true;
    }
    
    public void imprimir(){
    	int a=0;
    	int[] winner= new int[currentSize];
    	for(int i=0; i<theLists.length; i++){
    		if (theLists[i].size() > 0) {
    			for(int w=0; w<theLists[i].size();w++){
    				winner[a]=(int) theLists[i].get(w);
    				a++;
    			}
    		}
    	}
    	
    	Arrays.sort(winner);
    	
    	for(int q=0; q<winner.length; q++){
    		System.out.println(winner[q]);
    	}
    }


        // Simple main
    public static void main( String [ ] args )
    {
        SeparateChainingHashTable<Integer> H = new SeparateChainingHashTable<>( );

        long startTime = System.currentTimeMillis( );
        
        final int NUMS = 2000000;
        final int GAP  =   37;

        System.out.println( "Checking... (no more output means success)" );

        for( int i = GAP; i != 0; i = ( i + GAP ) % NUMS )
            H.insert( i );
        for( int i = 1; i < NUMS; i+= 2 )
            H.remove( i );

        for( int i = 2; i < NUMS; i+=2 )
            if( !H.contains( i ) )
                System.out.println( "Find fails " + i );

        for( int i = 1; i < NUMS; i+=2 )
        {
            if( H.contains( i ) )
                System.out.println( "OOPS!!! " +  i  );
        }
        
        long endTime = System.currentTimeMillis( );
        
        System.out.println( "Elapsed time: " + (endTime - startTime) );
    }

}





public class EjercicioC {
	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_1.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			
			
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();
			
			SeparateChainingHashTable<Integer> normilla= new SeparateChainingHashTable<Integer>(par[0]);
			SeparateChainingHashTable<Integer> marios= new SeparateChainingHashTable<Integer>(par[1]);
			SeparateChainingHashTable<Integer> pipelin= new SeparateChainingHashTable<Integer>(par[2]);
			

			/*MyLinkedList<Integer> removed = new MyLinkedList<Integer>();

			 MyLinkedList<Integer> normilla =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> marios =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> pipelin =  new MyLinkedList<Integer>();*/

//			List normilla = new ArrayList();
//			List marios = new ArrayList();
//			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					
					marios.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					normilla.insert(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					normilla.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					marios.insert(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					marios.remove(p);
					
				} else if (normilla.contains(p)){
					normilla.remove(p);
					
				} else  {
					pipelin.insert(p);
				}

			}

			normilla.intercambio();

			marios.intercambio();
			pipelin.intercambio();
			// System.out.println(normilla.size());

			// Cuando los tres son iguales
			if (normilla.size() == marios.size()
					&& normilla.size() == pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
				System.out.println();
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando solo uno es el ganador
			if (normilla.size() > marios.size()
					&& normilla.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
			}else

			if (marios.size() > normilla.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() > normilla.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando dos son iguales

			if (normilla.size() == pipelin.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			if (normilla.size() == marios.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() == marios.size()
					&& marios.size() > normilla.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
					
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
// package p2;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;



import java.util.LinkedList;
import java.util.List;

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// boolean contains( x )  --> Return true if x is present
// void makeEmpty( )      --> Remove all items

/**
 * Separate chaining table implementation of hash tables.
 * Note that all "matching" is based on the equals method.
 * @param <AnyType>
 */





public class EjercicioC {
public class SeparateChainingHashTable<AnyType>
{
    /**
     * Construct the hash table.
     */
    public SeparateChainingHashTable( )
    {
        this( DEFAULT_TABLE_SIZE );
    }

    /**
     * Construct the hash table.
     * @param size approximate table size.
     */
    public SeparateChainingHashTable( int size )
    {
        theLists = new LinkedList[( size ) ];
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ] = new LinkedList<>( );
    }

    /**
     * Insert into the hash table. If the item is
     * already present, then do nothing.
     * @param x the item to insert.
     */
    public void insert( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( !whichList.contains( x ) )
        {
            whichList.add( x );

                // Rehash; see Section 5.5
            if( ++currentSize > theLists.length )
                rehash( );
        }
    }

    /**
     * Remove from the hash table.
     * @param x the item to remove.
     */
    public void remove( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( whichList.contains( x ) )
    {
        whichList.remove( x );
            currentSize--;
    }
    }
    
    public void intercambio(){
    	for(int i=0; i<theLists.length; i++){
    		Collections.sort((List<Integer>) theLists[i]);
    	}
    }

    /**
     * Find an item in the hash table.
     * @param x the item to search for.
     * @return true if x is found.
     */
    public boolean contains( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        return whichList.contains( x );
    }

    /**
     * Make the hash table logically empty.
     */
    public void makeEmpty( )
    {
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ].clear( );
        currentSize = 0;  
    }

    /**
     * A hash routine for String objects.
     * @param key the String to hash.
     * @param tableSize the size of the hash table.
     * @return the hash value.
     */
    public static int hash( String key, int tableSize )
    {
        int hashVal = 0;

        for( int i = 0; i < key.length( ); i++ )
            hashVal = 37 * hashVal + key.charAt( i );

        hashVal %= tableSize;
        if( hashVal < 0 )
            hashVal += tableSize;

        return hashVal;
    }

    private void rehash( )
    {
        List<AnyType> [ ]  oldLists = theLists;

            // Create new double-sized, empty table
        theLists = new List[ nextPrime( 2 * theLists.length ) ];
        for( int j = 0; j < theLists.length; j++ )
            theLists[ j ] = new LinkedList<>( );

            // Copy table over
        currentSize = 0;
        for( List<AnyType> list : oldLists )
            for( AnyType item : list )
                insert( item );
    }
    public int size(){
    	return currentSize;
    }

    private int myhash( AnyType x )
    {
        int hashVal = x.hashCode( );

        hashVal %= theLists.length;
        if( hashVal < 0 )
            hashVal += theLists.length;

        return hashVal;
    }
    
    private static final int DEFAULT_TABLE_SIZE = 101;

        /** The array of Lists. */
    private List<AnyType> [ ] theLists; 
    private int currentSize;

    /**
     * Internal method to find a prime number at least as large as n.
     * @param n the starting number (must be positive).
     * @return a prime number larger than or equal to n.
     */
    @SuppressWarnings("empty-statement")
    private static int nextPrime( int n )
    {
        if( n % 2 == 0 )
            n++;

        for( ; !isPrime( n ); n += 2 )
            ;

        return n;
    }

    /**
     * Internal method to test if a number is prime.
     * Not an efficient algorithm.
     * @param n the number to test.
     * @return the result of the test.
     */
    private static boolean isPrime( int n )
    {
        if( n == 2 || n == 3 )
            return true;

        if( n == 1 || n % 2 == 0 )
            return false;

        for( int i = 3; i * i <= n; i += 2 )
            if( n % i == 0 )
                return false;

        return true;
    }
    
    public void imprimir(){
    	int a=0;
    	int[] winner= new int[currentSize];
    	for(int i=0; i<theLists.length; i++){
    		if (theLists[i].size() > 0) {
    			for(int w=0; w<theLists[i].size();w++){
    				winner[a]=(int) theLists[i].get(w);
    				a++;
    			}
    		}
    	}
    	
    	Arrays.sort(winner);
    	
    	for(int q=0; q<winner.length; q++){
    		System.out.println(winner[q]);
    	}
    }


        // Simple main
   

}

	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_1.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			
			
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();
			
			SeparateChainingHashTable<Integer> normilla= new SeparateChainingHashTable<Integer>(par[0]);
			SeparateChainingHashTable<Integer> marios= new SeparateChainingHashTable<Integer>(par[1]);
			SeparateChainingHashTable<Integer> pipelin= new SeparateChainingHashTable<Integer>(par[2]);
			

			/*MyLinkedList<Integer> removed = new MyLinkedList<Integer>();

			 MyLinkedList<Integer> normilla =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> marios =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> pipelin =  new MyLinkedList<Integer>();*/

//			List normilla = new ArrayList();
//			List marios = new ArrayList();
//			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					
					marios.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					normilla.insert(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					normilla.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					marios.insert(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					marios.remove(p);
					
				} else if (normilla.contains(p)){
					normilla.remove(p);
					
				} else  {
					pipelin.insert(p);
				}

			}

			normilla.intercambio();

			marios.intercambio();
			pipelin.intercambio();
			// System.out.println(normilla.size());

			// Cuando los tres son iguales
			if (normilla.size() == marios.size()
					&& normilla.size() == pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
				System.out.println();
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando solo uno es el ganador
			if (normilla.size() > marios.size()
					&& normilla.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
			}else

			if (marios.size() > normilla.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() > normilla.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando dos son iguales

			if (normilla.size() == pipelin.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			if (normilla.size() == marios.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() == marios.size()
					&& marios.size() > normilla.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
					
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
// package p2;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;



import java.util.LinkedList;
import java.util.List;

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// boolean contains( x )  --> Return true if x is present
// void makeEmpty( )      --> Remove all items

/**
 * Separate chaining table implementation of hash tables.
 * Note that all "matching" is based on the equals method.
 * @param <AnyType>
 */





public class EjercicioC {
public class SeparateChainingHashTable<AnyType>
{
    /**
     * Construct the hash table.
     */
    public SeparateChainingHashTable( )
    {
        this( DEFAULT_TABLE_SIZE );
    }

    /**
     * Construct the hash table.
     * @param size approximate table size.
     */
    public SeparateChainingHashTable( int size )
    {
        theLists = new LinkedList[( size ) ];
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ] = new LinkedList<>( );
    }

    /**
     * Insert into the hash table. If the item is
     * already present, then do nothing.
     * @param x the item to insert.
     */
    public void insert( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( !whichList.contains( x ) )
        {
            whichList.add( x );

                // Rehash; see Section 5.5
            if( ++currentSize > theLists.length )
                rehash( );
        }
    }

    /**
     * Remove from the hash table.
     * @param x the item to remove.
     */
    public void remove( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( whichList.contains( x ) )
    {
        whichList.remove( x );
            currentSize--;
    }
    }
    
    public void intercambio(){
    	for(int i=0; i<theLists.length; i++){
    		Collections.sort((List<Integer>) theLists[i]);
    	}
    }

    /**
     * Find an item in the hash table.
     * @param x the item to search for.
     * @return true if x is found.
     */
    public boolean contains( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        return whichList.contains( x );
    }

    /**
     * Make the hash table logically empty.
     */
    public void makeEmpty( )
    {
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ].clear( );
        currentSize = 0;  
    }

    /**
     * A hash routine for String objects.
     * @param key the String to hash.
     * @param tableSize the size of the hash table.
     * @return the hash value.
     */
    public int hash( String key, int tableSize )
    {
        int hashVal = 0;

        for( int i = 0; i < key.length( ); i++ )
            hashVal = 37 * hashVal + key.charAt( i );

        hashVal %= tableSize;
        if( hashVal < 0 )
            hashVal += tableSize;

        return hashVal;
    }

    private void rehash( )
    {
        List<AnyType> [ ]  oldLists = theLists;

            // Create new double-sized, empty table
        theLists = new List[ nextPrime( 2 * theLists.length ) ];
        for( int j = 0; j < theLists.length; j++ )
            theLists[ j ] = new LinkedList<>( );

            // Copy table over
        currentSize = 0;
        for( List<AnyType> list : oldLists )
            for( AnyType item : list )
                insert( item );
    }
    public int size(){
    	return currentSize;
    }

    private int myhash( AnyType x )
    {
        int hashVal = x.hashCode( );

        hashVal %= theLists.length;
        if( hashVal < 0 )
            hashVal += theLists.length;

        return hashVal;
    }
    
    private final int DEFAULT_TABLE_SIZE = 101;

        /** The array of Lists. */
    private List<AnyType> [ ] theLists; 
    private int currentSize;

    /**
     * Internal method to find a prime number at least as large as n.
     * @param n the starting number (must be positive).
     * @return a prime number larger than or equal to n.
     */
    @SuppressWarnings("empty-statement")
    private int nextPrime( int n )
    {
        if( n % 2 == 0 )
            n++;

        for( ; !isPrime( n ); n += 2 )
            ;

        return n;
    }

    /**
     * Internal method to test if a number is prime.
     * Not an efficient algorithm.
     * @param n the number to test.
     * @return the result of the test.
     */
    private boolean isPrime( int n )
    {
        if( n == 2 || n == 3 )
            return true;

        if( n == 1 || n % 2 == 0 )
            return false;

        for( int i = 3; i * i <= n; i += 2 )
            if( n % i == 0 )
                return false;

        return true;
    }
    
    public void imprimir(){
    	int a=0;
    	int[] winner= new int[currentSize];
    	for(int i=0; i<theLists.length; i++){
    		if (theLists[i].size() > 0) {
    			for(int w=0; w<theLists[i].size();w++){
    				winner[a]=(Integer) theLists[i].get(w);
    				a++;
    			}
    		}
    	}
    	
    	Arrays.sort(winner);
    	
    	for(int q=0; q<winner.length; q++){
    		System.out.println(winner[q]);
    	}
    }


        // Simple main
   

}

	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_1.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			
			
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();
			
			SeparateChainingHashTable<Integer> normilla= new SeparateChainingHashTable<Integer>(par[0]);
			SeparateChainingHashTable<Integer> marios= new SeparateChainingHashTable<Integer>(par[1]);
			SeparateChainingHashTable<Integer> pipelin= new SeparateChainingHashTable<Integer>(par[2]);
			

			/*MyLinkedList<Integer> removed = new MyLinkedList<Integer>();

			 MyLinkedList<Integer> normilla =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> marios =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> pipelin =  new MyLinkedList<Integer>();*/

//			List normilla = new ArrayList();
//			List marios = new ArrayList();
//			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					
					marios.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					normilla.insert(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					normilla.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					marios.insert(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					marios.remove(p);
					
				} else if (normilla.contains(p)){
					normilla.remove(p);
					
				} else  {
					pipelin.insert(p);
				}

			}

			normilla.intercambio();

			marios.intercambio();
			pipelin.intercambio();
			// System.out.println(normilla.size());

			// Cuando los tres son iguales
			if (normilla.size() == marios.size()
					&& normilla.size() == pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
				System.out.println();
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando solo uno es el ganador
			if (normilla.size() > marios.size()
					&& normilla.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
			}else

			if (marios.size() > normilla.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() > normilla.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando dos son iguales

			if (normilla.size() == pipelin.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			if (normilla.size() == marios.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() == marios.size()
					&& marios.size() > normilla.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
					
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
 package p2;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;



import java.util.LinkedList;
import java.util.List;

// SeparateChaining Hash table class
//
// CONSTRUCTION: an approximate initial size or default of 101
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// boolean contains( x )  --> Return true if x is present
// void makeEmpty( )      --> Remove all items

/**
 * Separate chaining table implementation of hash tables.
 * Note that all "matching" is based on the equals method.
 * @param <AnyType>
 */
public class SeparateChainingHashTable<AnyType>
{
    /**
     * Construct the hash table.
     */
    public SeparateChainingHashTable( )
    {
        this( DEFAULT_TABLE_SIZE );
    }

    /**
     * Construct the hash table.
     * @param size approximate table size.
     */
    public SeparateChainingHashTable( int size )
    {
        theLists = new LinkedList[( size ) ];
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ] = new LinkedList<>( );
    }

    /**
     * Insert into the hash table. If the item is
     * already present, then do nothing.
     * @param x the item to insert.
     */
    public void insert( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( !whichList.contains( x ) )
        {
            whichList.add( x );

                // Rehash; see Section 5.5
            if( ++currentSize > theLists.length )
                rehash( );
        }
    }

    /**
     * Remove from the hash table.
     * @param x the item to remove.
     */
    public void remove( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        if( whichList.contains( x ) )
    {
        whichList.remove( x );
            currentSize--;
    }
    }
    
    public void intercambio(){
    	for(int i=0; i<theLists.length; i++){
    		Collections.sort((List<Integer>) theLists[i]);
    	}
    }

    /**
     * Find an item in the hash table.
     * @param x the item to search for.
     * @return true if x is found.
     */
    public boolean contains( AnyType x )
    {
        List<AnyType> whichList = theLists[ myhash( x ) ];
        return whichList.contains( x );
    }

    /**
     * Make the hash table logically empty.
     */
    public void makeEmpty( )
    {
        for( int i = 0; i < theLists.length; i++ )
            theLists[ i ].clear( );
        currentSize = 0;  
    }

    /**
     * A hash routine for String objects.
     * @param key the String to hash.
     * @param tableSize the size of the hash table.
     * @return the hash value.
     */
    public static int hash( String key, int tableSize )
    {
        int hashVal = 0;

        for( int i = 0; i < key.length( ); i++ )
            hashVal = 37 * hashVal + key.charAt( i );

        hashVal %= tableSize;
        if( hashVal < 0 )
            hashVal += tableSize;

        return hashVal;
    }

    private void rehash( )
    {
        List<AnyType> [ ]  oldLists = theLists;

            // Create new double-sized, empty table
        theLists = new List[ nextPrime( 2 * theLists.length ) ];
        for( int j = 0; j < theLists.length; j++ )
            theLists[ j ] = new LinkedList<>( );

            // Copy table over
        currentSize = 0;
        for( List<AnyType> list : oldLists )
            for( AnyType item : list )
                insert( item );
    }
    public int size(){
    	return currentSize;
    }

    private int myhash( AnyType x )
    {
        int hashVal = x.hashCode( );

        hashVal %= theLists.length;
        if( hashVal < 0 )
            hashVal += theLists.length;

        return hashVal;
    }
    
    private static final int DEFAULT_TABLE_SIZE = 101;

        /** The array of Lists. */
    private List<AnyType> [ ] theLists; 
    private int currentSize;

    /**
     * Internal method to find a prime number at least as large as n.
     * @param n the starting number (must be positive).
     * @return a prime number larger than or equal to n.
     */
    @SuppressWarnings("empty-statement")
    private static int nextPrime( int n )
    {
        if( n % 2 == 0 )
            n++;

        for( ; !isPrime( n ); n += 2 )
            ;

        return n;
    }

    /**
     * Internal method to test if a number is prime.
     * Not an efficient algorithm.
     * @param n the number to test.
     * @return the result of the test.
     */
    private static boolean isPrime( int n )
    {
        if( n == 2 || n == 3 )
            return true;

        if( n == 1 || n % 2 == 0 )
            return false;

        for( int i = 3; i * i <= n; i += 2 )
            if( n % i == 0 )
                return false;

        return true;
    }
    
    public void imprimir(){
    	int a=0;
    	int[] winner= new int[currentSize];
    	for(int i=0; i<theLists.length; i++){
    		if (theLists[i].size() > 0) {
    			for(int w=0; w<theLists[i].size();w++){
    				winner[a]=(int) theLists[i].get(w);
    				a++;
    			}
    		}
    	}
    	
    	Arrays.sort(winner);
    	
    	for(int q=0; q<winner.length; q++){
    		System.out.println(winner[q]);
    	}
    }


        // Simple main
    public static void main( String [ ] args )
    {
        SeparateChainingHashTable<Integer> H = new SeparateChainingHashTable<>( );

        long startTime = System.currentTimeMillis( );
        
        final int NUMS = 2000000;
        final int GAP  =   37;

        System.out.println( "Checking... (no more output means success)" );

        for( int i = GAP; i != 0; i = ( i + GAP ) % NUMS )
            H.insert( i );
        for( int i = 1; i < NUMS; i+= 2 )
            H.remove( i );

        for( int i = 2; i < NUMS; i+=2 )
            if( !H.contains( i ) )
                System.out.println( "Find fails " + i );

        for( int i = 1; i < NUMS; i+=2 )
        {
            if( H.contains( i ) )
                System.out.println( "OOPS!!! " +  i  );
        }
        
        long endTime = System.currentTimeMillis( );
        
        System.out.println( "Elapsed time: " + (endTime - startTime) );
    }

}





public class EjercicioC {
	/**
	 * @param args
	 * @throws FileNotFoundException
	 */
	
	
	public static void main(String[] args) throws FileNotFoundException {

		Scanner scan;
		File file = new File("C_1.txt");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			
			
			int[] par = new int[3];
			par[0] = scan.nextInt();
			par[1] = scan.nextInt();
			par[2] = scan.nextInt();
			
			SeparateChainingHashTable<Integer> normilla= new SeparateChainingHashTable<Integer>(par[0]);
			SeparateChainingHashTable<Integer> marios= new SeparateChainingHashTable<Integer>(par[1]);
			SeparateChainingHashTable<Integer> pipelin= new SeparateChainingHashTable<Integer>(par[2]);
			

			/*MyLinkedList<Integer> removed = new MyLinkedList<Integer>();

			 MyLinkedList<Integer> normilla =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> marios =  new MyLinkedList<Integer>();
			 MyLinkedList<Integer> pipelin =  new MyLinkedList<Integer>();*/

//			List normilla = new ArrayList();
//			List marios = new ArrayList();
//			List pipelin = new ArrayList();

			for (int i = 0; i < par[0]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					
					marios.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					normilla.insert(p);
				}
			}

			for (int i = 0; i < par[1]; i++) {
				int p = scan.nextInt();
				if (normilla.contains(p)) {
					normilla.remove(p);
					
				} else if (pipelin.contains(p)){
					pipelin.remove(p);
					
				} else  {
					marios.insert(p);
				}
			}

			for (int i = 0; i < par[2]; i++) {
				int p = scan.nextInt();
				if (marios.contains(p)) {
					marios.remove(p);
					
				} else if (normilla.contains(p)){
					normilla.remove(p);
					
				} else  {
					pipelin.insert(p);
				}

			}

			normilla.intercambio();

			marios.intercambio();
			pipelin.intercambio();
			// System.out.println(normilla.size());

			// Cuando los tres son iguales
			if (normilla.size() == marios.size()
					&& normilla.size() == pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
				System.out.println();
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando solo uno es el ganador
			if (normilla.size() > marios.size()
					&& normilla.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
			}else

			if (marios.size() > normilla.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() > normilla.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			// Cuando dos son iguales

			if (normilla.size() == pipelin.size()
					&& pipelin.size() > marios.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}else

			if (normilla.size() == marios.size()
					&& marios.size() > pipelin.size()) {
				System.out.print("Norma "+normilla.size()+" ");
				normilla.imprimir();
				
				System.out.println();

				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
			}else

			if (pipelin.size() == marios.size()
					&& marios.size() > normilla.size()) {
				System.out.print("Mario "+marios.size()+" ");
				marios.imprimir();
					
				System.out.println();

				System.out.print("Pipe "+pipelin.size()+" ");
				pipelin.imprimir();
			}

			System.out.println();
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class EjercicioA {

	static class MyGraph  {
		
		class Nodo implements Comparable<Nodo> {
			Integer v;
			Integer w;
			Integer weight;
			/**
			 * @param v
			 * @param w
			 * @param weight
			 */
			public Nodo(Integer v, Integer w, Integer weight) {
				this.v = v;
				this.w = w;
				this.weight = weight;
			}
			@Override
			public int compareTo(Nodo o) {
				if(weight == o.weight){
					return v - o.v;
				}
				return weight - o.weight;
			}
			
			
			
			
		}

		ArrayList<ArrayList<Integer>> graf;

		public MyGraph() {
			graf = new ArrayList<ArrayList<Integer>>();

		}

		public void add(int v, int w) {
			graf.get(v).add(w);
			graf.get(w).add(v);
		}

		public int BFS(int source) {
			Queue<Integer> q = new LinkedList<Integer>();
			int number=0;
			q.add(source);
			int dist[] = new int[graf.size()];
			boolean vis[] = new boolean[graf.size()];
			dist[source] = 0;
			vis[source] = true;
			while (!q.isEmpty()) {
				int current = q.poll();
				for (int i = 0; i < graf.get(current).size(); i++) {
					int neigh = graf.get(current).get(i);
					if (vis[neigh] == false) {
						number++;
						q.add(neigh);
						dist[neigh] = dist[current] + 1;
						vis[neigh]=true;
					}
				}
			}
			
			return number;
		}

		public boolean conectVW(int v, int w) {

			for (int i = 0; i < graf.get(v).size(); i++) {
				if (graf.get(v).get(i) == w)
					return true;
			}
			return false;
		}
		
		
		

	}
	
	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan;
		File file = new File("P7A_15_2_1.in");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #"+(test+1)+":");
			MyGraph metro= new MyGraph();
			String lines[] = scan.nextLine().split(" ");
			int N=Integer.parseInt(lines[0]);
			int M=Integer.parseInt(lines[1]);
			
			for(int i=0; i<N; i++){
				ArrayList<Integer> estacion= new ArrayList<Integer>();
				metro.graf.add(estacion);
			}
			
			for(int i=0; i<M; i++){
				String via[] = scan.nextLine().split(" ");
				int v=Integer.parseInt(via[0]);
				int w=Integer.parseInt(via[1]);
				metro.add(v, w);
			}
			
			String want[] = scan.nextLine().split(" ");
			int wa=Integer.parseInt(want[0]);
			System.out.println(metro.BFS(wa));
		}
	}
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class EjercicioB {

	static class MyGraph {

		class Nodo /*implements Comparable<Nodo>*/ {
			Integer inDegree;
			Integer topNum=0;

			/**
			 * @param v
			 * @param w
			 * @param weight
			 */
			public Nodo( Integer w) {
				this.inDegree=w;
			}

			/*@Override
			public int compareTo(Nodo o) {
				if (weight == o.weight) {
					return v - o.v;
				}
				return weight - o.weight;
			}*/

		}

		ArrayList<ArrayList<Integer>> graf;

		public MyGraph() {
			graf = new ArrayList<ArrayList<Integer>>();

		}

		public void add(int v, int w) {
			graf.get(v).add(w);
		}

		public int BFS(int source) {
			Queue<Integer> q = new LinkedList<Integer>();
			int number = 0;
			q.add(source);
			int dist[] = new int[graf.size()];
			boolean vis[] = new boolean[graf.size()];
			dist[source] = 0;
			vis[source] = true;
			while (!q.isEmpty()) {
				int current = q.poll();
				for (int i = 0; i < graf.get(current).size(); i++) {
					int neigh = graf.get(current).get(i);
					if (vis[neigh] == false) {
						number++;
						q.add(neigh);
						dist[neigh] = dist[current] + 1;
						vis[neigh] = true;
					}
				}
			}

			return number;
		}

		public boolean conectVW(int v, int w) {

			for (int i = 0; i < graf.get(v).size(); i++) {
				if (graf.get(v).get(i) == w)
					return true;
			}
			return false;
		}

		public int outDegree(int v) {
			return graf.get(v).size();
		}

		public int inDegree(int v) {
			int a = 0;
			for (int i = 0; i < graf.size(); i++) {
				if (graf.get(i).contains(v)) {
					a++;
				}
			}

			return a;
		}

		public void topSort() {
			Queue<Integer> orden = new LinkedList<Integer>();
			Nodo[] topics=new Nodo[graf.size()];
			int counter = 0;
			
			for(int i=0; i<graf.size();i++){
				topics[i]= new Nodo(inDegree(i));
			}

			for (int i = 0; i < graf.size(); i++) {
				if (topics[i].inDegree == 0) {
					orden.offer(i);
					counter++; // proyecto 7.
				}
			}
			// ////////////////////////////////////////

			if (counter > 1) {
																// proyecto 7.
				return;
			}

			// ////////////////////////////////////////

			while (!orden.isEmpty()) {
				Integer v = orden.poll();
				 topics[v].topNum=++counter;

				int ctr = 0;

				for (int i = 0; i < graf.get(v).size(); i++) {
					if (--topics[graf.get(v).get(i)].inDegree == 0) {
						orden.offer(graf.get(v).get(i));
						ctr++; // Para proyecto 7.
					}
				}

				// //////////////////////////////////////////

				if (ctr > 1) {
																	// proyecto
																	// 7.
					return;
				}

				// //////////////////////////////////////////
			}

			// /////////////////////////////////////////////

			System.out.println("Deberia empezar a estudiar"); // /Solo para el
																// proyecto 7.

			// /////////////////////////////////////////////
		}

	}

	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan;
		File file = new File("P7B_15_2_1.in");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");
			MyGraph materia = new MyGraph();
			String lines[] = scan.nextLine().split(" ");
			int N = Integer.parseInt(lines[0]);
			int M = Integer.parseInt(lines[1]);

			for (int i = 0; i < N; i++) {
				ArrayList<Integer> tema = new ArrayList<Integer>();
				materia.graf.add(tema);
			}

			for (int i = 0; i < M; i++) {
				String pre[] = scan.nextLine().split(" ");
				int v = Integer.parseInt(pre[0]);
				int w = Integer.parseInt(pre[1]);
				materia.add(v, w);
			}

			materia.topSort();
		}
	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class EjercicioC {

	static class MyGraphWeighted {
		class Nodo implements Comparable<Nodo> {
			Integer w;
			Long Time;

			/**
			 * @param v
			 * @param w
			 * @param weight
			 */
			public Nodo(int w, Long time) {
				this.w = w;
				this.Time = time;
			}

			@Override
			public int compareTo(Nodo o) {
				if (Time == o.Time) {
					return w - o.w;
				}
				return (int) (Time - o.Time);
			}

		}

		ArrayList<ArrayList<Nodo>> graf;

		public MyGraphWeighted() {
			graf = new ArrayList<ArrayList<Nodo>>();

		}

		public void add(int v, int w, long time) {
			Nodo tmp = new Nodo(w, time);
			graf.get(v).add(tmp);
		}

		public long Dikjtra(int source, int end, long time, MyGraphWeighted x) {
			PriorityQueue<Nodo> q = new PriorityQueue<Nodo>();
			Nodo sourc = new Nodo(source, (long) 0);
			boolean o = false;
			long[] dist = new long[graf.size()];
			for (int i = 0; i < dist.length; i++) {
				dist[i] = 10000000;
			}
			int number = 0;
			q.add(sourc);
			dist[source] = 0;
			while (!q.isEmpty()) {
				Nodo current = q.poll();
				if (dist[current.w] < current.Time) {
					continue;
				}
				for (Nodo tmp : x.graf.get(current.w)) {
					if (dist[tmp.w] > current.Time + tmp.Time) {
						dist[tmp.w] = current.Time + tmp.Time;
						q.add(new Nodo(tmp.w, dist[tmp.w]));

					}
				}
			}

			return dist[end];
		}

		public int find(int end, int time, MyGraphWeighted x) {
			int a = 0;
			for (int i = 0; i < x.graf.size(); i++) {
				if (Dikjtra(i, end, time, x) <=time) {
					a++;
				}
			}
			return a;
		}

		public boolean conectVW(int v, int w) {

			for (int i = 0; i < graf.get(v).size(); i++) {
				if (graf.get(v).get(i).w == w)
					return true;
			}
			return false;
		}

		public int outDegree(int v) {
			return graf.get(v).size();
		}

		public int inDegree(int v) {
			int a = 0;
			for (int i = 0; i < graf.size(); i++) {
				if (graf.get(i).get(i).w == v) {
					a++;
				}
			}

			return a;
		}

		public void topSort() {
			Queue<Integer> orden = new LinkedList<Integer>();
			int counter = 0;

			for (int i = 0; i < graf.size(); i++) {
				if (inDegree(i) == 0) {
					orden.offer(i);

				}
			}

			while (!orden.isEmpty()) {
				Integer v = orden.poll();
				// v.topNum=++counter

				for (int i = 0; i < graf.get(v).size(); i++) {
					if (inDegree(graf.get(v).get(i).w) - 1 == 0) {
						orden.offer(graf.get(v).get(i).w);
					}
				}

			}

		}

	}

	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan;
		File file = new File("P7C_15_2_2.in");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");
			MyGraphWeighted laberinto = new MyGraphWeighted();
			String lines[] = scan.nextLine().split(" ");
			int N = Integer.parseInt(lines[0]);
			int E = Integer.parseInt(lines[1]);
			int Time = Integer.parseInt(lines[2]);

			for (int i = 0; i < N; i++) {
				ArrayList<MyGraphWeighted.Nodo> celda = new ArrayList<MyGraphWeighted.Nodo>();
				laberinto.graf.add(celda);
			}
			String m[] = scan.nextLine().split(" ");
			int M = Integer.parseInt(m[0]);
			for (int i = 0; i < M; i++) {
				String recor[] = scan.nextLine().split(" ");
				int v = Integer.parseInt(recor[0]);
				int w = Integer.parseInt(recor[1]);
				int time = Integer.parseInt(recor[2]);
				laberinto.add(v, w, time);
			}

			int s = laberinto.find(E, Time, laberinto);
			System.out.println(s);
		}
	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class EjercicioD {

	static class MyGraph {

		class Nodo /*implements Comparable<Nodo>*/ {
			Integer inDegree;
			Integer topNum=0;

			/**
			 * @param v
			 * @param w
			 * @param weight
			 */
			public Nodo( Integer w) {
				this.inDegree=w;
			}

			/*@Override
			public int compareTo(Nodo o) {
				if (weight == o.weight) {
					return v - o.v;
				}
				return weight - o.weight;
			}*/

		}

		ArrayList<ArrayList<Integer>> graf;

		public MyGraph() {
			graf = new ArrayList<ArrayList<Integer>>();

		}

		public void add(int v, int w) {
			graf.get(v).add(w);
		}

		public int BFS(int source) {
			Queue<Integer> q = new LinkedList<Integer>();
			int number = 0;
			q.add(source);
			int dist[] = new int[graf.size()];
			boolean vis[] = new boolean[graf.size()];
			dist[source] = 0;
			vis[source] = true;
			while (!q.isEmpty()) {
				int current = q.poll();
				for (int i = 0; i < graf.get(current).size(); i++) {
					int neigh = graf.get(current).get(i);
					if (vis[neigh] == false) {
						number++;
						q.add(neigh);
						dist[neigh] = dist[current] + 1;
						vis[neigh] = true;
					}
				}
			}

			return number;
		}

		public boolean conectVW(int v, int w) {

			for (int i = 0; i < graf.get(v).size(); i++) {
				if (graf.get(v).get(i) == w)
					return true;
			}
			return false;
		}

		public int outDegree(int v) {
			return graf.get(v).size();
		}

		public int inDegree(int v) {
			int a = 0;
			for (int i = 0; i < graf.size(); i++) {
				if (graf.get(i).contains(v)) {
					a++;
				}
			}

			return a;
		}

		public void topSort() {
			PriorityQueue<Integer> orden = new PriorityQueue<Integer>();
			Nodo[] topics=new Nodo[graf.size()];
			int counter = 0;
			
			for(int i=0; i<graf.size();i++){
				topics[i]= new Nodo(inDegree(i));
			}

			for (int i = 0; i < graf.size(); i++) {
				if (topics[i].inDegree == 0) {
					orden.add(i);
					counter++; // proyecto 7.
				}
			}
		/*	// ////////////////////////////////////////

			if (counter > 1) { // Solo para
															// proyecto 7.
				return;
			}*/

			// ////////////////////////////////////////

			while (!orden.isEmpty()) {
				Integer v = orden.remove();
				System.out.print(v+",");
				 topics[v].topNum=++counter;

				int ctr = 0;

				for (int i = 0; i < graf.get(v).size(); i++) {
					if (--topics[graf.get(v).get(i)].inDegree == 0) {
						orden.add(graf.get(v).get(i));
						ctr++; // Para proyecto 7.
					}
				}
/*
				// //////////////////////////////////////////

				if (ctr > 1) {
																	// proyecto
																	// 7.
					return;
				}
*/
				// //////////////////////////////////////////
			}

			/*// /////////////////////////////////////////////

			System.out.println("Deberia empezar a estudiar"); // /Solo para el
																// proyecto 7.

			// /////////////////////////////////////////////
*/		}

	}
	
	
	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan;
		File file = new File("P7B_15_2_1.in");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");
			MyGraph materia = new MyGraph();
			String lines[] = scan.nextLine().split(" ");
			int N = Integer.parseInt(lines[0]);
			int M = Integer.parseInt(lines[1]);

			for (int i = 0; i < N; i++) {
				ArrayList<Integer> tema = new ArrayList<Integer>();
				materia.graf.add(tema);
			}

			for (int i = 0; i < M; i++) {
				String pre[] = scan.nextLine().split(" ");
				int v = Integer.parseInt(pre[0]);
				int w = Integer.parseInt(pre[1]);
				materia.add(v, w);
			}

			materia.topSort();
			
			System.out.println();
		}
	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class EjercicioD {

	static class MyGraph {

		class Nodo /*implements Comparable<Nodo>*/ {
			Integer inDegree;
			Integer topNum=0;

			/**
			 * @param v
			 * @param w
			 * @param weight
			 */
			public Nodo( Integer w) {
				this.inDegree=w;
			}

			/*@Override
			public int compareTo(Nodo o) {
				if (weight == o.weight) {
					return v - o.v;
				}
				return weight - o.weight;
			}*/

		}

		ArrayList<ArrayList<Integer>> graf;

		public MyGraph() {
			graf = new ArrayList<ArrayList<Integer>>();

		}

		public void add(int v, int w) {
			graf.get(v).add(w);
		}

		public int BFS(int source) {
			Queue<Integer> q = new LinkedList<Integer>();
			int number = 0;
			q.add(source);
			int dist[] = new int[graf.size()];
			boolean vis[] = new boolean[graf.size()];
			dist[source] = 0;
			vis[source] = true;
			while (!q.isEmpty()) {
				int current = q.poll();
				for (int i = 0; i < graf.get(current).size(); i++) {
					int neigh = graf.get(current).get(i);
					if (vis[neigh] == false) {
						number++;
						q.add(neigh);
						dist[neigh] = dist[current] + 1;
						vis[neigh] = true;
					}
				}
			}

			return number;
		}

		public boolean conectVW(int v, int w) {

			for (int i = 0; i < graf.get(v).size(); i++) {
				if (graf.get(v).get(i) == w)
					return true;
			}
			return false;
		}

		public int outDegree(int v) {
			return graf.get(v).size();
		}

		public int inDegree(int v) {
			int a = 0;
			for (int i = 0; i < graf.size(); i++) {
				if (graf.get(i).contains(v)) {
					a++;
				}
			}

			return a;
		}

		public void topSort() {
			PriorityQueue<Integer> orden = new PriorityQueue<Integer>();
			Nodo[] topics=new Nodo[graf.size()];
			int counter = 0;
			
			for(int i=0; i<graf.size();i++){
				topics[i]= new Nodo(inDegree(i));
			}

			for (int i = 0; i < graf.size(); i++) {
				if (topics[i].inDegree == 0) {
					orden.add(i);
					counter++; // proyecto 7.
				}
			}
		/*	// ////////////////////////////////////////

			if (counter > 1) { // Solo para
															// proyecto 7.
				return;
			}*/

			// ////////////////////////////////////////

			while (!orden.isEmpty()) {
				Integer v = orden.remove();
				System.out.print(v+" ");
				 topics[v].topNum=++counter;

				int ctr = 0;

				for (int i = 0; i < graf.get(v).size(); i++) {
					if (--topics[graf.get(v).get(i)].inDegree == 0) {
						orden.add(graf.get(v).get(i));
						ctr++; // Para proyecto 7.
					}
				}
/*
				// //////////////////////////////////////////

				if (ctr > 1) {
																	// proyecto
																	// 7.
					return;
				}
*/
				// //////////////////////////////////////////
			}

			/*// /////////////////////////////////////////////

			System.out.println("Deberia empezar a estudiar"); // /Solo para el
																// proyecto 7.

			// /////////////////////////////////////////////
*/		}

	}
	
	
	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan;
		File file = new File("P7B_15_2_1.in");
		if (file.exists()) {
			scan = new Scanner(file);
		} else {
			scan = new Scanner(System.in);
		}
		int cases = Integer.parseInt(scan.nextLine());
		for (int test = 0; test < cases; test++) {
			System.out.println("Case #" + (test + 1) + ":");
			MyGraph materia = new MyGraph();
			String lines[] = scan.nextLine().split(" ");
			int N = Integer.parseInt(lines[0]);
			int M = Integer.parseInt(lines[1]);

			for (int i = 0; i < N; i++) {
				ArrayList<Integer> tema = new ArrayList<Integer>();
				materia.graf.add(tema);
			}

			for (int i = 0; i < M; i++) {
				String pre[] = scan.nextLine().split(" ");
				int v = Integer.parseInt(pre[0]);
				int w = Integer.parseInt(pre[1]);
				materia.add(v, w);
			}

			materia.topSort();
			
			System.out.println();
		}
	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
