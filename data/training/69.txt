package paquete;

import java.util.Scanner;

public class problemaA {

	public static class MyArrayList<AnyType> implements Iterable<AnyType> {
		/**
		 * Construct an empty ArrayList.
		 */
		public MyArrayList() {
			doClear();
		}

		/**
		 * Returns the number of items in this collection.
		 * 
		 * @return the number of items in this collection.
		 */
		public int size() {
			return theSize;
		}

		/**
		 * Returns true if this collection is empty.
		 * 
		 * @return true if this collection is empty.
		 */
		public boolean isEmpty() {
			return size() == 0;
		}

		/**
		 * Returns the item at position idx.
		 * 
		 * @param idx
		 *            the index to search in.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType get(int idx) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			return theItems[idx];
		}

		/**
		 * Changes the item at position idx.
		 * 
		 * @param idx
		 *            the index to change.
		 * @param newVal
		 *            the new value.
		 * @return the old value.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType set(int idx, AnyType newVal) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			AnyType old = theItems[idx];
			theItems[idx] = newVal;

			return old;
		}

		@SuppressWarnings("unchecked")
		public void ensureCapacity(int newCapacity) {
			if (newCapacity < theSize)
				return;

			AnyType[] old = theItems;
			theItems = (AnyType[]) new Object[newCapacity];
			for (int i = 0; i < size(); i++)
				theItems[i] = old[i];
		}

		/**
		 * Adds an item to this collection, at the end.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public boolean add(AnyType x) {
			add(size(), x);
			return true;
		}

		/**
		 * Adds an item to this collection, at the specified index.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public void add(int idx, AnyType x) {
			
			if (theItems.length == size())
				ensureCapacity(size() * 2 + 1);

			for (int i = theSize; i > idx; i--)
				theItems[i] = theItems[i - 1];

			theItems[idx] = x;
			theSize++;
		}

		/**
		 * Removes an item from this collection.
		 * 
		 * @param idx
		 *            the index of the object.
		 * @return the item was removed from the collection.
		 */
		public AnyType remove(int idx) {
			AnyType removedItem = theItems[idx];

			for (int i = idx; i < size() - 1; i++)
				theItems[i] = theItems[i + 1];
			theSize--;

			return removedItem;
		}

		/**
		 * Change the size of this collection to zero.
		 */
		public void clear() {
			doClear();
		}

		private void doClear() {
			theSize = 0;
			ensureCapacity(DEFAULT_CAPACITY);
		}

		/**
		 * Obtains an Iterator object used to traverse the collection.
		 * 
		 * @return an iterator positioned prior to the first element.
		 */
		public java.util.Iterator<AnyType> iterator() {
			return new ArrayListIterator();
		}

		/**
		 * Returns a String representation of this collection.
		 */
		public String toString() {
			StringBuilder sb = new StringBuilder("[ ");

			for (AnyType x : this)
				sb.append(x + " ");
			sb.append("]");

			return new String(sb);
		}

		/**
		 * This is the implementation of the ArrayListIterator. It maintains a
		 * notion of a current position and of course the implicit reference to
		 * the MyArrayList.
		 */
		private class ArrayListIterator implements java.util.Iterator<AnyType> {
			private int current = 0;
			private boolean okToRemove = false;

			public boolean hasNext() {
				return current < size();
			}

			public AnyType next() {
				if (!hasNext())
					throw new java.util.NoSuchElementException();

				okToRemove = true;
				return theItems[current++];
			}

			public void remove() {
				if (!okToRemove)
					throw new IllegalStateException();

				MyArrayList.this.remove(--current);
				okToRemove = false;
			}
		}

		private static final int DEFAULT_CAPACITY = 10;

		private AnyType[] theItems;
		private int theSize;
	}
////////////////////////////////////////////////////////////////////////////////////////
	public static void main(String[] args) 
	{

		int casos;
		int linea;
		int pos;
		int x;
		String instruc;
        Scanner ingreso = new Scanner(System.in);
		casos = ingreso.nextInt();
		for (int i = 0; i < casos; i++) 
		{

			int costoAL = 0, costoLink = 0;
			linea = ingreso.nextInt();
			MyArrayList<Integer> aL = new MyArrayList<>();
			System.out.println("Case #" +(i + 1)+ ":");

			for (int j = 0; j < linea; j++) 
			{

				instruc = ingreso.next();
             //comandos
				switch (instruc) 
				{

					case "insertar":
						x = ingreso.nextInt();
						pos = ingreso.nextInt();
						
						if (pos < 0 || pos > aL.size()) 
						{
							   System.out.println("Insertar: posicion invalida");
						} else {
							System.out.println("Insertar: posicion valida");
							
							costoAL =costoAL+(aL.size()-pos);
							costoLink = costoLink + pos;
							aL.add(pos, x);
	
						}
	
						break;
	
					case "consultar":
						pos = ingreso.nextInt();
						
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("Consulta: no encontrado");
						} else {
							aL.get(pos);
							System.out.println("Consulta: " + aL.get(pos));
							costoLink=costoLink+pos;
						}
						break;
	
					case "eliminar":
						pos = ingreso.nextInt();
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("Eliminar: Posicion invalida");
						} else {
							costoAL = costoAL + (aL.size() - pos - 1);
							costoLink = costoLink + pos;
							aL.remove(pos);
							System.out.println("Eliminar: Posicion valida");
						}
	
						break;
	
					case "buscar":
						
						x = ingreso.nextInt();
						int currentVal=0;
						boolean y = false;
						for (int k = 0; k < aL.size(); k++) 
						{
	
							if (aL.get(k) == x)
							{	
								currentVal = k;
								y=true;
								break;
							}
						}
						if (y == true) 
						{
							System.out.println("Buscar: " + currentVal);
							
							costoAL=costoAL+(currentVal+1);
							costoLink=costoLink+(currentVal+1);
						} else {
							costoAL = costoAL + aL.size();
							costoLink = costoLink + aL.size();
							
							System.out.println("No existe numero");
						}
						break;
	
					case "costo":
	
						System.out.println("Costo: " + costoAL + "," + costoLink);
						break;
				     }
			   }

		    }
	       }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package paquete;
import java.util.Scanner;
import java.util.LinkedList;

import java.io.File;
import java.io.FileNotFoundException;


public class Main {

	@SuppressWarnings("resource")
	public static void main(String[] args) throws FileNotFoundException {
        Scanner ingreso;
		File archivo = new File("C:/Documents and Settings/Nimrod/My Documents/Downloads/B_2.txt");
		if (archivo.exists()) 
		{
			ingreso = new Scanner(archivo);
		} else {
			ingreso = new Scanner(System.in);
		}

		int casos = Integer.parseInt(ingreso.nextLine());
		
		for (int i = 0; i < casos; i++) 
		{	System.out.print("Caso #" + ++i + ":\n");
			i--;
			LinkedList<Integer> gan = new LinkedList<Integer>();
            LinkedList<Integer> t = new LinkedList<Integer>();
			LinkedList<Integer> jugs = new LinkedList<Integer>();
			int Ccartas = 0; 
			int Cjugs = 0;
			int mayor = 0;
			int move = 0;
            String f[] = ingreso.nextLine().split(" ");
            Ccartas = Integer.parseInt(f[0]);
			Cjugs = Integer.parseInt(f[1]);
            String cards = ingreso.nextLine();
			t = readInts(cards);


			for (int j = 0; j < Cjugs; j++) {
				if (t.isEmpty()) {
					break;
				}

				//System.out.println("jugador:");
				//System.out.println(j + 1);

				if (t.getFirst() > t.getLast())
				{
					if (jugs.size() <= j) 
					{
						jugs.add(j, t.removeFirst());
					} else {
						jugs.set(j, jugs.get(j) + t.removeFirst());
					}
				} else {
					if (jugs.size() <= j) 
					{
						jugs.add(j, t.removeLast());
					} else {
						jugs.set(j, jugs.get(j) + t.removeLast());
					}
				}
				if (j == Cjugs - 1) 
				{
					j = -1;
				}

			}

			mayor = elementoMayor(jugs);
           //System.out.println("Mayor valor: "+mayor);
           for (Integer jug : jugs) 
           {
				if (jug.equals(mayor)) 
				{
					gan.add(jugs.indexOf(jug) + move);
					move++;
				}
			}
			
			for (Integer win : gan)
			{
				System.out.print(win + 1 + " ");
			}
			System.out.println();

		}

	}

	public static LinkedList<Integer> readInts(String cad){
		String lines[]=cad.split(" ");
		LinkedList<Integer> lista = new LinkedList<>();
		for(int i = 0; i < lines.length; i++) {
			lista.add(Integer.parseInt(lines[i]));
		}
		return lista;
	}

	private static Integer elementoMayor(LinkedList<Integer> list) {
		Integer v = 0;
		for(Integer value : list) 
		{
			if(value.compareTo(v) > 0) 
			{
				v = value;
			} else{
				continue;
			}
		}
		return v;
	}

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
package paquete;
import java.util.LinkedList;
import java.util.Scanner;

import java.io.File;
import java.util.ArrayList;


public class Main {

  public static class Persona
	{
		String nombre;
		String apellido;
		String documento;
		public Persona(String nombre,String apellido, String documento)
		{
			this.nombre=nombre;
			this.apellido=apellido;
			this.documento=documento;
		}
		public boolean equalsTo(Persona persona){
			return persona.nombre.equals(nombre)&persona.apellido.equals(apellido)&persona.documento.equals(documento);
		}
		@Override
		public String toString() {
			return "Persona [Nombre="+nombre+", Apellido="+apellido+", Documento="+documento+"]";
		}
		
	}
	public static ArrayList<Casill> Dis(ArrayList<Casill> in){
		for(int i=1;i<in.size();i++)
		{
			if(in.get(i-1).compareTo(in.get(i)))
			{
				
				Casill v1=in.get(i-1);
				Casill v2=in.get(i);
				in.remove(i);
				in.remove(i-1);
				in.add(i-1,v1);
				in.add(i-1,v2);
				
			}
		}
		return in;
	}
	public static class Casill{
		
		public int id;
		public int tam;
		public int mayorTam;
		public LinkedList<Persona> listPersonas;
		public Casill(int id,int maxSize)
		{
			this.id=id;
			this.mayorTam=maxSize;
			listPersonas=new LinkedList<>();
		}
		public void add(Persona person){
			if(tam<mayorTam)
			{
				listPersonas.add(person);
				tam=listPersonas.size();
				
				System.out.println((id+1)+" "+tam);
			}
			else{
				System.out.println("Limite alcanzado");
			}
		}
		public void remove(int index){
			listPersonas.remove(index);
			tam=listPersonas.size();
		}
		public float load(){
			return (float)tam/(float)mayorTam;
		}
		public boolean compareTo(Casill e){
			if((id<e.id)&&load()<=e.load()){
				return true;
			}
			else if(load()<e.load()){
				return true;
			}
			return false;
		}
		@Override
		public String toString() {
			return "Cas [id=" + id + ", size=" + tam + ", maxSize=" + mayorTam + ", listPerson=" + listPersonas + "]";
		}
		
	}
	
	
	
	public static void main(String[] args) throws Exception {
		Scanner sca = new Scanner(System.in);
                
                
               /* File archivo = new File("C:/Documents and Settings/Nimrod/My Documents/Downloads/B_2.txt");
		if (archivo.exists()) 
		{
			ingreso = new Scanner(archivo);
		} else {
			ingreso = new Scanner(System.in);
		}*/
                
                
                
                
                
                
                
                
		ArrayList<Casill> listCasill;
		
		int numCasos=sca.nextInt();
		for(int i=0;i<numCasos;i++){
			System.out.println("Caso #"+(i+1)+":");
			listCasill=new ArrayList<>();
			int numCas=sca.nextInt();
			for(int j=0;j<numCas;j++){
				listCasill.add(new Casill(j, sca.nextInt()));
			}
			int numOp=sca.nextInt();
			for(int j=0;j<numOp;j++){
				String command=sca.next();
				if(command.equals("ingresar")){
					String nombre=sca.next();
					String apellido=sca.next();
					String documento=sca.next();
					
					listCasill=Dis(listCasill);
					listCasill.get(listCasill.size()-1).add(new Persona(nombre, apellido, documento));
				}
				else if(command.equals("salir")){
					String documento=sca.next();
					boolean enable=true;
					
					int indexCas=0;
					int indexPersona=0;
					for(Casill k:listCasill)
					{
						indexPersona=0;
						for(Persona p:k.listPersonas){
							if(p.documento.equals(documento))
							{
								System.out.println(p.nombre);
								enable=false;
								break;
							}
							indexPersona++;
						}
						if(!enable)break;
						indexCas++;
					}
					listCasill.get(indexCas).remove(indexPersona);
				    }
			   }
		    }
	}  

}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemaa;
import java.util.LinkedList;
import java.util.Scanner;

import java.io.File;
import java.util.ArrayList;
/**
 *
 */
public class ProblemaA {

 

	public static class MyArrayList<AnyType> implements Iterable<AnyType> {
		/**
		 * Construct an empty ArrayList.
		 */
		public MyArrayList() {
			doClear();
		}

		/**
		 * Returns the number of items in this collection.
		 * 
		 * @return the number of items in this collection.
		 */
		public int size() {
			return theSize;
		}

		/**
		 * Returns true if this collection is empty.
		 * 
		 * @return true if this collection is empty.
		 */
		public boolean isEmpty() {
			return size() == 0;
		}

		/**
		 * Returns the item at position idx.
		 * 
		 * @param idx
		 *            the index to search in.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType get(int idx) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			return theItems[idx];
		}

		/**
		 * Changes the item at position idx.
		 * 
		 * @param idx
		 *            the index to change.
		 * @param newVal
		 *            the new value.
		 * @return the old value.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType set(int idx, AnyType newVal) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			AnyType old = theItems[idx];
			theItems[idx] = newVal;

			return old;
		}

		@SuppressWarnings("unchecked")
		public void ensureCapacity(int newCapacity) {
			if (newCapacity < theSize)
				return;

			AnyType[] old = theItems;
			theItems = (AnyType[]) new Object[newCapacity];
			for (int i = 0; i < size(); i++)
				theItems[i] = old[i];
		}

		/**
		 * Adds an item to this collection, at the end.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public boolean add(AnyType x) {
			add(size(), x);
			return true;
		}

		/**
		 * Adds an item to this collection, at the specified index.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public void add(int idx, AnyType x) {
			
			if (theItems.length == size())
				ensureCapacity(size() * 2 + 1);

			for (int i = theSize; i > idx; i--)
				theItems[i] = theItems[i - 1];

			theItems[idx] = x;
			theSize++;
		}

		/**
		 * Removes an item from this collection.
		 * 
		 * @param idx
		 *            the index of the object.
		 * @return the item was removed from the collection.
		 */
		public AnyType remove(int idx) {
			AnyType removedItem = theItems[idx];

			for (int i = idx; i < size() - 1; i++)
				theItems[i] = theItems[i + 1];
			theSize--;

			return removedItem;
		}

		/**
		 * Change the size of this collection to zero.
		 */
		public void clear() {
			doClear();
		}

		private void doClear() {
			theSize = 0;
			ensureCapacity(DEFAULT_CAPACITY);
		}

		/**
		 * Obtains an Iterator object used to traverse the collection.
		 * 
		 * @return an iterator positioned prior to the first element.
		 */
		public java.util.Iterator<AnyType> iterator() {
			return new ArrayListIterator();
		}

		/**
		 * Returns a String representation of this collection.
		 */
		public String toString() {
			StringBuilder sb = new StringBuilder("[ ");

			for (AnyType x : this)
				sb.append(x + " ");
			sb.append("]");

			return new String(sb);
		}

		/**
		 * This is the implementation of the ArrayListIterator. It maintains a
		 * notion of a current position and of course the implicit reference to
		 * the MyArrayList.
		 */
		private class ArrayListIterator implements java.util.Iterator<AnyType> {
			private int current = 0;
			private boolean okToRemove = false;

			public boolean hasNext() {
				return current < size();
			}

			public AnyType next() {
				if (!hasNext())
					throw new java.util.NoSuchElementException();

				okToRemove = true;
				return theItems[current++];
			}

			public void remove() {
				if (!okToRemove)
					throw new IllegalStateException();

				MyArrayList.this.remove(--current);
				okToRemove = false;
			}
		}

		private static final int DEFAULT_CAPACITY = 10;

		private AnyType[] theItems;
		private int theSize;
	}
////////////////////////////////////////////////////////////////////////////////////////
	public static void main(String[] args) 
	{

		int casos;
		int linea;
		int pos;
		int x;
		String instruc;
        Scanner ingreso = new Scanner(System.in);
		casos = ingreso.nextInt();
		for (int i = 0; i < casos; i++) 
		{

			int costoAL = 0, costoLink = 0;
			linea = ingreso.nextInt();
			MyArrayList<Integer> aL = new MyArrayList<>();
			System.out.println("Case #" +(i + 1)+ ":");

			for (int j = 0; j < linea; j++) 
			{

				instruc = ingreso.next();
             //comandos
				switch (instruc) 
				{

					case "insertar":
						x = ingreso.nextInt();
						pos = ingreso.nextInt();
						
						if (pos < 0 || pos > aL.size()) 
						{
							   System.out.println("Insertar: posicion invalida");
						} else {
							System.out.println("Insertar: posicion valida");
							
							costoAL =costoAL+(aL.size()-pos);
							costoLink = costoLink + pos;
							aL.add(pos, x);
	
						}
	
						break;
	
					case "consultar":
						pos = ingreso.nextInt();
						
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("Consulta: no encontrado");
						} else {
							aL.get(pos);
							System.out.println("Consulta: " + aL.get(pos));
							costoLink=costoLink+pos;
						}
						break;
	
					case "eliminar":
						pos = ingreso.nextInt();
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("Eliminar: Posicion invalida");
						} else {
							costoAL = costoAL + (aL.size() - pos - 1);
							costoLink = costoLink + pos;
							aL.remove(pos);
							System.out.println("Eliminar: Posicion valida");
						}
	
						break;
	
					case "buscar":
						
						x = ingreso.nextInt();
						int currentVal=0;
						boolean y = false;
						for (int k = 0; k < aL.size(); k++) 
						{
	
							if (aL.get(k) == x)
							{	
								currentVal = k;
								y=true;
								break;
							}
						}
						if (y == true) 
						{
							System.out.println("Buscar: " + currentVal);
							
							costoAL=costoAL+(currentVal+1);
							costoLink=costoLink+(currentVal+1);
						} else {
							costoAL = costoAL + aL.size();
							costoLink = costoLink + aL.size();
							
							System.out.println("No existe numero");
						}
						break;
	
					case "costo":
	
						System.out.println("Costo: " + costoAL + "," + costoLink);
						break;
				     }
			   }

		    }
	       }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemaa;
import java.util.LinkedList;
import java.util.Scanner;

import java.io.File;
import java.util.ArrayList;
/**
 *
 */
public class ProblemaA {

 

	public static class MyArrayList<AnyType> implements Iterable<AnyType> {
		/**
		 * Construct an empty ArrayList.
		 */
		public MyArrayList() {
			doClear();
		}

		/**
		 * Returns the number of items in this collection.
		 * 
		 * @return the number of items in this collection.
		 */
		public int size() {
			return theSize;
		}

		/**
		 * Returns true if this collection is empty.
		 * 
		 * @return true if this collection is empty.
		 */
		public boolean isEmpty() {
			return size() == 0;
		}

		/**
		 * Returns the item at position idx.
		 * 
		 * @param idx
		 *            the index to search in.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType get(int idx) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			return theItems[idx];
		}

		/**
		 * Changes the item at position idx.
		 * 
		 * @param idx
		 *            the index to change.
		 * @param newVal
		 *            the new value.
		 * @return the old value.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType set(int idx, AnyType newVal) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			AnyType old = theItems[idx];
			theItems[idx] = newVal;

			return old;
		}

		@SuppressWarnings("unchecked")
		public void ensureCapacity(int newCapacity) {
			if (newCapacity < theSize)
				return;

			AnyType[] old = theItems;
			theItems = (AnyType[]) new Object[newCapacity];
			for (int i = 0; i < size(); i++)
				theItems[i] = old[i];
		}

		/**
		 * Adds an item to this collection, at the end.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public boolean add(AnyType x) {
			add(size(), x);
			return true;
		}

		/**
		 * Adds an item to this collection, at the specified index.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public void add(int idx, AnyType x) {
			
			if (theItems.length == size())
				ensureCapacity(size() * 2 + 1);

			for (int i = theSize; i > idx; i--)
				theItems[i] = theItems[i - 1];

			theItems[idx] = x;
			theSize++;
		}

		/**
		 * Removes an item from this collection.
		 * 
		 * @param idx
		 *            the index of the object.
		 * @return the item was removed from the collection.
		 */
		public AnyType remove(int idx) {
			AnyType removedItem = theItems[idx];

			for (int i = idx; i < size() - 1; i++)
				theItems[i] = theItems[i + 1];
			theSize--;

			return removedItem;
		}

		/**
		 * Change the size of this collection to zero.
		 */
		public void clear() {
			doClear();
		}

		private void doClear() {
			theSize = 0;
			ensureCapacity(DEFAULT_CAPACITY);
		}

		/**
		 * Obtains an Iterator object used to traverse the collection.
		 * 
		 * @return an iterator positioned prior to the first element.
		 */
		public java.util.Iterator<AnyType> iterator() {
			return new ArrayListIterator();
		}

		/**
		 * Returns a String representation of this collection.
		 */
		public String toString() {
			StringBuilder sb = new StringBuilder("[ ");

			for (AnyType x : this)
				sb.append(x + " ");
			sb.append("]");

			return new String(sb);
		}

		/**
		 * This is the implementation of the ArrayListIterator. It maintains a
		 * notion of a current position and of course the implicit reference to
		 * the MyArrayList.
		 */
		private class ArrayListIterator implements java.util.Iterator<AnyType> {
			private int current = 0;
			private boolean okToRemove = false;

			public boolean hasNext() {
				return current < size();
			}

			public AnyType next() {
				if (!hasNext())
					throw new java.util.NoSuchElementException();

				okToRemove = true;
				return theItems[current++];
			}

			public void remove() {
				if (!okToRemove)
					throw new IllegalStateException();

				MyArrayList.this.remove(--current);
				okToRemove = false;
			}
		}

		private static final int DEFAULT_CAPACITY = 10;

		private AnyType[] theItems;
		private int theSize;
	}
////////////////////////////////////////////////////////////////////////////////////////
	public static void main(String[] args) 
	{

		int casos;
		int linea;
		int pos;
		int x;
		String instruc;
        Scanner ingreso = new Scanner(System.in);
		casos = ingreso.nextInt();
		for (int i = 0; i < casos; i++) 
		{

			int costoAL = 0, costoLink = 0;
			linea = ingreso.nextInt();
			MyArrayList<Integer> aL = new MyArrayList<>();
			System.out.println("caso #" +(i + 1)+ ":");

			for (int j = 0; j < linea; j++) 
			{

				instruc = ingreso.next();
             //comandos
				switch (instruc) 
				{

					case "insertar":
						x = ingreso.nextInt();
						pos = ingreso.nextInt();
						
						if (pos < 0 || pos > aL.size()) 
						{
							   System.out.println("insertar: posicion invalida");
						} else {
							System.out.println("insertar: posicion valida");
							
							costoAL =costoAL+(aL.size()-pos);
							costoLink = costoLink + pos;
							aL.add(pos, x);
	
						}
	
						break;
	
					case "consultar":
						pos = ingreso.nextInt();
						
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("consulta: no encontrado");
						} else {
							aL.get(pos);
							System.out.println("consulta: " + aL.get(pos));
							costoLink=costoLink+pos;
						}
						break;
	
					case "eliminar":
						pos = ingreso.nextInt();
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("eliminar: Posicion invalida");
						} else {
							costoAL = costoAL + (aL.size() - pos - 1);
							costoLink = costoLink + pos;
							aL.remove(pos);
							System.out.println("eliminar: Posicion valida");
						}
	
						break;
	
					case "buscar":
						
						x = ingreso.nextInt();
						int currentVal=0;
						boolean y = false;
						for (int k = 0; k < aL.size(); k++) 
						{
	
							if (aL.get(k) == x)
							{	
								currentVal = k;
								y=true;
								break;
							}
						}
						if (y == true) 
						{
							System.out.println("buscar: " + currentVal);
							
							costoAL=costoAL+(currentVal+1);
							costoLink=costoLink+(currentVal+1);
						} else {
							costoAL = costoAL + aL.size();
							costoLink = costoLink + aL.size();
							
							System.out.println("no existe numero");
						}
						break;
	
					case "costo":
	
						System.out.println("costo: " + costoAL + "," + costoLink);
						break;
				     }
			   }

		    }
	       }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package problemaa;
import java.util.LinkedList;
import java.util.Scanner;

import java.io.File;
import java.util.ArrayList;
/**
 *
 */
public class ProblemaA {

 

	public static class MyArrayList<AnyType> implements Iterable<AnyType> {
		/**
		 * Construct an empty ArrayList.
		 */
		public MyArrayList() {
			doClear();
		}

		/**
		 * Returns the number of items in this collection.
		 * 
		 * @return the number of items in this collection.
		 */
		public int size() {
			return theSize;
		}

		/**
		 * Returns true if this collection is empty.
		 * 
		 * @return true if this collection is empty.
		 */
		public boolean isEmpty() {
			return size() == 0;
		}

		/**
		 * Returns the item at position idx.
		 * 
		 * @param idx
		 *            the index to search in.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType get(int idx) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			return theItems[idx];
		}

		/**
		 * Changes the item at position idx.
		 * 
		 * @param idx
		 *            the index to change.
		 * @param newVal
		 *            the new value.
		 * @return the old value.
		 * @throws ArrayIndexOutOfBoundsException
		 *             if index is out of range.
		 */
		public AnyType set(int idx, AnyType newVal) {
			if (idx < 0 || idx >= size())
				throw new ArrayIndexOutOfBoundsException("Index " + idx + "; size " + size());
			AnyType old = theItems[idx];
			theItems[idx] = newVal;

			return old;
		}

		@SuppressWarnings("unchecked")
		public void ensureCapacity(int newCapacity) {
			if (newCapacity < theSize)
				return;

			AnyType[] old = theItems;
			theItems = (AnyType[]) new Object[newCapacity];
			for (int i = 0; i < size(); i++)
				theItems[i] = old[i];
		}

		/**
		 * Adds an item to this collection, at the end.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public boolean add(AnyType x) {
			add(size(), x);
			return true;
		}

		/**
		 * Adds an item to this collection, at the specified index.
		 * 
		 * @param x
		 *            any object.
		 * @return true.
		 */
		public void add(int idx, AnyType x) {
			
			if (theItems.length == size())
				ensureCapacity(size() * 2 + 1);

			for (int i = theSize; i > idx; i--)
				theItems[i] = theItems[i - 1];

			theItems[idx] = x;
			theSize++;
		}

		/**
		 * Removes an item from this collection.
		 * 
		 * @param idx
		 *            the index of the object.
		 * @return the item was removed from the collection.
		 */
		public AnyType remove(int idx) {
			AnyType removedItem = theItems[idx];

			for (int i = idx; i < size() - 1; i++)
				theItems[i] = theItems[i + 1];
			theSize--;

			return removedItem;
		}

		/**
		 * Change the size of this collection to zero.
		 */
		public void clear() {
			doClear();
		}

		private void doClear() {
			theSize = 0;
			ensureCapacity(DEFAULT_CAPACITY);
		}

		/**
		 * Obtains an Iterator object used to traverse the collection.
		 * 
		 * @return an iterator positioned prior to the first element.
		 */
		public java.util.Iterator<AnyType> iterator() {
			return new ArrayListIterator();
		}

		/**
		 * Returns a String representation of this collection.
		 */
		public String toString() {
			StringBuilder sb = new StringBuilder("[ ");

			for (AnyType x : this)
				sb.append(x + " ");
			sb.append("]");

			return new String(sb);
		}

		/**
		 * This is the implementation of the ArrayListIterator. It maintains a
		 * notion of a current position and of course the implicit reference to
		 * the MyArrayList.
		 */
		private class ArrayListIterator implements java.util.Iterator<AnyType> {
			private int current = 0;
			private boolean okToRemove = false;

			public boolean hasNext() {
				return current < size();
			}

			public AnyType next() {
				if (!hasNext())
					throw new java.util.NoSuchElementException();

				okToRemove = true;
				return theItems[current++];
			}

			public void remove() {
				if (!okToRemove)
					throw new IllegalStateException();

				MyArrayList.this.remove(--current);
				okToRemove = false;
			}
		}

		private static final int DEFAULT_CAPACITY = 10;

		private AnyType[] theItems;
		private int theSize;
	}
////////////////////////////////////////////////////////////////////////////////////////
	public static void main(String[] args) 
	{

		int casos;
		int linea;
		int pos;
		int x;
		String instruc;
        Scanner ingreso = new Scanner(System.in);
		casos = ingreso.nextInt();
		for (int i = 0; i < casos; i++) 
		{

			int costoAL = 0, costoLink = 0;
			linea = ingreso.nextInt();
			MyArrayList<Integer> aL = new MyArrayList<>();
			System.out.println("caso #" +(i + 1)+ ":");

			for (int j = 0; j < linea; j++) 
			{

				instruc = ingreso.next();
             //comandos
				switch (instruc) 
				{

					case "insertar":
						x = ingreso.nextInt();
						pos = ingreso.nextInt();
						
						if (pos < 0 || pos > aL.size()) 
						{
							   System.out.println("insertar: posicion invalida");
						} else {
							System.out.println("insertar: posicion valida");
							
							costoAL =costoAL+(aL.size()-pos);
							costoLink = costoLink + pos;
							aL.add(pos, x);
	
						}
	
						break;
	
					case "consultar":
						pos = ingreso.nextInt();
						
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("consulta: no encontrado");
						} else {
							aL.get(pos);
							System.out.println("consulta: " + aL.get(pos));
							costoLink=costoLink+pos;
						}
						break;
	
					case "eliminar":
						pos = ingreso.nextInt();
	
						if (pos < 0 || pos >= aL.size()) 
						{
							System.out.println("eliminar: Posicion invalida");
						} else {
							costoAL = costoAL + (aL.size() - pos - 1);
							costoLink = costoLink + pos;
							aL.remove(pos);
							System.out.println("eliminar: Posicion valida");
						}
	
						break;
	
					case "buscar":
						
						x = ingreso.nextInt();
						int currentVal=0;
						boolean y = false;
						for (int k = 0; k < aL.size(); k++) 
						{
	
							if (aL.get(k) == x)
							{	
								currentVal = k;
								y=true;
								break;
							}
						}
						if (y == true) 
						{
							System.out.println("buscar: " + currentVal);
							
							costoAL=costoAL+(currentVal+1);
							costoLink=costoLink+(currentVal+1);
						} else {
							costoAL = costoAL + aL.size();
							costoLink = costoLink + aL.size();
							
							System.out.println("no existe numero");
						}
						break;
	
					case "costo":
	
						System.out.println("costo: " + costoAL + "," + costoLink);
						break;
				     }
			   }

		    }
	       }
}

<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>
